// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "bwlp"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  bool ping()")
  fmt.Fprintln(os.Stderr, "  SessionData authenticate(string login, string password)")
  fmt.Fprintln(os.Stderr, "  ClientSessionData localAccountLogin(string login, string password)")
  fmt.Fprintln(os.Stderr, "  void setUsedSatellite(Token sessionId, string satelliteName)")
  fmt.Fprintln(os.Stderr, "   findUser(Token sessionId, string organizationId, string searchTerm)")
  fmt.Fprintln(os.Stderr, "   getPublicImages(Token sessionId, i32 page)")
  fmt.Fprintln(os.Stderr, "  ImageDetailsRead getImageDetails(Token sessionId, UUID imageBaseId)")
  fmt.Fprintln(os.Stderr, "  UserInfo getUser(Token userToken, UUID userId)")
  fmt.Fprintln(os.Stderr, "  void invalidateSession(Token sessionId)")
  fmt.Fprintln(os.Stderr, "  UserInfo getUserFromToken(Token token)")
  fmt.Fprintln(os.Stderr, "  bool isServerAuthenticated(Token serverSessionId)")
  fmt.Fprintln(os.Stderr, "  string startServerAuthentication(i32 satelliteId)")
  fmt.Fprintln(os.Stderr, "  ServerSessionData serverAuthenticate(i32 satelliteId, string challengeResponse)")
  fmt.Fprintln(os.Stderr, "  ImagePublishData getImageData(Token serverSessionId, UUID imageVersionId)")
  fmt.Fprintln(os.Stderr, "  TransferInformation submitImage(Token userToken, ImagePublishData imageDescription,  blockHashes)")
  fmt.Fprintln(os.Stderr, "  i32 registerSatellite(Token userToken, string displayName,  addresses, string modulus, string exponent, string certsha256)")
  fmt.Fprintln(os.Stderr, "  bool updateSatellite(Token serverSessionId, string displayName,  addresses)")
  fmt.Fprintln(os.Stderr, "  TransferInformation downloadImage(Token sessionId, UUID imageVersionId)")
  fmt.Fprintln(os.Stderr, "   getOrganizations()")
  fmt.Fprintln(os.Stderr, "   getOperatingSystems()")
  fmt.Fprintln(os.Stderr, "   getVirtualizers()")
  fmt.Fprintln(os.Stderr, "   getTags(UnixTimestamp startDate)")
  fmt.Fprintln(os.Stderr, "   getSoftware(UnixTimestamp startDate)")
  fmt.Fprintln(os.Stderr, "  TransferStatus queryUploadStatus(Token uploadToken)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := bwlp.NewMasterServerClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "ping":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Ping requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Ping())
    fmt.Print("\n")
    break
  case "authenticate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Authenticate requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.Authenticate(value0, value1))
    fmt.Print("\n")
    break
  case "localAccountLogin":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LocalAccountLogin requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LocalAccountLogin(value0, value1))
    fmt.Print("\n")
    break
  case "setUsedSatellite":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetUsedSatellite requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetUsedSatellite(value0, value1))
    fmt.Print("\n")
    break
  case "findUser":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindUser requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindUser(value0, value1, value2))
    fmt.Print("\n")
    break
  case "getPublicImages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPublicImages requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    tmp1, err325 := (strconv.Atoi(flag.Arg(2)))
    if err325 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetPublicImages(value0, value1))
    fmt.Print("\n")
    break
  case "getImageDetails":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetImageDetails requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := bwlp.UUID(argvalue1)
    fmt.Print(client.GetImageDetails(value0, value1))
    fmt.Print("\n")
    break
  case "getUser":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetUser requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := bwlp.UUID(argvalue1)
    fmt.Print(client.GetUser(value0, value1))
    fmt.Print("\n")
    break
  case "invalidateSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InvalidateSession requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    fmt.Print(client.InvalidateSession(value0))
    fmt.Print("\n")
    break
  case "getUserFromToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserFromToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    fmt.Print(client.GetUserFromToken(value0))
    fmt.Print("\n")
    break
  case "isServerAuthenticated":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsServerAuthenticated requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    fmt.Print(client.IsServerAuthenticated(value0))
    fmt.Print("\n")
    break
  case "startServerAuthentication":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartServerAuthentication requires 1 args")
      flag.Usage()
    }
    tmp0, err333 := (strconv.Atoi(flag.Arg(1)))
    if err333 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.StartServerAuthentication(value0))
    fmt.Print("\n")
    break
  case "serverAuthenticate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ServerAuthenticate requires 2 args")
      flag.Usage()
    }
    tmp0, err334 := (strconv.Atoi(flag.Arg(1)))
    if err334 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.ServerAuthenticate(value0, value1))
    fmt.Print("\n")
    break
  case "getImageData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetImageData requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := bwlp.UUID(argvalue1)
    fmt.Print(client.GetImageData(value0, value1))
    fmt.Print("\n")
    break
  case "submitImage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SubmitImage requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    arg339 := flag.Arg(2)
    mbTrans340 := thrift.NewTMemoryBufferLen(len(arg339))
    defer mbTrans340.Close()
    _, err341 := mbTrans340.WriteString(arg339)
    if err341 != nil {
      Usage()
      return
    }
    factory342 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt343 := factory342.GetProtocol(mbTrans340)
    argvalue1 := bwlp.NewImagePublishData()
    err344 := argvalue1.Read(jsProt343)
    if err344 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg345 := flag.Arg(3)
    mbTrans346 := thrift.NewTMemoryBufferLen(len(arg345))
    defer mbTrans346.Close()
    _, err347 := mbTrans346.WriteString(arg345)
    if err347 != nil { 
      Usage()
      return
    }
    factory348 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt349 := factory348.GetProtocol(mbTrans346)
    containerStruct2 := bwlp.NewMasterServerSubmitImageArgs()
    err350 := containerStruct2.ReadField3(jsProt349)
    if err350 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.BlockHashes
    value2 := argvalue2
    fmt.Print(client.SubmitImage(value0, value1, value2))
    fmt.Print("\n")
    break
  case "registerSatellite":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "RegisterSatellite requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg353 := flag.Arg(3)
    mbTrans354 := thrift.NewTMemoryBufferLen(len(arg353))
    defer mbTrans354.Close()
    _, err355 := mbTrans354.WriteString(arg353)
    if err355 != nil { 
      Usage()
      return
    }
    factory356 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt357 := factory356.GetProtocol(mbTrans354)
    containerStruct2 := bwlp.NewMasterServerRegisterSatelliteArgs()
    err358 := containerStruct2.ReadField3(jsProt357)
    if err358 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Addresses
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := []byte(flag.Arg(6))
    value5 := argvalue5
    fmt.Print(client.RegisterSatellite(value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "updateSatellite":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSatellite requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg364 := flag.Arg(3)
    mbTrans365 := thrift.NewTMemoryBufferLen(len(arg364))
    defer mbTrans365.Close()
    _, err366 := mbTrans365.WriteString(arg364)
    if err366 != nil { 
      Usage()
      return
    }
    factory367 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt368 := factory367.GetProtocol(mbTrans365)
    containerStruct2 := bwlp.NewMasterServerUpdateSatelliteArgs()
    err369 := containerStruct2.ReadField3(jsProt368)
    if err369 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Addresses
    value2 := argvalue2
    fmt.Print(client.UpdateSatellite(value0, value1, value2))
    fmt.Print("\n")
    break
  case "downloadImage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DownloadImage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := bwlp.UUID(argvalue1)
    fmt.Print(client.DownloadImage(value0, value1))
    fmt.Print("\n")
    break
  case "getOrganizations":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOrganizations requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOrganizations())
    fmt.Print("\n")
    break
  case "getOperatingSystems":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOperatingSystems requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOperatingSystems())
    fmt.Print("\n")
    break
  case "getVirtualizers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetVirtualizers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetVirtualizers())
    fmt.Print("\n")
    break
  case "getTags":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTags requires 1 args")
      flag.Usage()
    }
    argvalue0, err372 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err372 != nil {
      Usage()
      return
    }
    value0 := bwlp.UnixTimestamp(argvalue0)
    fmt.Print(client.GetTags(value0))
    fmt.Print("\n")
    break
  case "getSoftware":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSoftware requires 1 args")
      flag.Usage()
    }
    argvalue0, err373 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err373 != nil {
      Usage()
      return
    }
    value0 := bwlp.UnixTimestamp(argvalue0)
    fmt.Print(client.GetSoftware(value0))
    fmt.Print("\n")
    break
  case "queryUploadStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryUploadStatus requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := bwlp.Token(argvalue0)
    fmt.Print(client.QueryUploadStatus(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
