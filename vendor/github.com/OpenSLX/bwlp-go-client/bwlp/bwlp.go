// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package bwlp

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type AuthorizationError int64
const (
  AuthorizationError_GENERIC_ERROR AuthorizationError = 0
  AuthorizationError_NOT_AUTHENTICATED AuthorizationError = 1
  AuthorizationError_NO_PERMISSION AuthorizationError = 2
  AuthorizationError_ACCOUNT_SUSPENDED AuthorizationError = 3
  AuthorizationError_ORGANIZATION_SUSPENDED AuthorizationError = 4
  AuthorizationError_INVALID_CREDENTIALS AuthorizationError = 5
  AuthorizationError_INVALID_ORGANIZATION AuthorizationError = 6
  AuthorizationError_INVALID_KEY AuthorizationError = 7
  AuthorizationError_INVALID_TOKEN AuthorizationError = 8
  AuthorizationError_CHALLENGE_FAILED AuthorizationError = 9
  AuthorizationError_BANNED_NETWORK AuthorizationError = 10
)

func (p AuthorizationError) String() string {
  switch p {
  case AuthorizationError_GENERIC_ERROR: return "GENERIC_ERROR"
  case AuthorizationError_NOT_AUTHENTICATED: return "NOT_AUTHENTICATED"
  case AuthorizationError_NO_PERMISSION: return "NO_PERMISSION"
  case AuthorizationError_ACCOUNT_SUSPENDED: return "ACCOUNT_SUSPENDED"
  case AuthorizationError_ORGANIZATION_SUSPENDED: return "ORGANIZATION_SUSPENDED"
  case AuthorizationError_INVALID_CREDENTIALS: return "INVALID_CREDENTIALS"
  case AuthorizationError_INVALID_ORGANIZATION: return "INVALID_ORGANIZATION"
  case AuthorizationError_INVALID_KEY: return "INVALID_KEY"
  case AuthorizationError_INVALID_TOKEN: return "INVALID_TOKEN"
  case AuthorizationError_CHALLENGE_FAILED: return "CHALLENGE_FAILED"
  case AuthorizationError_BANNED_NETWORK: return "BANNED_NETWORK"
  }
  return "<UNSET>"
}

func AuthorizationErrorFromString(s string) (AuthorizationError, error) {
  switch s {
  case "GENERIC_ERROR": return AuthorizationError_GENERIC_ERROR, nil 
  case "NOT_AUTHENTICATED": return AuthorizationError_NOT_AUTHENTICATED, nil 
  case "NO_PERMISSION": return AuthorizationError_NO_PERMISSION, nil 
  case "ACCOUNT_SUSPENDED": return AuthorizationError_ACCOUNT_SUSPENDED, nil 
  case "ORGANIZATION_SUSPENDED": return AuthorizationError_ORGANIZATION_SUSPENDED, nil 
  case "INVALID_CREDENTIALS": return AuthorizationError_INVALID_CREDENTIALS, nil 
  case "INVALID_ORGANIZATION": return AuthorizationError_INVALID_ORGANIZATION, nil 
  case "INVALID_KEY": return AuthorizationError_INVALID_KEY, nil 
  case "INVALID_TOKEN": return AuthorizationError_INVALID_TOKEN, nil 
  case "CHALLENGE_FAILED": return AuthorizationError_CHALLENGE_FAILED, nil 
  case "BANNED_NETWORK": return AuthorizationError_BANNED_NETWORK, nil 
  }
  return AuthorizationError(0), fmt.Errorf("not a valid AuthorizationError string")
}


func AuthorizationErrorPtr(v AuthorizationError) *AuthorizationError { return &v }

func (p AuthorizationError) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AuthorizationError) UnmarshalText(text []byte) error {
q, err := AuthorizationErrorFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AuthorizationError) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AuthorizationError(v)
return nil
}

func (p * AuthorizationError) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type InvocationError int64
const (
  InvocationError_MISSING_DATA InvocationError = 0
  InvocationError_INVALID_DATA InvocationError = 1
  InvocationError_UNKNOWN_IMAGE InvocationError = 2
  InvocationError_UNKNOWN_USER InvocationError = 3
  InvocationError_UNKNOWN_LECTURE InvocationError = 4
  InvocationError_INVALID_SHARE_MODE InvocationError = 5
  InvocationError_INTERNAL_SERVER_ERROR InvocationError = 6
)

func (p InvocationError) String() string {
  switch p {
  case InvocationError_MISSING_DATA: return "MISSING_DATA"
  case InvocationError_INVALID_DATA: return "INVALID_DATA"
  case InvocationError_UNKNOWN_IMAGE: return "UNKNOWN_IMAGE"
  case InvocationError_UNKNOWN_USER: return "UNKNOWN_USER"
  case InvocationError_UNKNOWN_LECTURE: return "UNKNOWN_LECTURE"
  case InvocationError_INVALID_SHARE_MODE: return "INVALID_SHARE_MODE"
  case InvocationError_INTERNAL_SERVER_ERROR: return "INTERNAL_SERVER_ERROR"
  }
  return "<UNSET>"
}

func InvocationErrorFromString(s string) (InvocationError, error) {
  switch s {
  case "MISSING_DATA": return InvocationError_MISSING_DATA, nil 
  case "INVALID_DATA": return InvocationError_INVALID_DATA, nil 
  case "UNKNOWN_IMAGE": return InvocationError_UNKNOWN_IMAGE, nil 
  case "UNKNOWN_USER": return InvocationError_UNKNOWN_USER, nil 
  case "UNKNOWN_LECTURE": return InvocationError_UNKNOWN_LECTURE, nil 
  case "INVALID_SHARE_MODE": return InvocationError_INVALID_SHARE_MODE, nil 
  case "INTERNAL_SERVER_ERROR": return InvocationError_INTERNAL_SERVER_ERROR, nil 
  }
  return InvocationError(0), fmt.Errorf("not a valid InvocationError string")
}


func InvocationErrorPtr(v InvocationError) *InvocationError { return &v }

func (p InvocationError) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *InvocationError) UnmarshalText(text []byte) error {
q, err := InvocationErrorFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *InvocationError) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = InvocationError(v)
return nil
}

func (p * InvocationError) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ShareMode int64
const (
  ShareMode_LOCAL ShareMode = 0
  ShareMode_PUBLISH ShareMode = 1
  ShareMode_DOWNLOAD ShareMode = 2
  ShareMode_FROZEN ShareMode = 3
)

func (p ShareMode) String() string {
  switch p {
  case ShareMode_LOCAL: return "LOCAL"
  case ShareMode_PUBLISH: return "PUBLISH"
  case ShareMode_DOWNLOAD: return "DOWNLOAD"
  case ShareMode_FROZEN: return "FROZEN"
  }
  return "<UNSET>"
}

func ShareModeFromString(s string) (ShareMode, error) {
  switch s {
  case "LOCAL": return ShareMode_LOCAL, nil 
  case "PUBLISH": return ShareMode_PUBLISH, nil 
  case "DOWNLOAD": return ShareMode_DOWNLOAD, nil 
  case "FROZEN": return ShareMode_FROZEN, nil 
  }
  return ShareMode(0), fmt.Errorf("not a valid ShareMode string")
}


func ShareModePtr(v ShareMode) *ShareMode { return &v }

func (p ShareMode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ShareMode) UnmarshalText(text []byte) error {
q, err := ShareModeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ShareMode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ShareMode(v)
return nil
}

func (p * ShareMode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type NetDirection int64
const (
  NetDirection_IN NetDirection = 0
  NetDirection_OUT NetDirection = 1
)

func (p NetDirection) String() string {
  switch p {
  case NetDirection_IN: return "IN"
  case NetDirection_OUT: return "OUT"
  }
  return "<UNSET>"
}

func NetDirectionFromString(s string) (NetDirection, error) {
  switch s {
  case "IN": return NetDirection_IN, nil 
  case "OUT": return NetDirection_OUT, nil 
  }
  return NetDirection(0), fmt.Errorf("not a valid NetDirection string")
}


func NetDirectionPtr(v NetDirection) *NetDirection { return &v }

func (p NetDirection) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NetDirection) UnmarshalText(text []byte) error {
q, err := NetDirectionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NetDirection) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NetDirection(v)
return nil
}

func (p * NetDirection) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Role int64
const (
  Role_STUDENT Role = 0
  Role_TUTOR Role = 1
)

func (p Role) String() string {
  switch p {
  case Role_STUDENT: return "STUDENT"
  case Role_TUTOR: return "TUTOR"
  }
  return "<UNSET>"
}

func RoleFromString(s string) (Role, error) {
  switch s {
  case "STUDENT": return Role_STUDENT, nil 
  case "TUTOR": return Role_TUTOR, nil 
  }
  return Role(0), fmt.Errorf("not a valid Role string")
}


func RolePtr(v Role) *Role { return &v }

func (p Role) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Role) UnmarshalText(text []byte) error {
q, err := RoleFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Role) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Role(v)
return nil
}

func (p * Role) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TransferState int64
const (
  TransferState_IDLE TransferState = 0
  TransferState_WORKING TransferState = 1
  TransferState_FINISHED TransferState = 2
  TransferState_ERROR TransferState = 3
)

func (p TransferState) String() string {
  switch p {
  case TransferState_IDLE: return "IDLE"
  case TransferState_WORKING: return "WORKING"
  case TransferState_FINISHED: return "FINISHED"
  case TransferState_ERROR: return "ERROR"
  }
  return "<UNSET>"
}

func TransferStateFromString(s string) (TransferState, error) {
  switch s {
  case "IDLE": return TransferState_IDLE, nil 
  case "WORKING": return TransferState_WORKING, nil 
  case "FINISHED": return TransferState_FINISHED, nil 
  case "ERROR": return TransferState_ERROR, nil 
  }
  return TransferState(0), fmt.Errorf("not a valid TransferState string")
}


func TransferStatePtr(v TransferState) *TransferState { return &v }

func (p TransferState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TransferState) UnmarshalText(text []byte) error {
q, err := TransferStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TransferState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TransferState(v)
return nil
}

func (p * TransferState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DateParamError int64
const (
  DateParamError_TOO_LOW DateParamError = 0
  DateParamError_TOO_HIGH DateParamError = 1
  DateParamError_NEGATIVE_RANGE DateParamError = 2
)

func (p DateParamError) String() string {
  switch p {
  case DateParamError_TOO_LOW: return "TOO_LOW"
  case DateParamError_TOO_HIGH: return "TOO_HIGH"
  case DateParamError_NEGATIVE_RANGE: return "NEGATIVE_RANGE"
  }
  return "<UNSET>"
}

func DateParamErrorFromString(s string) (DateParamError, error) {
  switch s {
  case "TOO_LOW": return DateParamError_TOO_LOW, nil 
  case "TOO_HIGH": return DateParamError_TOO_HIGH, nil 
  case "NEGATIVE_RANGE": return DateParamError_NEGATIVE_RANGE, nil 
  }
  return DateParamError(0), fmt.Errorf("not a valid DateParamError string")
}


func DateParamErrorPtr(v DateParamError) *DateParamError { return &v }

func (p DateParamError) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DateParamError) UnmarshalText(text []byte) error {
q, err := DateParamErrorFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DateParamError) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DateParamError(v)
return nil
}

func (p * DateParamError) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Int int64

func IntPtr(v Int) *Int { return &v }

type Token string

func TokenPtr(v Token) *Token { return &v }

type UUID string

func UUIDPtr(v UUID) *UUID { return &v }

type UnixTimestamp int64

func UnixTimestampPtr(v UnixTimestamp) *UnixTimestamp { return &v }

// Attributes:
//  - UserId
//  - FirstName
//  - LastName
//  - EMail
//  - OrganizationId
//  - Role
type UserInfo struct {
  UserId string `thrift:"userId,1" db:"userId" json:"userId"`
  FirstName string `thrift:"firstName,2" db:"firstName" json:"firstName"`
  LastName string `thrift:"lastName,3" db:"lastName" json:"lastName"`
  EMail string `thrift:"eMail,4" db:"eMail" json:"eMail"`
  OrganizationId string `thrift:"organizationId,5" db:"organizationId" json:"organizationId"`
  Role *Role `thrift:"role,6" db:"role" json:"role,omitempty"`
}

func NewUserInfo() *UserInfo {
  return &UserInfo{}
}


func (p *UserInfo) GetUserId() string {
  return p.UserId
}

func (p *UserInfo) GetFirstName() string {
  return p.FirstName
}

func (p *UserInfo) GetLastName() string {
  return p.LastName
}

func (p *UserInfo) GetEMail() string {
  return p.EMail
}

func (p *UserInfo) GetOrganizationId() string {
  return p.OrganizationId
}
var UserInfo_Role_DEFAULT Role
func (p *UserInfo) GetRole() Role {
  if !p.IsSetRole() {
    return UserInfo_Role_DEFAULT
  }
return *p.Role
}
func (p *UserInfo) IsSetRole() bool {
  return p.Role != nil
}

func (p *UserInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *UserInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstName = v
}
  return nil
}

func (p *UserInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastName = v
}
  return nil
}

func (p *UserInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EMail = v
}
  return nil
}

func (p *UserInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OrganizationId = v
}
  return nil
}

func (p *UserInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Role(v)
  p.Role = &temp
}
  return nil
}

func (p *UserInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *UserInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("firstName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:firstName: ", p), err) }
  if err := oprot.WriteString(string(p.FirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.firstName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:firstName: ", p), err) }
  return err
}

func (p *UserInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastName: ", p), err) }
  if err := oprot.WriteString(string(p.LastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastName: ", p), err) }
  return err
}

func (p *UserInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eMail", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:eMail: ", p), err) }
  if err := oprot.WriteString(string(p.EMail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eMail (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:eMail: ", p), err) }
  return err
}

func (p *UserInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("organizationId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:organizationId: ", p), err) }
  if err := oprot.WriteString(string(p.OrganizationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.organizationId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:organizationId: ", p), err) }
  return err
}

func (p *UserInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetRole() {
    if err := oprot.WriteFieldBegin("role", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:role: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Role)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.role (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:role: ", p), err) }
  }
  return err
}

func (p *UserInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserInfo(%+v)", *p)
}

// Attributes:
//  - User
//  - IsSuperUser
//  - CanListImages
type WhoamiInfo struct {
  User *UserInfo `thrift:"user,1" db:"user" json:"user"`
  IsSuperUser bool `thrift:"isSuperUser,2" db:"isSuperUser" json:"isSuperUser"`
  CanListImages bool `thrift:"canListImages,3" db:"canListImages" json:"canListImages"`
}

func NewWhoamiInfo() *WhoamiInfo {
  return &WhoamiInfo{}
}

var WhoamiInfo_User_DEFAULT *UserInfo
func (p *WhoamiInfo) GetUser() *UserInfo {
  if !p.IsSetUser() {
    return WhoamiInfo_User_DEFAULT
  }
return p.User
}

func (p *WhoamiInfo) GetIsSuperUser() bool {
  return p.IsSuperUser
}

func (p *WhoamiInfo) GetCanListImages() bool {
  return p.CanListImages
}
func (p *WhoamiInfo) IsSetUser() bool {
  return p.User != nil
}

func (p *WhoamiInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WhoamiInfo)  ReadField1(iprot thrift.TProtocol) error {
  p.User = &UserInfo{}
  if err := p.User.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *WhoamiInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsSuperUser = v
}
  return nil
}

func (p *WhoamiInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CanListImages = v
}
  return nil
}

func (p *WhoamiInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WhoamiInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WhoamiInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *WhoamiInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isSuperUser", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isSuperUser: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsSuperUser)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isSuperUser (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isSuperUser: ", p), err) }
  return err
}

func (p *WhoamiInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("canListImages", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:canListImages: ", p), err) }
  if err := oprot.WriteBool(bool(p.CanListImages)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.canListImages (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:canListImages: ", p), err) }
  return err
}

func (p *WhoamiInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WhoamiInfo(%+v)", *p)
}

// Attributes:
//  - OrganizationId
//  - DisplayName
//  - EcpUrl
//  - SuffixList
type Organization struct {
  OrganizationId string `thrift:"organizationId,1" db:"organizationId" json:"organizationId"`
  DisplayName string `thrift:"displayName,2" db:"displayName" json:"displayName"`
  EcpUrl string `thrift:"ecpUrl,3" db:"ecpUrl" json:"ecpUrl"`
  SuffixList []string `thrift:"suffixList,4" db:"suffixList" json:"suffixList"`
}

func NewOrganization() *Organization {
  return &Organization{}
}


func (p *Organization) GetOrganizationId() string {
  return p.OrganizationId
}

func (p *Organization) GetDisplayName() string {
  return p.DisplayName
}

func (p *Organization) GetEcpUrl() string {
  return p.EcpUrl
}

func (p *Organization) GetSuffixList() []string {
  return p.SuffixList
}
func (p *Organization) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Organization)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OrganizationId = v
}
  return nil
}

func (p *Organization)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *Organization)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EcpUrl = v
}
  return nil
}

func (p *Organization)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.SuffixList =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.SuffixList = append(p.SuffixList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Organization) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Organization"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Organization) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("organizationId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:organizationId: ", p), err) }
  if err := oprot.WriteString(string(p.OrganizationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.organizationId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:organizationId: ", p), err) }
  return err
}

func (p *Organization) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  return err
}

func (p *Organization) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ecpUrl", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ecpUrl: ", p), err) }
  if err := oprot.WriteString(string(p.EcpUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ecpUrl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ecpUrl: ", p), err) }
  return err
}

func (p *Organization) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("suffixList", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:suffixList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.SuffixList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SuffixList {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:suffixList: ", p), err) }
  return err
}

func (p *Organization) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Organization(%+v)", *p)
}

// Attributes:
//  - AddressList
//  - DisplayName
//  - CertSha256
type Satellite struct {
  AddressList []string `thrift:"addressList,1" db:"addressList" json:"addressList"`
  DisplayName string `thrift:"displayName,2" db:"displayName" json:"displayName"`
  CertSha256 []byte `thrift:"certSha256,3" db:"certSha256" json:"certSha256"`
}

func NewSatellite() *Satellite {
  return &Satellite{}
}


func (p *Satellite) GetAddressList() []string {
  return p.AddressList
}

func (p *Satellite) GetDisplayName() string {
  return p.DisplayName
}

func (p *Satellite) GetCertSha256() []byte {
  return p.CertSha256
}
func (p *Satellite) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Satellite)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.AddressList =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.AddressList = append(p.AddressList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Satellite)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *Satellite)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CertSha256 = v
}
  return nil
}

func (p *Satellite) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Satellite"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Satellite) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addressList", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addressList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.AddressList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AddressList {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addressList: ", p), err) }
  return err
}

func (p *Satellite) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  return err
}

func (p *Satellite) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("certSha256", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:certSha256: ", p), err) }
  if err := oprot.WriteBinary(p.CertSha256); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certSha256 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:certSha256: ", p), err) }
  return err
}

func (p *Satellite) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Satellite(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - AuthToken
//  - ServerAddress
type SessionData struct {
  SessionId Token `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  AuthToken Token `thrift:"authToken,2" db:"authToken" json:"authToken"`
  ServerAddress string `thrift:"serverAddress,3" db:"serverAddress" json:"serverAddress"`
}

func NewSessionData() *SessionData {
  return &SessionData{}
}


func (p *SessionData) GetSessionId() Token {
  return p.SessionId
}

func (p *SessionData) GetAuthToken() Token {
  return p.AuthToken
}

func (p *SessionData) GetServerAddress() string {
  return p.ServerAddress
}
func (p *SessionData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SessionData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.SessionId = temp
}
  return nil
}

func (p *SessionData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Token(v)
  p.AuthToken = temp
}
  return nil
}

func (p *SessionData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ServerAddress = v
}
  return nil
}

func (p *SessionData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SessionData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SessionData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *SessionData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authToken: ", p), err) }
  if err := oprot.WriteString(string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authToken: ", p), err) }
  return err
}

func (p *SessionData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serverAddress", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverAddress: ", p), err) }
  if err := oprot.WriteString(string(p.ServerAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serverAddress (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverAddress: ", p), err) }
  return err
}

func (p *SessionData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SessionData(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - AuthToken
//  - Satellites
//  - UserInfo
type ClientSessionData struct {
  SessionId Token `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  AuthToken Token `thrift:"authToken,2" db:"authToken" json:"authToken"`
  Satellites []*Satellite `thrift:"satellites,3" db:"satellites" json:"satellites"`
  UserInfo *UserInfo `thrift:"userInfo,4" db:"userInfo" json:"userInfo"`
}

func NewClientSessionData() *ClientSessionData {
  return &ClientSessionData{}
}


func (p *ClientSessionData) GetSessionId() Token {
  return p.SessionId
}

func (p *ClientSessionData) GetAuthToken() Token {
  return p.AuthToken
}

func (p *ClientSessionData) GetSatellites() []*Satellite {
  return p.Satellites
}
var ClientSessionData_UserInfo_DEFAULT *UserInfo
func (p *ClientSessionData) GetUserInfo() *UserInfo {
  if !p.IsSetUserInfo() {
    return ClientSessionData_UserInfo_DEFAULT
  }
return p.UserInfo
}
func (p *ClientSessionData) IsSetUserInfo() bool {
  return p.UserInfo != nil
}

func (p *ClientSessionData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClientSessionData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.SessionId = temp
}
  return nil
}

func (p *ClientSessionData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Token(v)
  p.AuthToken = temp
}
  return nil
}

func (p *ClientSessionData)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Satellite, 0, size)
  p.Satellites =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &Satellite{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Satellites = append(p.Satellites, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ClientSessionData)  ReadField4(iprot thrift.TProtocol) error {
  p.UserInfo = &UserInfo{}
  if err := p.UserInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
  }
  return nil
}

func (p *ClientSessionData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClientSessionData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClientSessionData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *ClientSessionData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authToken: ", p), err) }
  if err := oprot.WriteString(string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authToken: ", p), err) }
  return err
}

func (p *ClientSessionData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("satellites", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:satellites: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Satellites)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Satellites {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:satellites: ", p), err) }
  return err
}

func (p *ClientSessionData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userInfo", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userInfo: ", p), err) }
  if err := p.UserInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userInfo: ", p), err) }
  return err
}

func (p *ClientSessionData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClientSessionData(%+v)", *p)
}

// Attributes:
//  - SessionId
type ServerSessionData struct {
  SessionId Token `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
}

func NewServerSessionData() *ServerSessionData {
  return &ServerSessionData{}
}


func (p *ServerSessionData) GetSessionId() Token {
  return p.SessionId
}
func (p *ServerSessionData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerSessionData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.SessionId = temp
}
  return nil
}

func (p *ServerSessionData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ServerSessionData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerSessionData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *ServerSessionData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerSessionData(%+v)", *p)
}

// Attributes:
//  - VirtId
//  - VirtName
type Virtualizer struct {
  VirtId string `thrift:"virtId,1" db:"virtId" json:"virtId"`
  VirtName string `thrift:"virtName,2" db:"virtName" json:"virtName"`
}

func NewVirtualizer() *Virtualizer {
  return &Virtualizer{}
}


func (p *Virtualizer) GetVirtId() string {
  return p.VirtId
}

func (p *Virtualizer) GetVirtName() string {
  return p.VirtName
}
func (p *Virtualizer) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Virtualizer)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.VirtId = v
}
  return nil
}

func (p *Virtualizer)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VirtName = v
}
  return nil
}

func (p *Virtualizer) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Virtualizer"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Virtualizer) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("virtId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:virtId: ", p), err) }
  if err := oprot.WriteString(string(p.VirtId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.virtId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:virtId: ", p), err) }
  return err
}

func (p *Virtualizer) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("virtName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:virtName: ", p), err) }
  if err := oprot.WriteString(string(p.VirtName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.virtName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:virtName: ", p), err) }
  return err
}

func (p *Virtualizer) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Virtualizer(%+v)", *p)
}

// Attributes:
//  - OsId
//  - OsName
//  - VirtualizerOsId
//  - Architecture
//  - MaxMemMb
//  - MaxCores
type OperatingSystem struct {
  OsId int32 `thrift:"osId,1" db:"osId" json:"osId"`
  OsName string `thrift:"osName,2" db:"osName" json:"osName"`
  VirtualizerOsId map[string]string `thrift:"virtualizerOsId,3" db:"virtualizerOsId" json:"virtualizerOsId"`
  Architecture string `thrift:"architecture,4" db:"architecture" json:"architecture"`
  MaxMemMb int32 `thrift:"maxMemMb,5" db:"maxMemMb" json:"maxMemMb"`
  MaxCores int32 `thrift:"maxCores,6" db:"maxCores" json:"maxCores"`
}

func NewOperatingSystem() *OperatingSystem {
  return &OperatingSystem{}
}


func (p *OperatingSystem) GetOsId() int32 {
  return p.OsId
}

func (p *OperatingSystem) GetOsName() string {
  return p.OsName
}

func (p *OperatingSystem) GetVirtualizerOsId() map[string]string {
  return p.VirtualizerOsId
}

func (p *OperatingSystem) GetArchitecture() string {
  return p.Architecture
}

func (p *OperatingSystem) GetMaxMemMb() int32 {
  return p.MaxMemMb
}

func (p *OperatingSystem) GetMaxCores() int32 {
  return p.MaxCores
}
func (p *OperatingSystem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OperatingSystem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OsId = v
}
  return nil
}

func (p *OperatingSystem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OsName = v
}
  return nil
}

func (p *OperatingSystem)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.VirtualizerOsId =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.VirtualizerOsId[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *OperatingSystem)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Architecture = v
}
  return nil
}

func (p *OperatingSystem)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxMemMb = v
}
  return nil
}

func (p *OperatingSystem)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxCores = v
}
  return nil
}

func (p *OperatingSystem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OperatingSystem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OperatingSystem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("osId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:osId: ", p), err) }
  if err := oprot.WriteI32(int32(p.OsId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.osId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:osId: ", p), err) }
  return err
}

func (p *OperatingSystem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("osName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:osName: ", p), err) }
  if err := oprot.WriteString(string(p.OsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.osName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:osName: ", p), err) }
  return err
}

func (p *OperatingSystem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("virtualizerOsId", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:virtualizerOsId: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.VirtualizerOsId)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.VirtualizerOsId {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:virtualizerOsId: ", p), err) }
  return err
}

func (p *OperatingSystem) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("architecture", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:architecture: ", p), err) }
  if err := oprot.WriteString(string(p.Architecture)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.architecture (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:architecture: ", p), err) }
  return err
}

func (p *OperatingSystem) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxMemMb", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxMemMb: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxMemMb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxMemMb (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxMemMb: ", p), err) }
  return err
}

func (p *OperatingSystem) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxCores", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:maxCores: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxCores)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxCores (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:maxCores: ", p), err) }
  return err
}

func (p *OperatingSystem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OperatingSystem(%+v)", *p)
}

// Attributes:
//  - Link
//  - Download
//  - Edit
//  - Admin
type ImagePermissions struct {
  Link bool `thrift:"link,1" db:"link" json:"link"`
  Download bool `thrift:"download,2" db:"download" json:"download"`
  Edit bool `thrift:"edit,3" db:"edit" json:"edit"`
  Admin bool `thrift:"admin,4" db:"admin" json:"admin"`
}

func NewImagePermissions() *ImagePermissions {
  return &ImagePermissions{}
}


func (p *ImagePermissions) GetLink() bool {
  return p.Link
}

func (p *ImagePermissions) GetDownload() bool {
  return p.Download
}

func (p *ImagePermissions) GetEdit() bool {
  return p.Edit
}

func (p *ImagePermissions) GetAdmin() bool {
  return p.Admin
}
func (p *ImagePermissions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImagePermissions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Link = v
}
  return nil
}

func (p *ImagePermissions)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Download = v
}
  return nil
}

func (p *ImagePermissions)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Edit = v
}
  return nil
}

func (p *ImagePermissions)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Admin = v
}
  return nil
}

func (p *ImagePermissions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImagePermissions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImagePermissions) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("link", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:link: ", p), err) }
  if err := oprot.WriteBool(bool(p.Link)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.link (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:link: ", p), err) }
  return err
}

func (p *ImagePermissions) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("download", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:download: ", p), err) }
  if err := oprot.WriteBool(bool(p.Download)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.download (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:download: ", p), err) }
  return err
}

func (p *ImagePermissions) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("edit", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edit: ", p), err) }
  if err := oprot.WriteBool(bool(p.Edit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edit: ", p), err) }
  return err
}

func (p *ImagePermissions) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("admin", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:admin: ", p), err) }
  if err := oprot.WriteBool(bool(p.Admin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.admin (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:admin: ", p), err) }
  return err
}

func (p *ImagePermissions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImagePermissions(%+v)", *p)
}

// Attributes:
//  - Edit
//  - Admin
type LecturePermissions struct {
  Edit bool `thrift:"edit,1" db:"edit" json:"edit"`
  Admin bool `thrift:"admin,2" db:"admin" json:"admin"`
}

func NewLecturePermissions() *LecturePermissions {
  return &LecturePermissions{}
}


func (p *LecturePermissions) GetEdit() bool {
  return p.Edit
}

func (p *LecturePermissions) GetAdmin() bool {
  return p.Admin
}
func (p *LecturePermissions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LecturePermissions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Edit = v
}
  return nil
}

func (p *LecturePermissions)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Admin = v
}
  return nil
}

func (p *LecturePermissions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LecturePermissions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LecturePermissions) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("edit", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:edit: ", p), err) }
  if err := oprot.WriteBool(bool(p.Edit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edit (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:edit: ", p), err) }
  return err
}

func (p *LecturePermissions) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("admin", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:admin: ", p), err) }
  if err := oprot.WriteBool(bool(p.Admin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.admin (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:admin: ", p), err) }
  return err
}

func (p *LecturePermissions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LecturePermissions(%+v)", *p)
}

// Attributes:
//  - ImageName
//  - Description
//  - OsId
//  - VirtId
//  - IsTemplate
//  - DefaultPermissions
//  - ShareMode
//  - AddTags
//  - RemTags
type ImageBaseWrite struct {
  ImageName string `thrift:"imageName,1" db:"imageName" json:"imageName"`
  Description string `thrift:"description,2" db:"description" json:"description"`
  OsId int32 `thrift:"osId,3" db:"osId" json:"osId"`
  VirtId string `thrift:"virtId,4" db:"virtId" json:"virtId"`
  IsTemplate bool `thrift:"isTemplate,5" db:"isTemplate" json:"isTemplate"`
  DefaultPermissions *ImagePermissions `thrift:"defaultPermissions,6" db:"defaultPermissions" json:"defaultPermissions"`
  ShareMode ShareMode `thrift:"shareMode,7" db:"shareMode" json:"shareMode"`
  AddTags []string `thrift:"addTags,8" db:"addTags" json:"addTags,omitempty"`
  RemTags []string `thrift:"remTags,9" db:"remTags" json:"remTags,omitempty"`
}

func NewImageBaseWrite() *ImageBaseWrite {
  return &ImageBaseWrite{}
}


func (p *ImageBaseWrite) GetImageName() string {
  return p.ImageName
}

func (p *ImageBaseWrite) GetDescription() string {
  return p.Description
}

func (p *ImageBaseWrite) GetOsId() int32 {
  return p.OsId
}

func (p *ImageBaseWrite) GetVirtId() string {
  return p.VirtId
}

func (p *ImageBaseWrite) GetIsTemplate() bool {
  return p.IsTemplate
}
var ImageBaseWrite_DefaultPermissions_DEFAULT *ImagePermissions
func (p *ImageBaseWrite) GetDefaultPermissions() *ImagePermissions {
  if !p.IsSetDefaultPermissions() {
    return ImageBaseWrite_DefaultPermissions_DEFAULT
  }
return p.DefaultPermissions
}

func (p *ImageBaseWrite) GetShareMode() ShareMode {
  return p.ShareMode
}
var ImageBaseWrite_AddTags_DEFAULT []string

func (p *ImageBaseWrite) GetAddTags() []string {
  return p.AddTags
}
var ImageBaseWrite_RemTags_DEFAULT []string

func (p *ImageBaseWrite) GetRemTags() []string {
  return p.RemTags
}
func (p *ImageBaseWrite) IsSetDefaultPermissions() bool {
  return p.DefaultPermissions != nil
}

func (p *ImageBaseWrite) IsSetAddTags() bool {
  return p.AddTags != nil
}

func (p *ImageBaseWrite) IsSetRemTags() bool {
  return p.RemTags != nil
}

func (p *ImageBaseWrite) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageBaseWrite)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ImageName = v
}
  return nil
}

func (p *ImageBaseWrite)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *ImageBaseWrite)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OsId = v
}
  return nil
}

func (p *ImageBaseWrite)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VirtId = v
}
  return nil
}

func (p *ImageBaseWrite)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsTemplate = v
}
  return nil
}

func (p *ImageBaseWrite)  ReadField6(iprot thrift.TProtocol) error {
  p.DefaultPermissions = &ImagePermissions{}
  if err := p.DefaultPermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DefaultPermissions), err)
  }
  return nil
}

func (p *ImageBaseWrite)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := ShareMode(v)
  p.ShareMode = temp
}
  return nil
}

func (p *ImageBaseWrite)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.AddTags =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.AddTags = append(p.AddTags, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImageBaseWrite)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.RemTags =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.RemTags = append(p.RemTags, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImageBaseWrite) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageBaseWrite"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageBaseWrite) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:imageName: ", p), err) }
  if err := oprot.WriteString(string(p.ImageName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:imageName: ", p), err) }
  return err
}

func (p *ImageBaseWrite) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:description: ", p), err) }
  return err
}

func (p *ImageBaseWrite) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("osId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:osId: ", p), err) }
  if err := oprot.WriteI32(int32(p.OsId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.osId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:osId: ", p), err) }
  return err
}

func (p *ImageBaseWrite) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("virtId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:virtId: ", p), err) }
  if err := oprot.WriteString(string(p.VirtId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.virtId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:virtId: ", p), err) }
  return err
}

func (p *ImageBaseWrite) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isTemplate", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isTemplate: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsTemplate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isTemplate (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isTemplate: ", p), err) }
  return err
}

func (p *ImageBaseWrite) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("defaultPermissions", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:defaultPermissions: ", p), err) }
  if err := p.DefaultPermissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DefaultPermissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:defaultPermissions: ", p), err) }
  return err
}

func (p *ImageBaseWrite) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shareMode", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:shareMode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ShareMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shareMode (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:shareMode: ", p), err) }
  return err
}

func (p *ImageBaseWrite) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddTags() {
    if err := oprot.WriteFieldBegin("addTags", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:addTags: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.AddTags)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.AddTags {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:addTags: ", p), err) }
  }
  return err
}

func (p *ImageBaseWrite) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetRemTags() {
    if err := oprot.WriteFieldBegin("remTags", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:remTags: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.RemTags)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.RemTags {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:remTags: ", p), err) }
  }
  return err
}

func (p *ImageBaseWrite) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageBaseWrite(%+v)", *p)
}

// Attributes:
//  - IsRestricted
type ImageVersionWrite struct {
  // unused field # 1
  IsRestricted bool `thrift:"isRestricted,2" db:"isRestricted" json:"isRestricted"`
}

func NewImageVersionWrite() *ImageVersionWrite {
  return &ImageVersionWrite{}
}


func (p *ImageVersionWrite) GetIsRestricted() bool {
  return p.IsRestricted
}
func (p *ImageVersionWrite) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageVersionWrite)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsRestricted = v
}
  return nil
}

func (p *ImageVersionWrite) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageVersionWrite"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageVersionWrite) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isRestricted", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isRestricted: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsRestricted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isRestricted (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isRestricted: ", p), err) }
  return err
}

func (p *ImageVersionWrite) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageVersionWrite(%+v)", *p)
}

// Attributes:
//  - ImageBaseId
//  - LatestVersionId
//  - ImageName
//  - OsId
//  - VirtId
//  - CreateTime
//  - UpdateTime
//  - UploadTime
//  - ExpireTime
//  - OwnerId
//  - UploaderId
//  - ShareMode
//  - FileSize
//  - IsRestricted
//  - IsValid
//  - IsProcessed
//  - IsTemplate
//  - DefaultPermissions
//  - UserPermissions
type ImageSummaryRead struct {
  ImageBaseId UUID `thrift:"imageBaseId,1" db:"imageBaseId" json:"imageBaseId"`
  // unused field # 2
  LatestVersionId UUID `thrift:"latestVersionId,3" db:"latestVersionId" json:"latestVersionId"`
  ImageName string `thrift:"imageName,4" db:"imageName" json:"imageName"`
  OsId int32 `thrift:"osId,5" db:"osId" json:"osId"`
  VirtId string `thrift:"virtId,6" db:"virtId" json:"virtId"`
  CreateTime UnixTimestamp `thrift:"createTime,7" db:"createTime" json:"createTime"`
  UpdateTime UnixTimestamp `thrift:"updateTime,8" db:"updateTime" json:"updateTime"`
  ExpireTime UnixTimestamp `thrift:"expireTime,9" db:"expireTime" json:"expireTime"`
  OwnerId UUID `thrift:"ownerId,10" db:"ownerId" json:"ownerId"`
  UploaderId UUID `thrift:"uploaderId,11" db:"uploaderId" json:"uploaderId"`
  ShareMode ShareMode `thrift:"shareMode,12" db:"shareMode" json:"shareMode"`
  FileSize int64 `thrift:"fileSize,13" db:"fileSize" json:"fileSize"`
  IsRestricted bool `thrift:"isRestricted,14" db:"isRestricted" json:"isRestricted"`
  IsValid bool `thrift:"isValid,15" db:"isValid" json:"isValid"`
  IsProcessed bool `thrift:"isProcessed,16" db:"isProcessed" json:"isProcessed"`
  IsTemplate bool `thrift:"isTemplate,17" db:"isTemplate" json:"isTemplate"`
  DefaultPermissions *ImagePermissions `thrift:"defaultPermissions,18" db:"defaultPermissions" json:"defaultPermissions"`
  UserPermissions *ImagePermissions `thrift:"userPermissions,19" db:"userPermissions" json:"userPermissions,omitempty"`
  UploadTime UnixTimestamp `thrift:"uploadTime,20" db:"uploadTime" json:"uploadTime"`
}

func NewImageSummaryRead() *ImageSummaryRead {
  return &ImageSummaryRead{}
}


func (p *ImageSummaryRead) GetImageBaseId() UUID {
  return p.ImageBaseId
}

func (p *ImageSummaryRead) GetLatestVersionId() UUID {
  return p.LatestVersionId
}

func (p *ImageSummaryRead) GetImageName() string {
  return p.ImageName
}

func (p *ImageSummaryRead) GetOsId() int32 {
  return p.OsId
}

func (p *ImageSummaryRead) GetVirtId() string {
  return p.VirtId
}

func (p *ImageSummaryRead) GetCreateTime() UnixTimestamp {
  return p.CreateTime
}

func (p *ImageSummaryRead) GetUpdateTime() UnixTimestamp {
  return p.UpdateTime
}

func (p *ImageSummaryRead) GetUploadTime() UnixTimestamp {
  return p.UploadTime
}

func (p *ImageSummaryRead) GetExpireTime() UnixTimestamp {
  return p.ExpireTime
}

func (p *ImageSummaryRead) GetOwnerId() UUID {
  return p.OwnerId
}

func (p *ImageSummaryRead) GetUploaderId() UUID {
  return p.UploaderId
}

func (p *ImageSummaryRead) GetShareMode() ShareMode {
  return p.ShareMode
}

func (p *ImageSummaryRead) GetFileSize() int64 {
  return p.FileSize
}

func (p *ImageSummaryRead) GetIsRestricted() bool {
  return p.IsRestricted
}

func (p *ImageSummaryRead) GetIsValid() bool {
  return p.IsValid
}

func (p *ImageSummaryRead) GetIsProcessed() bool {
  return p.IsProcessed
}

func (p *ImageSummaryRead) GetIsTemplate() bool {
  return p.IsTemplate
}
var ImageSummaryRead_DefaultPermissions_DEFAULT *ImagePermissions
func (p *ImageSummaryRead) GetDefaultPermissions() *ImagePermissions {
  if !p.IsSetDefaultPermissions() {
    return ImageSummaryRead_DefaultPermissions_DEFAULT
  }
return p.DefaultPermissions
}
var ImageSummaryRead_UserPermissions_DEFAULT *ImagePermissions
func (p *ImageSummaryRead) GetUserPermissions() *ImagePermissions {
  if !p.IsSetUserPermissions() {
    return ImageSummaryRead_UserPermissions_DEFAULT
  }
return p.UserPermissions
}
func (p *ImageSummaryRead) IsSetDefaultPermissions() bool {
  return p.DefaultPermissions != nil
}

func (p *ImageSummaryRead) IsSetUserPermissions() bool {
  return p.UserPermissions != nil
}

func (p *ImageSummaryRead) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageSummaryRead)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *ImageSummaryRead)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UUID(v)
  p.LatestVersionId = temp
}
  return nil
}

func (p *ImageSummaryRead)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ImageName = v
}
  return nil
}

func (p *ImageSummaryRead)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OsId = v
}
  return nil
}

func (p *ImageSummaryRead)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.VirtId = v
}
  return nil
}

func (p *ImageSummaryRead)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := UnixTimestamp(v)
  p.CreateTime = temp
}
  return nil
}

func (p *ImageSummaryRead)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := UnixTimestamp(v)
  p.UpdateTime = temp
}
  return nil
}

func (p *ImageSummaryRead)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := UnixTimestamp(v)
  p.UploadTime = temp
}
  return nil
}

func (p *ImageSummaryRead)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := UnixTimestamp(v)
  p.ExpireTime = temp
}
  return nil
}

func (p *ImageSummaryRead)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := UUID(v)
  p.OwnerId = temp
}
  return nil
}

func (p *ImageSummaryRead)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := UUID(v)
  p.UploaderId = temp
}
  return nil
}

func (p *ImageSummaryRead)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := ShareMode(v)
  p.ShareMode = temp
}
  return nil
}

func (p *ImageSummaryRead)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.FileSize = v
}
  return nil
}

func (p *ImageSummaryRead)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.IsRestricted = v
}
  return nil
}

func (p *ImageSummaryRead)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.IsValid = v
}
  return nil
}

func (p *ImageSummaryRead)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.IsProcessed = v
}
  return nil
}

func (p *ImageSummaryRead)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.IsTemplate = v
}
  return nil
}

func (p *ImageSummaryRead)  ReadField18(iprot thrift.TProtocol) error {
  p.DefaultPermissions = &ImagePermissions{}
  if err := p.DefaultPermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DefaultPermissions), err)
  }
  return nil
}

func (p *ImageSummaryRead)  ReadField19(iprot thrift.TProtocol) error {
  p.UserPermissions = &ImagePermissions{}
  if err := p.UserPermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserPermissions), err)
  }
  return nil
}

func (p *ImageSummaryRead) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageSummaryRead"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageSummaryRead) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:imageBaseId: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("latestVersionId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latestVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.LatestVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latestVersionId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latestVersionId: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:imageName: ", p), err) }
  if err := oprot.WriteString(string(p.ImageName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:imageName: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("osId", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:osId: ", p), err) }
  if err := oprot.WriteI32(int32(p.OsId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.osId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:osId: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("virtId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:virtId: ", p), err) }
  if err := oprot.WriteString(string(p.VirtId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.virtId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:virtId: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:createTime: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:updateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updateTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:updateTime: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expireTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:expireTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExpireTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expireTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:expireTime: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ownerId", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:ownerId: ", p), err) }
  if err := oprot.WriteString(string(p.OwnerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ownerId (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:ownerId: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uploaderId", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:uploaderId: ", p), err) }
  if err := oprot.WriteString(string(p.UploaderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uploaderId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:uploaderId: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shareMode", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:shareMode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ShareMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shareMode (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:shareMode: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fileSize", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:fileSize: ", p), err) }
  if err := oprot.WriteI64(int64(p.FileSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fileSize (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:fileSize: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isRestricted", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:isRestricted: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsRestricted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isRestricted (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:isRestricted: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isValid", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:isValid: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsValid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isValid (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:isValid: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isProcessed", thrift.BOOL, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:isProcessed: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsProcessed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isProcessed (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:isProcessed: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isTemplate", thrift.BOOL, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:isTemplate: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsTemplate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isTemplate (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:isTemplate: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("defaultPermissions", thrift.STRUCT, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:defaultPermissions: ", p), err) }
  if err := p.DefaultPermissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DefaultPermissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:defaultPermissions: ", p), err) }
  return err
}

func (p *ImageSummaryRead) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserPermissions() {
    if err := oprot.WriteFieldBegin("userPermissions", thrift.STRUCT, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:userPermissions: ", p), err) }
    if err := p.UserPermissions.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserPermissions), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:userPermissions: ", p), err) }
  }
  return err
}

func (p *ImageSummaryRead) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uploadTime", thrift.I64, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:uploadTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UploadTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uploadTime (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:uploadTime: ", p), err) }
  return err
}

func (p *ImageSummaryRead) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageSummaryRead(%+v)", *p)
}

// Attributes:
//  - VersionId
//  - CreateTime
//  - ExpireTime
//  - FileSize
//  - UploaderId
//  - IsRestricted
//  - IsValid
//  - IsProcessed
//  - Software
type ImageVersionDetails struct {
  VersionId UUID `thrift:"versionId,1" db:"versionId" json:"versionId"`
  CreateTime UnixTimestamp `thrift:"createTime,2" db:"createTime" json:"createTime"`
  ExpireTime UnixTimestamp `thrift:"expireTime,3" db:"expireTime" json:"expireTime"`
  FileSize int64 `thrift:"fileSize,4" db:"fileSize" json:"fileSize"`
  UploaderId UUID `thrift:"uploaderId,5" db:"uploaderId" json:"uploaderId"`
  // unused field # 6
  IsRestricted bool `thrift:"isRestricted,7" db:"isRestricted" json:"isRestricted"`
  IsValid bool `thrift:"isValid,8" db:"isValid" json:"isValid"`
  IsProcessed bool `thrift:"isProcessed,9" db:"isProcessed" json:"isProcessed"`
  Software []string `thrift:"software,10" db:"software" json:"software"`
}

func NewImageVersionDetails() *ImageVersionDetails {
  return &ImageVersionDetails{}
}


func (p *ImageVersionDetails) GetVersionId() UUID {
  return p.VersionId
}

func (p *ImageVersionDetails) GetCreateTime() UnixTimestamp {
  return p.CreateTime
}

func (p *ImageVersionDetails) GetExpireTime() UnixTimestamp {
  return p.ExpireTime
}

func (p *ImageVersionDetails) GetFileSize() int64 {
  return p.FileSize
}

func (p *ImageVersionDetails) GetUploaderId() UUID {
  return p.UploaderId
}

func (p *ImageVersionDetails) GetIsRestricted() bool {
  return p.IsRestricted
}

func (p *ImageVersionDetails) GetIsValid() bool {
  return p.IsValid
}

func (p *ImageVersionDetails) GetIsProcessed() bool {
  return p.IsProcessed
}

func (p *ImageVersionDetails) GetSoftware() []string {
  return p.Software
}
func (p *ImageVersionDetails) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageVersionDetails)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UUID(v)
  p.VersionId = temp
}
  return nil
}

func (p *ImageVersionDetails)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UnixTimestamp(v)
  p.CreateTime = temp
}
  return nil
}

func (p *ImageVersionDetails)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UnixTimestamp(v)
  p.ExpireTime = temp
}
  return nil
}

func (p *ImageVersionDetails)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FileSize = v
}
  return nil
}

func (p *ImageVersionDetails)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := UUID(v)
  p.UploaderId = temp
}
  return nil
}

func (p *ImageVersionDetails)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IsRestricted = v
}
  return nil
}

func (p *ImageVersionDetails)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IsValid = v
}
  return nil
}

func (p *ImageVersionDetails)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.IsProcessed = v
}
  return nil
}

func (p *ImageVersionDetails)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Software =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.Software = append(p.Software, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImageVersionDetails) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageVersionDetails"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageVersionDetails) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("versionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:versionId: ", p), err) }
  if err := oprot.WriteString(string(p.VersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.versionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:versionId: ", p), err) }
  return err
}

func (p *ImageVersionDetails) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createTime: ", p), err) }
  return err
}

func (p *ImageVersionDetails) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expireTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expireTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExpireTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expireTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expireTime: ", p), err) }
  return err
}

func (p *ImageVersionDetails) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fileSize", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fileSize: ", p), err) }
  if err := oprot.WriteI64(int64(p.FileSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fileSize (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fileSize: ", p), err) }
  return err
}

func (p *ImageVersionDetails) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uploaderId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:uploaderId: ", p), err) }
  if err := oprot.WriteString(string(p.UploaderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uploaderId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:uploaderId: ", p), err) }
  return err
}

func (p *ImageVersionDetails) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isRestricted", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:isRestricted: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsRestricted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isRestricted (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:isRestricted: ", p), err) }
  return err
}

func (p *ImageVersionDetails) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isValid", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:isValid: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsValid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isValid (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:isValid: ", p), err) }
  return err
}

func (p *ImageVersionDetails) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isProcessed", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:isProcessed: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsProcessed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isProcessed (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:isProcessed: ", p), err) }
  return err
}

func (p *ImageVersionDetails) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("software", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:software: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Software)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Software {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:software: ", p), err) }
  return err
}

func (p *ImageVersionDetails) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageVersionDetails(%+v)", *p)
}

// Attributes:
//  - ImageBaseId
//  - LatestVersionId
//  - Versions
//  - ImageName
//  - Description
//  - Tags
//  - OsId
//  - VirtId
//  - CreateTime
//  - UpdateTime
//  - OwnerId
//  - UpdaterId
//  - ShareMode
//  - IsTemplate
//  - DefaultPermissions
//  - UserPermissions
type ImageDetailsRead struct {
  ImageBaseId UUID `thrift:"imageBaseId,1" db:"imageBaseId" json:"imageBaseId"`
  // unused field # 2
  Versions []*ImageVersionDetails `thrift:"versions,3" db:"versions" json:"versions"`
  ImageName string `thrift:"imageName,4" db:"imageName" json:"imageName"`
  Description string `thrift:"description,5" db:"description" json:"description"`
  Tags []string `thrift:"tags,6" db:"tags" json:"tags"`
  // unused field # 7
  OsId int32 `thrift:"osId,8" db:"osId" json:"osId"`
  VirtId string `thrift:"virtId,9" db:"virtId" json:"virtId"`
  CreateTime UnixTimestamp `thrift:"createTime,10" db:"createTime" json:"createTime"`
  UpdateTime UnixTimestamp `thrift:"updateTime,11" db:"updateTime" json:"updateTime"`
  OwnerId UUID `thrift:"ownerId,12" db:"ownerId" json:"ownerId"`
  UpdaterId UUID `thrift:"updaterId,13" db:"updaterId" json:"updaterId"`
  ShareMode ShareMode `thrift:"shareMode,14" db:"shareMode" json:"shareMode"`
  IsTemplate bool `thrift:"isTemplate,15" db:"isTemplate" json:"isTemplate"`
  DefaultPermissions *ImagePermissions `thrift:"defaultPermissions,16" db:"defaultPermissions" json:"defaultPermissions"`
  LatestVersionId UUID `thrift:"latestVersionId,17" db:"latestVersionId" json:"latestVersionId"`
  UserPermissions *ImagePermissions `thrift:"userPermissions,18" db:"userPermissions" json:"userPermissions,omitempty"`
}

func NewImageDetailsRead() *ImageDetailsRead {
  return &ImageDetailsRead{}
}


func (p *ImageDetailsRead) GetImageBaseId() UUID {
  return p.ImageBaseId
}

func (p *ImageDetailsRead) GetLatestVersionId() UUID {
  return p.LatestVersionId
}

func (p *ImageDetailsRead) GetVersions() []*ImageVersionDetails {
  return p.Versions
}

func (p *ImageDetailsRead) GetImageName() string {
  return p.ImageName
}

func (p *ImageDetailsRead) GetDescription() string {
  return p.Description
}

func (p *ImageDetailsRead) GetTags() []string {
  return p.Tags
}

func (p *ImageDetailsRead) GetOsId() int32 {
  return p.OsId
}

func (p *ImageDetailsRead) GetVirtId() string {
  return p.VirtId
}

func (p *ImageDetailsRead) GetCreateTime() UnixTimestamp {
  return p.CreateTime
}

func (p *ImageDetailsRead) GetUpdateTime() UnixTimestamp {
  return p.UpdateTime
}

func (p *ImageDetailsRead) GetOwnerId() UUID {
  return p.OwnerId
}

func (p *ImageDetailsRead) GetUpdaterId() UUID {
  return p.UpdaterId
}

func (p *ImageDetailsRead) GetShareMode() ShareMode {
  return p.ShareMode
}

func (p *ImageDetailsRead) GetIsTemplate() bool {
  return p.IsTemplate
}
var ImageDetailsRead_DefaultPermissions_DEFAULT *ImagePermissions
func (p *ImageDetailsRead) GetDefaultPermissions() *ImagePermissions {
  if !p.IsSetDefaultPermissions() {
    return ImageDetailsRead_DefaultPermissions_DEFAULT
  }
return p.DefaultPermissions
}
var ImageDetailsRead_UserPermissions_DEFAULT *ImagePermissions
func (p *ImageDetailsRead) GetUserPermissions() *ImagePermissions {
  if !p.IsSetUserPermissions() {
    return ImageDetailsRead_UserPermissions_DEFAULT
  }
return p.UserPermissions
}
func (p *ImageDetailsRead) IsSetDefaultPermissions() bool {
  return p.DefaultPermissions != nil
}

func (p *ImageDetailsRead) IsSetUserPermissions() bool {
  return p.UserPermissions != nil
}

func (p *ImageDetailsRead) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageDetailsRead)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *ImageDetailsRead)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  temp := UUID(v)
  p.LatestVersionId = temp
}
  return nil
}

func (p *ImageDetailsRead)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ImageVersionDetails, 0, size)
  p.Versions =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &ImageVersionDetails{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.Versions = append(p.Versions, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImageDetailsRead)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ImageName = v
}
  return nil
}

func (p *ImageDetailsRead)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *ImageDetailsRead)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.Tags = append(p.Tags, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImageDetailsRead)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.OsId = v
}
  return nil
}

func (p *ImageDetailsRead)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VirtId = v
}
  return nil
}

func (p *ImageDetailsRead)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := UnixTimestamp(v)
  p.CreateTime = temp
}
  return nil
}

func (p *ImageDetailsRead)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := UnixTimestamp(v)
  p.UpdateTime = temp
}
  return nil
}

func (p *ImageDetailsRead)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := UUID(v)
  p.OwnerId = temp
}
  return nil
}

func (p *ImageDetailsRead)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  temp := UUID(v)
  p.UpdaterId = temp
}
  return nil
}

func (p *ImageDetailsRead)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  temp := ShareMode(v)
  p.ShareMode = temp
}
  return nil
}

func (p *ImageDetailsRead)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.IsTemplate = v
}
  return nil
}

func (p *ImageDetailsRead)  ReadField16(iprot thrift.TProtocol) error {
  p.DefaultPermissions = &ImagePermissions{}
  if err := p.DefaultPermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DefaultPermissions), err)
  }
  return nil
}

func (p *ImageDetailsRead)  ReadField18(iprot thrift.TProtocol) error {
  p.UserPermissions = &ImagePermissions{}
  if err := p.UserPermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserPermissions), err)
  }
  return nil
}

func (p *ImageDetailsRead) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageDetailsRead"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageDetailsRead) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:imageBaseId: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("versions", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:versions: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Versions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Versions {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:versions: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:imageName: ", p), err) }
  if err := oprot.WriteString(string(p.ImageName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:imageName: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:description: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tags", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tags: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tags: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("osId", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:osId: ", p), err) }
  if err := oprot.WriteI32(int32(p.OsId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.osId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:osId: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("virtId", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:virtId: ", p), err) }
  if err := oprot.WriteString(string(p.VirtId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.virtId (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:virtId: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:createTime: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updateTime (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updateTime: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ownerId", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:ownerId: ", p), err) }
  if err := oprot.WriteString(string(p.OwnerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ownerId (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:ownerId: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updaterId", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:updaterId: ", p), err) }
  if err := oprot.WriteString(string(p.UpdaterId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updaterId (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:updaterId: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shareMode", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:shareMode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ShareMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shareMode (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:shareMode: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isTemplate", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:isTemplate: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsTemplate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isTemplate (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:isTemplate: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("defaultPermissions", thrift.STRUCT, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:defaultPermissions: ", p), err) }
  if err := p.DefaultPermissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DefaultPermissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:defaultPermissions: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("latestVersionId", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:latestVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.LatestVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latestVersionId (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:latestVersionId: ", p), err) }
  return err
}

func (p *ImageDetailsRead) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserPermissions() {
    if err := oprot.WriteFieldBegin("userPermissions", thrift.STRUCT, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:userPermissions: ", p), err) }
    if err := p.UserPermissions.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserPermissions), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:userPermissions: ", p), err) }
  }
  return err
}

func (p *ImageDetailsRead) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageDetailsRead(%+v)", *p)
}

// Attributes:
//  - ImageBaseId
//  - ImageVersionId
//  - ImageName
//  - Description
//  - CreateTime
//  - Uploader
//  - FileSize
//  - Software
//  - Tags
//  - OsId
//  - VirtId
//  - IsTemplate
//  - Owner
//  - MachineDescription
type ImagePublishData struct {
  ImageBaseId UUID `thrift:"imageBaseId,1" db:"imageBaseId" json:"imageBaseId"`
  ImageVersionId UUID `thrift:"imageVersionId,2" db:"imageVersionId" json:"imageVersionId"`
  ImageName string `thrift:"imageName,3" db:"imageName" json:"imageName"`
  Description string `thrift:"description,4" db:"description" json:"description"`
  CreateTime UnixTimestamp `thrift:"createTime,5" db:"createTime" json:"createTime"`
  Uploader *UserInfo `thrift:"uploader,6" db:"uploader" json:"uploader"`
  FileSize int64 `thrift:"fileSize,7" db:"fileSize" json:"fileSize"`
  Software []string `thrift:"software,8" db:"software" json:"software"`
  Tags []string `thrift:"tags,9" db:"tags" json:"tags"`
  OsId int32 `thrift:"osId,10" db:"osId" json:"osId"`
  VirtId string `thrift:"virtId,11" db:"virtId" json:"virtId"`
  IsTemplate bool `thrift:"isTemplate,12" db:"isTemplate" json:"isTemplate"`
  Owner *UserInfo `thrift:"owner,13" db:"owner" json:"owner"`
  MachineDescription []byte `thrift:"machineDescription,14" db:"machineDescription" json:"machineDescription"`
}

func NewImagePublishData() *ImagePublishData {
  return &ImagePublishData{}
}


func (p *ImagePublishData) GetImageBaseId() UUID {
  return p.ImageBaseId
}

func (p *ImagePublishData) GetImageVersionId() UUID {
  return p.ImageVersionId
}

func (p *ImagePublishData) GetImageName() string {
  return p.ImageName
}

func (p *ImagePublishData) GetDescription() string {
  return p.Description
}

func (p *ImagePublishData) GetCreateTime() UnixTimestamp {
  return p.CreateTime
}
var ImagePublishData_Uploader_DEFAULT *UserInfo
func (p *ImagePublishData) GetUploader() *UserInfo {
  if !p.IsSetUploader() {
    return ImagePublishData_Uploader_DEFAULT
  }
return p.Uploader
}

func (p *ImagePublishData) GetFileSize() int64 {
  return p.FileSize
}

func (p *ImagePublishData) GetSoftware() []string {
  return p.Software
}

func (p *ImagePublishData) GetTags() []string {
  return p.Tags
}

func (p *ImagePublishData) GetOsId() int32 {
  return p.OsId
}

func (p *ImagePublishData) GetVirtId() string {
  return p.VirtId
}

func (p *ImagePublishData) GetIsTemplate() bool {
  return p.IsTemplate
}
var ImagePublishData_Owner_DEFAULT *UserInfo
func (p *ImagePublishData) GetOwner() *UserInfo {
  if !p.IsSetOwner() {
    return ImagePublishData_Owner_DEFAULT
  }
return p.Owner
}

func (p *ImagePublishData) GetMachineDescription() []byte {
  return p.MachineDescription
}
func (p *ImagePublishData) IsSetUploader() bool {
  return p.Uploader != nil
}

func (p *ImagePublishData) IsSetOwner() bool {
  return p.Owner != nil
}

func (p *ImagePublishData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImagePublishData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *ImagePublishData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageVersionId = temp
}
  return nil
}

func (p *ImagePublishData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ImageName = v
}
  return nil
}

func (p *ImagePublishData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *ImagePublishData)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := UnixTimestamp(v)
  p.CreateTime = temp
}
  return nil
}

func (p *ImagePublishData)  ReadField6(iprot thrift.TProtocol) error {
  p.Uploader = &UserInfo{}
  if err := p.Uploader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Uploader), err)
  }
  return nil
}

func (p *ImagePublishData)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.FileSize = v
}
  return nil
}

func (p *ImagePublishData)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Software =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.Software = append(p.Software, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImagePublishData)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
var _elem11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.Tags = append(p.Tags, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImagePublishData)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.OsId = v
}
  return nil
}

func (p *ImagePublishData)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.VirtId = v
}
  return nil
}

func (p *ImagePublishData)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.IsTemplate = v
}
  return nil
}

func (p *ImagePublishData)  ReadField13(iprot thrift.TProtocol) error {
  p.Owner = &UserInfo{}
  if err := p.Owner.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Owner), err)
  }
  return nil
}

func (p *ImagePublishData)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.MachineDescription = v
}
  return nil
}

func (p *ImagePublishData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImagePublishData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImagePublishData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:imageBaseId: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageVersionId: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:imageName: ", p), err) }
  if err := oprot.WriteString(string(p.ImageName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:imageName: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:description: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createTime: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uploader", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:uploader: ", p), err) }
  if err := p.Uploader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Uploader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:uploader: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fileSize", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:fileSize: ", p), err) }
  if err := oprot.WriteI64(int64(p.FileSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fileSize (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:fileSize: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("software", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:software: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Software)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Software {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:software: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tags", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:tags: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:tags: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("osId", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:osId: ", p), err) }
  if err := oprot.WriteI32(int32(p.OsId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.osId (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:osId: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("virtId", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:virtId: ", p), err) }
  if err := oprot.WriteString(string(p.VirtId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.virtId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:virtId: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isTemplate", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:isTemplate: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsTemplate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isTemplate (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:isTemplate: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("owner", thrift.STRUCT, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:owner: ", p), err) }
  if err := p.Owner.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Owner), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:owner: ", p), err) }
  return err
}

func (p *ImagePublishData) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("machineDescription", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:machineDescription: ", p), err) }
  if err := oprot.WriteBinary(p.MachineDescription); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.machineDescription (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:machineDescription: ", p), err) }
  return err
}

func (p *ImagePublishData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImagePublishData(%+v)", *p)
}

// Attributes:
//  - Direction
//  - Host
//  - Port
type NetRule struct {
  // unused field # 1
  Direction NetDirection `thrift:"direction,2" db:"direction" json:"direction"`
  Host string `thrift:"host,3" db:"host" json:"host"`
  Port int32 `thrift:"port,4" db:"port" json:"port"`
}

func NewNetRule() *NetRule {
  return &NetRule{}
}


func (p *NetRule) GetDirection() NetDirection {
  return p.Direction
}

func (p *NetRule) GetHost() string {
  return p.Host
}

func (p *NetRule) GetPort() int32 {
  return p.Port
}
func (p *NetRule) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NetRule)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := NetDirection(v)
  p.Direction = temp
}
  return nil
}

func (p *NetRule)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *NetRule)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *NetRule) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NetRule"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NetRule) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("direction", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:direction: ", p), err) }
  if err := oprot.WriteI32(int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:direction: ", p), err) }
  return err
}

func (p *NetRule) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:host: ", p), err) }
  if err := oprot.WriteString(string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:host: ", p), err) }
  return err
}

func (p *NetRule) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:port: ", p), err) }
  return err
}

func (p *NetRule) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NetRule(%+v)", *p)
}

// Attributes:
//  - LectureName
//  - Description
//  - ImageVersionId
//  - AutoUpdate
//  - IsEnabled
//  - StartTime
//  - EndTime
//  - Runscript
//  - Nics
//  - NetworkExceptions
//  - IsExam
//  - HasInternetAccess
//  - DefaultPermissions
//  - AddAllowedUsers
//  - RemAllowedUsers
//  - LocationIds
//  - LimitToLocations
//  - LimitToAllowedUsers
//  - HasUsbAccess
type LectureWrite struct {
  LectureName string `thrift:"lectureName,1" db:"lectureName" json:"lectureName"`
  Description string `thrift:"description,2" db:"description" json:"description"`
  ImageVersionId UUID `thrift:"imageVersionId,3" db:"imageVersionId" json:"imageVersionId"`
  AutoUpdate bool `thrift:"autoUpdate,4" db:"autoUpdate" json:"autoUpdate"`
  IsEnabled bool `thrift:"isEnabled,5" db:"isEnabled" json:"isEnabled"`
  StartTime UnixTimestamp `thrift:"startTime,6" db:"startTime" json:"startTime"`
  EndTime UnixTimestamp `thrift:"endTime,7" db:"endTime" json:"endTime"`
  // unused field # 8
  Runscript string `thrift:"runscript,9" db:"runscript" json:"runscript"`
  Nics []string `thrift:"nics,10" db:"nics" json:"nics"`
  AddAllowedUsers []string `thrift:"addAllowedUsers,11" db:"addAllowedUsers" json:"addAllowedUsers,omitempty"`
  NetworkExceptions []*NetRule `thrift:"networkExceptions,12" db:"networkExceptions" json:"networkExceptions,omitempty"`
  IsExam bool `thrift:"isExam,13" db:"isExam" json:"isExam"`
  HasInternetAccess bool `thrift:"hasInternetAccess,14" db:"hasInternetAccess" json:"hasInternetAccess"`
  DefaultPermissions *LecturePermissions `thrift:"defaultPermissions,15" db:"defaultPermissions" json:"defaultPermissions"`
  RemAllowedUsers []string `thrift:"remAllowedUsers,16" db:"remAllowedUsers" json:"remAllowedUsers,omitempty"`
  LocationIds []int32 `thrift:"locationIds,17" db:"locationIds" json:"locationIds"`
  LimitToLocations bool `thrift:"limitToLocations,18" db:"limitToLocations" json:"limitToLocations"`
  LimitToAllowedUsers bool `thrift:"limitToAllowedUsers,19" db:"limitToAllowedUsers" json:"limitToAllowedUsers"`
  HasUsbAccess bool `thrift:"hasUsbAccess,20" db:"hasUsbAccess" json:"hasUsbAccess"`
}

func NewLectureWrite() *LectureWrite {
  return &LectureWrite{}
}


func (p *LectureWrite) GetLectureName() string {
  return p.LectureName
}

func (p *LectureWrite) GetDescription() string {
  return p.Description
}

func (p *LectureWrite) GetImageVersionId() UUID {
  return p.ImageVersionId
}

func (p *LectureWrite) GetAutoUpdate() bool {
  return p.AutoUpdate
}

func (p *LectureWrite) GetIsEnabled() bool {
  return p.IsEnabled
}

func (p *LectureWrite) GetStartTime() UnixTimestamp {
  return p.StartTime
}

func (p *LectureWrite) GetEndTime() UnixTimestamp {
  return p.EndTime
}

func (p *LectureWrite) GetRunscript() string {
  return p.Runscript
}

func (p *LectureWrite) GetNics() []string {
  return p.Nics
}
var LectureWrite_NetworkExceptions_DEFAULT []*NetRule

func (p *LectureWrite) GetNetworkExceptions() []*NetRule {
  return p.NetworkExceptions
}

func (p *LectureWrite) GetIsExam() bool {
  return p.IsExam
}

func (p *LectureWrite) GetHasInternetAccess() bool {
  return p.HasInternetAccess
}
var LectureWrite_DefaultPermissions_DEFAULT *LecturePermissions
func (p *LectureWrite) GetDefaultPermissions() *LecturePermissions {
  if !p.IsSetDefaultPermissions() {
    return LectureWrite_DefaultPermissions_DEFAULT
  }
return p.DefaultPermissions
}
var LectureWrite_AddAllowedUsers_DEFAULT []string

func (p *LectureWrite) GetAddAllowedUsers() []string {
  return p.AddAllowedUsers
}
var LectureWrite_RemAllowedUsers_DEFAULT []string

func (p *LectureWrite) GetRemAllowedUsers() []string {
  return p.RemAllowedUsers
}

func (p *LectureWrite) GetLocationIds() []int32 {
  return p.LocationIds
}

func (p *LectureWrite) GetLimitToLocations() bool {
  return p.LimitToLocations
}

func (p *LectureWrite) GetLimitToAllowedUsers() bool {
  return p.LimitToAllowedUsers
}

func (p *LectureWrite) GetHasUsbAccess() bool {
  return p.HasUsbAccess
}
func (p *LectureWrite) IsSetNetworkExceptions() bool {
  return p.NetworkExceptions != nil
}

func (p *LectureWrite) IsSetDefaultPermissions() bool {
  return p.DefaultPermissions != nil
}

func (p *LectureWrite) IsSetAddAllowedUsers() bool {
  return p.AddAllowedUsers != nil
}

func (p *LectureWrite) IsSetRemAllowedUsers() bool {
  return p.RemAllowedUsers != nil
}

func (p *LectureWrite) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LectureWrite)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LectureName = v
}
  return nil
}

func (p *LectureWrite)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *LectureWrite)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UUID(v)
  p.ImageVersionId = temp
}
  return nil
}

func (p *LectureWrite)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AutoUpdate = v
}
  return nil
}

func (p *LectureWrite)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsEnabled = v
}
  return nil
}

func (p *LectureWrite)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := UnixTimestamp(v)
  p.StartTime = temp
}
  return nil
}

func (p *LectureWrite)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := UnixTimestamp(v)
  p.EndTime = temp
}
  return nil
}

func (p *LectureWrite)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Runscript = v
}
  return nil
}

func (p *LectureWrite)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Nics =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.Nics = append(p.Nics, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LectureWrite)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NetRule, 0, size)
  p.NetworkExceptions =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &NetRule{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.NetworkExceptions = append(p.NetworkExceptions, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LectureWrite)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.IsExam = v
}
  return nil
}

func (p *LectureWrite)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.HasInternetAccess = v
}
  return nil
}

func (p *LectureWrite)  ReadField15(iprot thrift.TProtocol) error {
  p.DefaultPermissions = &LecturePermissions{}
  if err := p.DefaultPermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DefaultPermissions), err)
  }
  return nil
}

func (p *LectureWrite)  ReadField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.AddAllowedUsers =  tSlice
  for i := 0; i < size; i ++ {
var _elem14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem14 = v
}
    p.AddAllowedUsers = append(p.AddAllowedUsers, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LectureWrite)  ReadField16(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.RemAllowedUsers =  tSlice
  for i := 0; i < size; i ++ {
var _elem15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem15 = v
}
    p.RemAllowedUsers = append(p.RemAllowedUsers, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LectureWrite)  ReadField17(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.LocationIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.LocationIds = append(p.LocationIds, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LectureWrite)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.LimitToLocations = v
}
  return nil
}

func (p *LectureWrite)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.LimitToAllowedUsers = v
}
  return nil
}

func (p *LectureWrite)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.HasUsbAccess = v
}
  return nil
}

func (p *LectureWrite) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LectureWrite"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LectureWrite) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lectureName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lectureName: ", p), err) }
  if err := oprot.WriteString(string(p.LectureName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lectureName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lectureName: ", p), err) }
  return err
}

func (p *LectureWrite) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:description: ", p), err) }
  return err
}

func (p *LectureWrite) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:imageVersionId: ", p), err) }
  return err
}

func (p *LectureWrite) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("autoUpdate", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:autoUpdate: ", p), err) }
  if err := oprot.WriteBool(bool(p.AutoUpdate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.autoUpdate (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:autoUpdate: ", p), err) }
  return err
}

func (p *LectureWrite) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isEnabled", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isEnabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isEnabled (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isEnabled: ", p), err) }
  return err
}

func (p *LectureWrite) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:startTime: ", p), err) }
  return err
}

func (p *LectureWrite) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:endTime: ", p), err) }
  return err
}

func (p *LectureWrite) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("runscript", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:runscript: ", p), err) }
  if err := oprot.WriteString(string(p.Runscript)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runscript (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:runscript: ", p), err) }
  return err
}

func (p *LectureWrite) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nics", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:nics: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Nics)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Nics {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:nics: ", p), err) }
  return err
}

func (p *LectureWrite) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddAllowedUsers() {
    if err := oprot.WriteFieldBegin("addAllowedUsers", thrift.LIST, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:addAllowedUsers: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.AddAllowedUsers)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.AddAllowedUsers {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:addAllowedUsers: ", p), err) }
  }
  return err
}

func (p *LectureWrite) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetNetworkExceptions() {
    if err := oprot.WriteFieldBegin("networkExceptions", thrift.LIST, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:networkExceptions: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NetworkExceptions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.NetworkExceptions {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:networkExceptions: ", p), err) }
  }
  return err
}

func (p *LectureWrite) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isExam", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:isExam: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsExam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isExam (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:isExam: ", p), err) }
  return err
}

func (p *LectureWrite) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasInternetAccess", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:hasInternetAccess: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasInternetAccess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasInternetAccess (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:hasInternetAccess: ", p), err) }
  return err
}

func (p *LectureWrite) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("defaultPermissions", thrift.STRUCT, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:defaultPermissions: ", p), err) }
  if err := p.DefaultPermissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DefaultPermissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:defaultPermissions: ", p), err) }
  return err
}

func (p *LectureWrite) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetRemAllowedUsers() {
    if err := oprot.WriteFieldBegin("remAllowedUsers", thrift.LIST, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:remAllowedUsers: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.RemAllowedUsers)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.RemAllowedUsers {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:remAllowedUsers: ", p), err) }
  }
  return err
}

func (p *LectureWrite) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locationIds", thrift.LIST, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:locationIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.LocationIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LocationIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:locationIds: ", p), err) }
  return err
}

func (p *LectureWrite) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limitToLocations", thrift.BOOL, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:limitToLocations: ", p), err) }
  if err := oprot.WriteBool(bool(p.LimitToLocations)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limitToLocations (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:limitToLocations: ", p), err) }
  return err
}

func (p *LectureWrite) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limitToAllowedUsers", thrift.BOOL, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:limitToAllowedUsers: ", p), err) }
  if err := oprot.WriteBool(bool(p.LimitToAllowedUsers)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limitToAllowedUsers (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:limitToAllowedUsers: ", p), err) }
  return err
}

func (p *LectureWrite) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasUsbAccess", thrift.BOOL, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:hasUsbAccess: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasUsbAccess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasUsbAccess (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:hasUsbAccess: ", p), err) }
  return err
}

func (p *LectureWrite) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LectureWrite(%+v)", *p)
}

// Attributes:
//  - LectureId
//  - LectureName
//  - ImageVersionId
//  - ImageBaseId
//  - IsEnabled
//  - StartTime
//  - EndTime
//  - LastUsed
//  - UseCount
//  - OwnerId
//  - UpdaterId
//  - IsExam
//  - HasInternetAccess
//  - DefaultPermissions
//  - UserPermissions
//  - IsImageVersionUsable
//  - HasUsbAccess
type LectureSummary struct {
  LectureId UUID `thrift:"lectureId,1" db:"lectureId" json:"lectureId"`
  LectureName string `thrift:"lectureName,2" db:"lectureName" json:"lectureName"`
  ImageVersionId UUID `thrift:"imageVersionId,3" db:"imageVersionId" json:"imageVersionId"`
  ImageBaseId UUID `thrift:"imageBaseId,4" db:"imageBaseId" json:"imageBaseId"`
  IsEnabled bool `thrift:"isEnabled,5" db:"isEnabled" json:"isEnabled"`
  StartTime UnixTimestamp `thrift:"startTime,6" db:"startTime" json:"startTime"`
  EndTime UnixTimestamp `thrift:"endTime,7" db:"endTime" json:"endTime"`
  LastUsed UnixTimestamp `thrift:"lastUsed,8" db:"lastUsed" json:"lastUsed"`
  UseCount int32 `thrift:"useCount,9" db:"useCount" json:"useCount"`
  OwnerId UUID `thrift:"ownerId,10" db:"ownerId" json:"ownerId"`
  UpdaterId UUID `thrift:"updaterId,11" db:"updaterId" json:"updaterId"`
  IsExam bool `thrift:"isExam,12" db:"isExam" json:"isExam"`
  HasInternetAccess bool `thrift:"hasInternetAccess,13" db:"hasInternetAccess" json:"hasInternetAccess"`
  DefaultPermissions *LecturePermissions `thrift:"defaultPermissions,14" db:"defaultPermissions" json:"defaultPermissions"`
  UserPermissions *LecturePermissions `thrift:"userPermissions,15" db:"userPermissions" json:"userPermissions,omitempty"`
  IsImageVersionUsable bool `thrift:"isImageVersionUsable,16" db:"isImageVersionUsable" json:"isImageVersionUsable"`
  HasUsbAccess bool `thrift:"hasUsbAccess,17" db:"hasUsbAccess" json:"hasUsbAccess"`
}

func NewLectureSummary() *LectureSummary {
  return &LectureSummary{}
}


func (p *LectureSummary) GetLectureId() UUID {
  return p.LectureId
}

func (p *LectureSummary) GetLectureName() string {
  return p.LectureName
}

func (p *LectureSummary) GetImageVersionId() UUID {
  return p.ImageVersionId
}

func (p *LectureSummary) GetImageBaseId() UUID {
  return p.ImageBaseId
}

func (p *LectureSummary) GetIsEnabled() bool {
  return p.IsEnabled
}

func (p *LectureSummary) GetStartTime() UnixTimestamp {
  return p.StartTime
}

func (p *LectureSummary) GetEndTime() UnixTimestamp {
  return p.EndTime
}

func (p *LectureSummary) GetLastUsed() UnixTimestamp {
  return p.LastUsed
}

func (p *LectureSummary) GetUseCount() int32 {
  return p.UseCount
}

func (p *LectureSummary) GetOwnerId() UUID {
  return p.OwnerId
}

func (p *LectureSummary) GetUpdaterId() UUID {
  return p.UpdaterId
}

func (p *LectureSummary) GetIsExam() bool {
  return p.IsExam
}

func (p *LectureSummary) GetHasInternetAccess() bool {
  return p.HasInternetAccess
}
var LectureSummary_DefaultPermissions_DEFAULT *LecturePermissions
func (p *LectureSummary) GetDefaultPermissions() *LecturePermissions {
  if !p.IsSetDefaultPermissions() {
    return LectureSummary_DefaultPermissions_DEFAULT
  }
return p.DefaultPermissions
}
var LectureSummary_UserPermissions_DEFAULT *LecturePermissions
func (p *LectureSummary) GetUserPermissions() *LecturePermissions {
  if !p.IsSetUserPermissions() {
    return LectureSummary_UserPermissions_DEFAULT
  }
return p.UserPermissions
}

func (p *LectureSummary) GetIsImageVersionUsable() bool {
  return p.IsImageVersionUsable
}

func (p *LectureSummary) GetHasUsbAccess() bool {
  return p.HasUsbAccess
}
func (p *LectureSummary) IsSetDefaultPermissions() bool {
  return p.DefaultPermissions != nil
}

func (p *LectureSummary) IsSetUserPermissions() bool {
  return p.UserPermissions != nil
}

func (p *LectureSummary) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LectureSummary)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UUID(v)
  p.LectureId = temp
}
  return nil
}

func (p *LectureSummary)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LectureName = v
}
  return nil
}

func (p *LectureSummary)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UUID(v)
  p.ImageVersionId = temp
}
  return nil
}

func (p *LectureSummary)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *LectureSummary)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsEnabled = v
}
  return nil
}

func (p *LectureSummary)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := UnixTimestamp(v)
  p.StartTime = temp
}
  return nil
}

func (p *LectureSummary)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := UnixTimestamp(v)
  p.EndTime = temp
}
  return nil
}

func (p *LectureSummary)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := UnixTimestamp(v)
  p.LastUsed = temp
}
  return nil
}

func (p *LectureSummary)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.UseCount = v
}
  return nil
}

func (p *LectureSummary)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := UUID(v)
  p.OwnerId = temp
}
  return nil
}

func (p *LectureSummary)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := UUID(v)
  p.UpdaterId = temp
}
  return nil
}

func (p *LectureSummary)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.IsExam = v
}
  return nil
}

func (p *LectureSummary)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.HasInternetAccess = v
}
  return nil
}

func (p *LectureSummary)  ReadField14(iprot thrift.TProtocol) error {
  p.DefaultPermissions = &LecturePermissions{}
  if err := p.DefaultPermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DefaultPermissions), err)
  }
  return nil
}

func (p *LectureSummary)  ReadField15(iprot thrift.TProtocol) error {
  p.UserPermissions = &LecturePermissions{}
  if err := p.UserPermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserPermissions), err)
  }
  return nil
}

func (p *LectureSummary)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.IsImageVersionUsable = v
}
  return nil
}

func (p *LectureSummary)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.HasUsbAccess = v
}
  return nil
}

func (p *LectureSummary) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LectureSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LectureSummary) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lectureId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lectureId: ", p), err) }
  if err := oprot.WriteString(string(p.LectureId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lectureId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lectureId: ", p), err) }
  return err
}

func (p *LectureSummary) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lectureName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lectureName: ", p), err) }
  if err := oprot.WriteString(string(p.LectureName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lectureName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lectureName: ", p), err) }
  return err
}

func (p *LectureSummary) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:imageVersionId: ", p), err) }
  return err
}

func (p *LectureSummary) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:imageBaseId: ", p), err) }
  return err
}

func (p *LectureSummary) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isEnabled", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isEnabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isEnabled (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isEnabled: ", p), err) }
  return err
}

func (p *LectureSummary) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:startTime: ", p), err) }
  return err
}

func (p *LectureSummary) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:endTime: ", p), err) }
  return err
}

func (p *LectureSummary) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastUsed", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:lastUsed: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastUsed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastUsed (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:lastUsed: ", p), err) }
  return err
}

func (p *LectureSummary) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("useCount", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:useCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.UseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useCount (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:useCount: ", p), err) }
  return err
}

func (p *LectureSummary) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ownerId", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:ownerId: ", p), err) }
  if err := oprot.WriteString(string(p.OwnerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ownerId (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:ownerId: ", p), err) }
  return err
}

func (p *LectureSummary) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updaterId", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updaterId: ", p), err) }
  if err := oprot.WriteString(string(p.UpdaterId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updaterId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updaterId: ", p), err) }
  return err
}

func (p *LectureSummary) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isExam", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:isExam: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsExam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isExam (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:isExam: ", p), err) }
  return err
}

func (p *LectureSummary) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasInternetAccess", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:hasInternetAccess: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasInternetAccess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasInternetAccess (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:hasInternetAccess: ", p), err) }
  return err
}

func (p *LectureSummary) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("defaultPermissions", thrift.STRUCT, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:defaultPermissions: ", p), err) }
  if err := p.DefaultPermissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DefaultPermissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:defaultPermissions: ", p), err) }
  return err
}

func (p *LectureSummary) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserPermissions() {
    if err := oprot.WriteFieldBegin("userPermissions", thrift.STRUCT, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:userPermissions: ", p), err) }
    if err := p.UserPermissions.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserPermissions), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:userPermissions: ", p), err) }
  }
  return err
}

func (p *LectureSummary) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isImageVersionUsable", thrift.BOOL, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:isImageVersionUsable: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsImageVersionUsable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isImageVersionUsable (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:isImageVersionUsable: ", p), err) }
  return err
}

func (p *LectureSummary) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasUsbAccess", thrift.BOOL, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:hasUsbAccess: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasUsbAccess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasUsbAccess (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:hasUsbAccess: ", p), err) }
  return err
}

func (p *LectureSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LectureSummary(%+v)", *p)
}

// Attributes:
//  - LectureId
//  - LectureName
//  - Description
//  - ImageVersionId
//  - ImageBaseId
//  - AutoUpdate
//  - IsEnabled
//  - StartTime
//  - EndTime
//  - LastUsed
//  - UseCount
//  - CreateTime
//  - UpdateTime
//  - OwnerId
//  - UpdaterId
//  - Runscript
//  - Nics
//  - AllowedUsers
//  - NetworkExceptions
//  - IsExam
//  - HasInternetAccess
//  - DefaultPermissions
//  - UserPermissions
//  - LocationIds
//  - LimitToLocations
//  - LimitToAllowedUsers
//  - HasUsbAccess
type LectureRead struct {
  LectureId UUID `thrift:"lectureId,1" db:"lectureId" json:"lectureId"`
  LectureName string `thrift:"lectureName,2" db:"lectureName" json:"lectureName"`
  Description string `thrift:"description,3" db:"description" json:"description"`
  // unused field # 4
  AutoUpdate bool `thrift:"autoUpdate,5" db:"autoUpdate" json:"autoUpdate"`
  IsEnabled bool `thrift:"isEnabled,6" db:"isEnabled" json:"isEnabled"`
  StartTime UnixTimestamp `thrift:"startTime,7" db:"startTime" json:"startTime"`
  EndTime UnixTimestamp `thrift:"endTime,8" db:"endTime" json:"endTime"`
  LastUsed UnixTimestamp `thrift:"lastUsed,9" db:"lastUsed" json:"lastUsed"`
  UseCount int32 `thrift:"useCount,10" db:"useCount" json:"useCount"`
  OwnerId UUID `thrift:"ownerId,11" db:"ownerId" json:"ownerId"`
  UpdaterId UUID `thrift:"updaterId,12" db:"updaterId" json:"updaterId"`
  Runscript string `thrift:"runscript,13" db:"runscript" json:"runscript"`
  Nics []string `thrift:"nics,14" db:"nics" json:"nics"`
  AllowedUsers []string `thrift:"allowedUsers,15" db:"allowedUsers" json:"allowedUsers"`
  NetworkExceptions []*NetRule `thrift:"networkExceptions,16" db:"networkExceptions" json:"networkExceptions"`
  IsExam bool `thrift:"isExam,17" db:"isExam" json:"isExam"`
  HasInternetAccess bool `thrift:"hasInternetAccess,18" db:"hasInternetAccess" json:"hasInternetAccess"`
  DefaultPermissions *LecturePermissions `thrift:"defaultPermissions,19" db:"defaultPermissions" json:"defaultPermissions"`
  CreateTime UnixTimestamp `thrift:"createTime,20" db:"createTime" json:"createTime"`
  UpdateTime UnixTimestamp `thrift:"updateTime,21" db:"updateTime" json:"updateTime"`
  UserPermissions *LecturePermissions `thrift:"userPermissions,22" db:"userPermissions" json:"userPermissions,omitempty"`
  ImageVersionId string `thrift:"imageVersionId,23" db:"imageVersionId" json:"imageVersionId"`
  ImageBaseId string `thrift:"imageBaseId,24" db:"imageBaseId" json:"imageBaseId"`
  LocationIds []int32 `thrift:"locationIds,25" db:"locationIds" json:"locationIds"`
  LimitToLocations bool `thrift:"limitToLocations,26" db:"limitToLocations" json:"limitToLocations"`
  LimitToAllowedUsers bool `thrift:"limitToAllowedUsers,27" db:"limitToAllowedUsers" json:"limitToAllowedUsers"`
  HasUsbAccess bool `thrift:"hasUsbAccess,28" db:"hasUsbAccess" json:"hasUsbAccess"`
}

func NewLectureRead() *LectureRead {
  return &LectureRead{}
}


func (p *LectureRead) GetLectureId() UUID {
  return p.LectureId
}

func (p *LectureRead) GetLectureName() string {
  return p.LectureName
}

func (p *LectureRead) GetDescription() string {
  return p.Description
}

func (p *LectureRead) GetImageVersionId() string {
  return p.ImageVersionId
}

func (p *LectureRead) GetImageBaseId() string {
  return p.ImageBaseId
}

func (p *LectureRead) GetAutoUpdate() bool {
  return p.AutoUpdate
}

func (p *LectureRead) GetIsEnabled() bool {
  return p.IsEnabled
}

func (p *LectureRead) GetStartTime() UnixTimestamp {
  return p.StartTime
}

func (p *LectureRead) GetEndTime() UnixTimestamp {
  return p.EndTime
}

func (p *LectureRead) GetLastUsed() UnixTimestamp {
  return p.LastUsed
}

func (p *LectureRead) GetUseCount() int32 {
  return p.UseCount
}

func (p *LectureRead) GetCreateTime() UnixTimestamp {
  return p.CreateTime
}

func (p *LectureRead) GetUpdateTime() UnixTimestamp {
  return p.UpdateTime
}

func (p *LectureRead) GetOwnerId() UUID {
  return p.OwnerId
}

func (p *LectureRead) GetUpdaterId() UUID {
  return p.UpdaterId
}

func (p *LectureRead) GetRunscript() string {
  return p.Runscript
}

func (p *LectureRead) GetNics() []string {
  return p.Nics
}

func (p *LectureRead) GetAllowedUsers() []string {
  return p.AllowedUsers
}

func (p *LectureRead) GetNetworkExceptions() []*NetRule {
  return p.NetworkExceptions
}

func (p *LectureRead) GetIsExam() bool {
  return p.IsExam
}

func (p *LectureRead) GetHasInternetAccess() bool {
  return p.HasInternetAccess
}
var LectureRead_DefaultPermissions_DEFAULT *LecturePermissions
func (p *LectureRead) GetDefaultPermissions() *LecturePermissions {
  if !p.IsSetDefaultPermissions() {
    return LectureRead_DefaultPermissions_DEFAULT
  }
return p.DefaultPermissions
}
var LectureRead_UserPermissions_DEFAULT *LecturePermissions
func (p *LectureRead) GetUserPermissions() *LecturePermissions {
  if !p.IsSetUserPermissions() {
    return LectureRead_UserPermissions_DEFAULT
  }
return p.UserPermissions
}

func (p *LectureRead) GetLocationIds() []int32 {
  return p.LocationIds
}

func (p *LectureRead) GetLimitToLocations() bool {
  return p.LimitToLocations
}

func (p *LectureRead) GetLimitToAllowedUsers() bool {
  return p.LimitToAllowedUsers
}

func (p *LectureRead) GetHasUsbAccess() bool {
  return p.HasUsbAccess
}
func (p *LectureRead) IsSetDefaultPermissions() bool {
  return p.DefaultPermissions != nil
}

func (p *LectureRead) IsSetUserPermissions() bool {
  return p.UserPermissions != nil
}

func (p *LectureRead) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 23:
      if err := p.ReadField23(iprot); err != nil {
        return err
      }
    case 24:
      if err := p.ReadField24(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 22:
      if err := p.ReadField22(iprot); err != nil {
        return err
      }
    case 25:
      if err := p.ReadField25(iprot); err != nil {
        return err
      }
    case 26:
      if err := p.ReadField26(iprot); err != nil {
        return err
      }
    case 27:
      if err := p.ReadField27(iprot); err != nil {
        return err
      }
    case 28:
      if err := p.ReadField28(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LectureRead)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UUID(v)
  p.LectureId = temp
}
  return nil
}

func (p *LectureRead)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LectureName = v
}
  return nil
}

func (p *LectureRead)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *LectureRead)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.ImageVersionId = v
}
  return nil
}

func (p *LectureRead)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.ImageBaseId = v
}
  return nil
}

func (p *LectureRead)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AutoUpdate = v
}
  return nil
}

func (p *LectureRead)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IsEnabled = v
}
  return nil
}

func (p *LectureRead)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := UnixTimestamp(v)
  p.StartTime = temp
}
  return nil
}

func (p *LectureRead)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := UnixTimestamp(v)
  p.EndTime = temp
}
  return nil
}

func (p *LectureRead)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := UnixTimestamp(v)
  p.LastUsed = temp
}
  return nil
}

func (p *LectureRead)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.UseCount = v
}
  return nil
}

func (p *LectureRead)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := UnixTimestamp(v)
  p.CreateTime = temp
}
  return nil
}

func (p *LectureRead)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  temp := UnixTimestamp(v)
  p.UpdateTime = temp
}
  return nil
}

func (p *LectureRead)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := UUID(v)
  p.OwnerId = temp
}
  return nil
}

func (p *LectureRead)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := UUID(v)
  p.UpdaterId = temp
}
  return nil
}

func (p *LectureRead)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Runscript = v
}
  return nil
}

func (p *LectureRead)  ReadField14(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Nics =  tSlice
  for i := 0; i < size; i ++ {
var _elem17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.Nics = append(p.Nics, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LectureRead)  ReadField15(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.AllowedUsers =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.AllowedUsers = append(p.AllowedUsers, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LectureRead)  ReadField16(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NetRule, 0, size)
  p.NetworkExceptions =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := &NetRule{}
    if err := _elem19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.NetworkExceptions = append(p.NetworkExceptions, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LectureRead)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.IsExam = v
}
  return nil
}

func (p *LectureRead)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.HasInternetAccess = v
}
  return nil
}

func (p *LectureRead)  ReadField19(iprot thrift.TProtocol) error {
  p.DefaultPermissions = &LecturePermissions{}
  if err := p.DefaultPermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DefaultPermissions), err)
  }
  return nil
}

func (p *LectureRead)  ReadField22(iprot thrift.TProtocol) error {
  p.UserPermissions = &LecturePermissions{}
  if err := p.UserPermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserPermissions), err)
  }
  return nil
}

func (p *LectureRead)  ReadField25(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.LocationIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem20 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem20 = v
}
    p.LocationIds = append(p.LocationIds, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LectureRead)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.LimitToLocations = v
}
  return nil
}

func (p *LectureRead)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.LimitToAllowedUsers = v
}
  return nil
}

func (p *LectureRead)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.HasUsbAccess = v
}
  return nil
}

func (p *LectureRead) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LectureRead"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LectureRead) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lectureId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lectureId: ", p), err) }
  if err := oprot.WriteString(string(p.LectureId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lectureId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lectureId: ", p), err) }
  return err
}

func (p *LectureRead) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lectureName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lectureName: ", p), err) }
  if err := oprot.WriteString(string(p.LectureName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lectureName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lectureName: ", p), err) }
  return err
}

func (p *LectureRead) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:description: ", p), err) }
  return err
}

func (p *LectureRead) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("autoUpdate", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:autoUpdate: ", p), err) }
  if err := oprot.WriteBool(bool(p.AutoUpdate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.autoUpdate (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:autoUpdate: ", p), err) }
  return err
}

func (p *LectureRead) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isEnabled", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:isEnabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isEnabled (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:isEnabled: ", p), err) }
  return err
}

func (p *LectureRead) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:startTime: ", p), err) }
  return err
}

func (p *LectureRead) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:endTime: ", p), err) }
  return err
}

func (p *LectureRead) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastUsed", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:lastUsed: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastUsed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastUsed (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:lastUsed: ", p), err) }
  return err
}

func (p *LectureRead) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("useCount", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:useCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.UseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useCount (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:useCount: ", p), err) }
  return err
}

func (p *LectureRead) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ownerId", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ownerId: ", p), err) }
  if err := oprot.WriteString(string(p.OwnerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ownerId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ownerId: ", p), err) }
  return err
}

func (p *LectureRead) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updaterId", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:updaterId: ", p), err) }
  if err := oprot.WriteString(string(p.UpdaterId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updaterId (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:updaterId: ", p), err) }
  return err
}

func (p *LectureRead) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("runscript", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:runscript: ", p), err) }
  if err := oprot.WriteString(string(p.Runscript)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runscript (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:runscript: ", p), err) }
  return err
}

func (p *LectureRead) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nics", thrift.LIST, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:nics: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Nics)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Nics {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:nics: ", p), err) }
  return err
}

func (p *LectureRead) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allowedUsers", thrift.LIST, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:allowedUsers: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.AllowedUsers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AllowedUsers {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:allowedUsers: ", p), err) }
  return err
}

func (p *LectureRead) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("networkExceptions", thrift.LIST, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:networkExceptions: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NetworkExceptions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NetworkExceptions {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:networkExceptions: ", p), err) }
  return err
}

func (p *LectureRead) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isExam", thrift.BOOL, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:isExam: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsExam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isExam (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:isExam: ", p), err) }
  return err
}

func (p *LectureRead) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasInternetAccess", thrift.BOOL, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:hasInternetAccess: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasInternetAccess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasInternetAccess (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:hasInternetAccess: ", p), err) }
  return err
}

func (p *LectureRead) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("defaultPermissions", thrift.STRUCT, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:defaultPermissions: ", p), err) }
  if err := p.DefaultPermissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DefaultPermissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:defaultPermissions: ", p), err) }
  return err
}

func (p *LectureRead) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:createTime: ", p), err) }
  return err
}

func (p *LectureRead) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:updateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updateTime (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:updateTime: ", p), err) }
  return err
}

func (p *LectureRead) writeField22(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserPermissions() {
    if err := oprot.WriteFieldBegin("userPermissions", thrift.STRUCT, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:userPermissions: ", p), err) }
    if err := p.UserPermissions.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserPermissions), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:userPermissions: ", p), err) }
  }
  return err
}

func (p *LectureRead) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:imageVersionId: ", p), err) }
  return err
}

func (p *LectureRead) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:imageBaseId: ", p), err) }
  return err
}

func (p *LectureRead) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locationIds", thrift.LIST, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:locationIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.LocationIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LocationIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:locationIds: ", p), err) }
  return err
}

func (p *LectureRead) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limitToLocations", thrift.BOOL, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:limitToLocations: ", p), err) }
  if err := oprot.WriteBool(bool(p.LimitToLocations)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limitToLocations (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:limitToLocations: ", p), err) }
  return err
}

func (p *LectureRead) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limitToAllowedUsers", thrift.BOOL, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:limitToAllowedUsers: ", p), err) }
  if err := oprot.WriteBool(bool(p.LimitToAllowedUsers)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limitToAllowedUsers (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:limitToAllowedUsers: ", p), err) }
  return err
}

func (p *LectureRead) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasUsbAccess", thrift.BOOL, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:hasUsbAccess: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasUsbAccess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasUsbAccess (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:hasUsbAccess: ", p), err) }
  return err
}

func (p *LectureRead) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LectureRead(%+v)", *p)
}

// Attributes:
//  - Tag
//  - CreateTime
type MasterTag struct {
  Tag string `thrift:"tag,1" db:"tag" json:"tag"`
  CreateTime UnixTimestamp `thrift:"createTime,2" db:"createTime" json:"createTime"`
}

func NewMasterTag() *MasterTag {
  return &MasterTag{}
}


func (p *MasterTag) GetTag() string {
  return p.Tag
}

func (p *MasterTag) GetCreateTime() UnixTimestamp {
  return p.CreateTime
}
func (p *MasterTag) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterTag)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Tag = v
}
  return nil
}

func (p *MasterTag)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UnixTimestamp(v)
  p.CreateTime = temp
}
  return nil
}

func (p *MasterTag) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MasterTag"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterTag) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag: ", p), err) }
  if err := oprot.WriteString(string(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag: ", p), err) }
  return err
}

func (p *MasterTag) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createTime: ", p), err) }
  return err
}

func (p *MasterTag) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterTag(%+v)", *p)
}

// Attributes:
//  - Software
//  - IsRestricted
//  - CreateTime
type MasterSoftware struct {
  Software string `thrift:"software,1" db:"software" json:"software"`
  IsRestricted bool `thrift:"isRestricted,2" db:"isRestricted" json:"isRestricted"`
  CreateTime UnixTimestamp `thrift:"createTime,3" db:"createTime" json:"createTime"`
}

func NewMasterSoftware() *MasterSoftware {
  return &MasterSoftware{}
}


func (p *MasterSoftware) GetSoftware() string {
  return p.Software
}

func (p *MasterSoftware) GetIsRestricted() bool {
  return p.IsRestricted
}

func (p *MasterSoftware) GetCreateTime() UnixTimestamp {
  return p.CreateTime
}
func (p *MasterSoftware) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterSoftware)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Software = v
}
  return nil
}

func (p *MasterSoftware)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsRestricted = v
}
  return nil
}

func (p *MasterSoftware)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UnixTimestamp(v)
  p.CreateTime = temp
}
  return nil
}

func (p *MasterSoftware) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MasterSoftware"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterSoftware) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("software", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:software: ", p), err) }
  if err := oprot.WriteString(string(p.Software)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.software (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:software: ", p), err) }
  return err
}

func (p *MasterSoftware) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isRestricted", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isRestricted: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsRestricted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isRestricted (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isRestricted: ", p), err) }
  return err
}

func (p *MasterSoftware) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:createTime: ", p), err) }
  return err
}

func (p *MasterSoftware) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterSoftware(%+v)", *p)
}

// Attributes:
//  - Token
//  - PlainPort
//  - SslPort
//  - BlockHashes
//  - MachineDescription
type TransferInformation struct {
  Token Token `thrift:"token,1" db:"token" json:"token"`
  PlainPort int32 `thrift:"plainPort,2" db:"plainPort" json:"plainPort"`
  SslPort int32 `thrift:"sslPort,3" db:"sslPort" json:"sslPort"`
  BlockHashes [][]byte `thrift:"blockHashes,4" db:"blockHashes" json:"blockHashes,omitempty"`
  MachineDescription []byte `thrift:"machineDescription,5" db:"machineDescription" json:"machineDescription,omitempty"`
}

func NewTransferInformation() *TransferInformation {
  return &TransferInformation{}
}


func (p *TransferInformation) GetToken() Token {
  return p.Token
}

func (p *TransferInformation) GetPlainPort() int32 {
  return p.PlainPort
}

func (p *TransferInformation) GetSslPort() int32 {
  return p.SslPort
}
var TransferInformation_BlockHashes_DEFAULT [][]byte

func (p *TransferInformation) GetBlockHashes() [][]byte {
  return p.BlockHashes
}
var TransferInformation_MachineDescription_DEFAULT []byte

func (p *TransferInformation) GetMachineDescription() []byte {
  return p.MachineDescription
}
func (p *TransferInformation) IsSetBlockHashes() bool {
  return p.BlockHashes != nil
}

func (p *TransferInformation) IsSetMachineDescription() bool {
  return p.MachineDescription != nil
}

func (p *TransferInformation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransferInformation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.Token = temp
}
  return nil
}

func (p *TransferInformation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PlainPort = v
}
  return nil
}

func (p *TransferInformation)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SslPort = v
}
  return nil
}

func (p *TransferInformation)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.BlockHashes =  tSlice
  for i := 0; i < size; i ++ {
var _elem21 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem21 = v
}
    p.BlockHashes = append(p.BlockHashes, _elem21)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TransferInformation)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MachineDescription = v
}
  return nil
}

func (p *TransferInformation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TransferInformation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransferInformation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *TransferInformation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("plainPort", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:plainPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.PlainPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.plainPort (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:plainPort: ", p), err) }
  return err
}

func (p *TransferInformation) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sslPort", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sslPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.SslPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sslPort (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sslPort: ", p), err) }
  return err
}

func (p *TransferInformation) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetBlockHashes() {
    if err := oprot.WriteFieldBegin("blockHashes", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:blockHashes: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.BlockHashes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.BlockHashes {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:blockHashes: ", p), err) }
  }
  return err
}

func (p *TransferInformation) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetMachineDescription() {
    if err := oprot.WriteFieldBegin("machineDescription", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:machineDescription: ", p), err) }
    if err := oprot.WriteBinary(p.MachineDescription); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.machineDescription (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:machineDescription: ", p), err) }
  }
  return err
}

func (p *TransferInformation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransferInformation(%+v)", *p)
}

// Attributes:
//  - BlockStatus
//  - State
type TransferStatus struct {
  BlockStatus []byte `thrift:"blockStatus,1" db:"blockStatus" json:"blockStatus"`
  State TransferState `thrift:"state,2" db:"state" json:"state"`
}

func NewTransferStatus() *TransferStatus {
  return &TransferStatus{}
}


func (p *TransferStatus) GetBlockStatus() []byte {
  return p.BlockStatus
}

func (p *TransferStatus) GetState() TransferState {
  return p.State
}
func (p *TransferStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransferStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BlockStatus = v
}
  return nil
}

func (p *TransferStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TransferState(v)
  p.State = temp
}
  return nil
}

func (p *TransferStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TransferStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransferStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("blockStatus", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blockStatus: ", p), err) }
  if err := oprot.WriteBinary(p.BlockStatus); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.blockStatus (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blockStatus: ", p), err) }
  return err
}

func (p *TransferStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:state: ", p), err) }
  return err
}

func (p *TransferStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransferStatus(%+v)", *p)
}

// Attributes:
//  - PageSize
//  - DefaultImagePermissions
//  - DefaultLecturePermissions
//  - MaxImageValidityDays
//  - MaxLectureValidityDays
//  - MaxTransfers
//  - MaxConnectionsPerTransfer
//  - MaxLocationsPerLecture
//  - AllowLoginByDefault
type SatelliteConfig struct {
  PageSize int32 `thrift:"pageSize,1" db:"pageSize" json:"pageSize"`
  DefaultImagePermissions *ImagePermissions `thrift:"defaultImagePermissions,2" db:"defaultImagePermissions" json:"defaultImagePermissions"`
  DefaultLecturePermissions *LecturePermissions `thrift:"defaultLecturePermissions,3" db:"defaultLecturePermissions" json:"defaultLecturePermissions"`
  MaxImageValidityDays int32 `thrift:"maxImageValidityDays,4" db:"maxImageValidityDays" json:"maxImageValidityDays"`
  MaxLectureValidityDays int32 `thrift:"maxLectureValidityDays,5" db:"maxLectureValidityDays" json:"maxLectureValidityDays"`
  MaxTransfers *int32 `thrift:"maxTransfers,6" db:"maxTransfers" json:"maxTransfers,omitempty"`
  MaxConnectionsPerTransfer *int32 `thrift:"maxConnectionsPerTransfer,7" db:"maxConnectionsPerTransfer" json:"maxConnectionsPerTransfer,omitempty"`
  MaxLocationsPerLecture *int32 `thrift:"maxLocationsPerLecture,8" db:"maxLocationsPerLecture" json:"maxLocationsPerLecture,omitempty"`
  AllowLoginByDefault *bool `thrift:"allowLoginByDefault,9" db:"allowLoginByDefault" json:"allowLoginByDefault,omitempty"`
}

func NewSatelliteConfig() *SatelliteConfig {
  return &SatelliteConfig{}
}


func (p *SatelliteConfig) GetPageSize() int32 {
  return p.PageSize
}
var SatelliteConfig_DefaultImagePermissions_DEFAULT *ImagePermissions
func (p *SatelliteConfig) GetDefaultImagePermissions() *ImagePermissions {
  if !p.IsSetDefaultImagePermissions() {
    return SatelliteConfig_DefaultImagePermissions_DEFAULT
  }
return p.DefaultImagePermissions
}
var SatelliteConfig_DefaultLecturePermissions_DEFAULT *LecturePermissions
func (p *SatelliteConfig) GetDefaultLecturePermissions() *LecturePermissions {
  if !p.IsSetDefaultLecturePermissions() {
    return SatelliteConfig_DefaultLecturePermissions_DEFAULT
  }
return p.DefaultLecturePermissions
}

func (p *SatelliteConfig) GetMaxImageValidityDays() int32 {
  return p.MaxImageValidityDays
}

func (p *SatelliteConfig) GetMaxLectureValidityDays() int32 {
  return p.MaxLectureValidityDays
}
var SatelliteConfig_MaxTransfers_DEFAULT int32
func (p *SatelliteConfig) GetMaxTransfers() int32 {
  if !p.IsSetMaxTransfers() {
    return SatelliteConfig_MaxTransfers_DEFAULT
  }
return *p.MaxTransfers
}
var SatelliteConfig_MaxConnectionsPerTransfer_DEFAULT int32
func (p *SatelliteConfig) GetMaxConnectionsPerTransfer() int32 {
  if !p.IsSetMaxConnectionsPerTransfer() {
    return SatelliteConfig_MaxConnectionsPerTransfer_DEFAULT
  }
return *p.MaxConnectionsPerTransfer
}
var SatelliteConfig_MaxLocationsPerLecture_DEFAULT int32
func (p *SatelliteConfig) GetMaxLocationsPerLecture() int32 {
  if !p.IsSetMaxLocationsPerLecture() {
    return SatelliteConfig_MaxLocationsPerLecture_DEFAULT
  }
return *p.MaxLocationsPerLecture
}
var SatelliteConfig_AllowLoginByDefault_DEFAULT bool
func (p *SatelliteConfig) GetAllowLoginByDefault() bool {
  if !p.IsSetAllowLoginByDefault() {
    return SatelliteConfig_AllowLoginByDefault_DEFAULT
  }
return *p.AllowLoginByDefault
}
func (p *SatelliteConfig) IsSetDefaultImagePermissions() bool {
  return p.DefaultImagePermissions != nil
}

func (p *SatelliteConfig) IsSetDefaultLecturePermissions() bool {
  return p.DefaultLecturePermissions != nil
}

func (p *SatelliteConfig) IsSetMaxTransfers() bool {
  return p.MaxTransfers != nil
}

func (p *SatelliteConfig) IsSetMaxConnectionsPerTransfer() bool {
  return p.MaxConnectionsPerTransfer != nil
}

func (p *SatelliteConfig) IsSetMaxLocationsPerLecture() bool {
  return p.MaxLocationsPerLecture != nil
}

func (p *SatelliteConfig) IsSetAllowLoginByDefault() bool {
  return p.AllowLoginByDefault != nil
}

func (p *SatelliteConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *SatelliteConfig)  ReadField2(iprot thrift.TProtocol) error {
  p.DefaultImagePermissions = &ImagePermissions{}
  if err := p.DefaultImagePermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DefaultImagePermissions), err)
  }
  return nil
}

func (p *SatelliteConfig)  ReadField3(iprot thrift.TProtocol) error {
  p.DefaultLecturePermissions = &LecturePermissions{}
  if err := p.DefaultLecturePermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DefaultLecturePermissions), err)
  }
  return nil
}

func (p *SatelliteConfig)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxImageValidityDays = v
}
  return nil
}

func (p *SatelliteConfig)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxLectureValidityDays = v
}
  return nil
}

func (p *SatelliteConfig)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxTransfers = &v
}
  return nil
}

func (p *SatelliteConfig)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MaxConnectionsPerTransfer = &v
}
  return nil
}

func (p *SatelliteConfig)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MaxLocationsPerLecture = &v
}
  return nil
}

func (p *SatelliteConfig)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.AllowLoginByDefault = &v
}
  return nil
}

func (p *SatelliteConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SatelliteConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pageSize: ", p), err) }
  return err
}

func (p *SatelliteConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("defaultImagePermissions", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:defaultImagePermissions: ", p), err) }
  if err := p.DefaultImagePermissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DefaultImagePermissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:defaultImagePermissions: ", p), err) }
  return err
}

func (p *SatelliteConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("defaultLecturePermissions", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:defaultLecturePermissions: ", p), err) }
  if err := p.DefaultLecturePermissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DefaultLecturePermissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:defaultLecturePermissions: ", p), err) }
  return err
}

func (p *SatelliteConfig) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxImageValidityDays", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxImageValidityDays: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxImageValidityDays)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxImageValidityDays (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxImageValidityDays: ", p), err) }
  return err
}

func (p *SatelliteConfig) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxLectureValidityDays", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxLectureValidityDays: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxLectureValidityDays)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxLectureValidityDays (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxLectureValidityDays: ", p), err) }
  return err
}

func (p *SatelliteConfig) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxTransfers() {
    if err := oprot.WriteFieldBegin("maxTransfers", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:maxTransfers: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxTransfers)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxTransfers (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:maxTransfers: ", p), err) }
  }
  return err
}

func (p *SatelliteConfig) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxConnectionsPerTransfer() {
    if err := oprot.WriteFieldBegin("maxConnectionsPerTransfer", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:maxConnectionsPerTransfer: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxConnectionsPerTransfer)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxConnectionsPerTransfer (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:maxConnectionsPerTransfer: ", p), err) }
  }
  return err
}

func (p *SatelliteConfig) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxLocationsPerLecture() {
    if err := oprot.WriteFieldBegin("maxLocationsPerLecture", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:maxLocationsPerLecture: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxLocationsPerLecture)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxLocationsPerLecture (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:maxLocationsPerLecture: ", p), err) }
  }
  return err
}

func (p *SatelliteConfig) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetAllowLoginByDefault() {
    if err := oprot.WriteFieldBegin("allowLoginByDefault", thrift.BOOL, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:allowLoginByDefault: ", p), err) }
    if err := oprot.WriteBool(bool(*p.AllowLoginByDefault)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.allowLoginByDefault (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:allowLoginByDefault: ", p), err) }
  }
  return err
}

func (p *SatelliteConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteConfig(%+v)", *p)
}

// Attributes:
//  - AvailableStorageBytes
//  - ServerTime
type SatelliteStatus struct {
  AvailableStorageBytes int64 `thrift:"availableStorageBytes,1" db:"availableStorageBytes" json:"availableStorageBytes"`
  ServerTime UnixTimestamp `thrift:"serverTime,2" db:"serverTime" json:"serverTime"`
}

func NewSatelliteStatus() *SatelliteStatus {
  return &SatelliteStatus{}
}


func (p *SatelliteStatus) GetAvailableStorageBytes() int64 {
  return p.AvailableStorageBytes
}

func (p *SatelliteStatus) GetServerTime() UnixTimestamp {
  return p.ServerTime
}
func (p *SatelliteStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AvailableStorageBytes = v
}
  return nil
}

func (p *SatelliteStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UnixTimestamp(v)
  p.ServerTime = temp
}
  return nil
}

func (p *SatelliteStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SatelliteStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("availableStorageBytes", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:availableStorageBytes: ", p), err) }
  if err := oprot.WriteI64(int64(p.AvailableStorageBytes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.availableStorageBytes (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:availableStorageBytes: ", p), err) }
  return err
}

func (p *SatelliteStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serverTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serverTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ServerTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serverTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serverTime: ", p), err) }
  return err
}

func (p *SatelliteStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteStatus(%+v)", *p)
}

// Attributes:
//  - EmailNotifications
type SatelliteUserConfig struct {
  EmailNotifications bool `thrift:"emailNotifications,1" db:"emailNotifications" json:"emailNotifications"`
}

func NewSatelliteUserConfig() *SatelliteUserConfig {
  return &SatelliteUserConfig{}
}


func (p *SatelliteUserConfig) GetEmailNotifications() bool {
  return p.EmailNotifications
}
func (p *SatelliteUserConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteUserConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EmailNotifications = v
}
  return nil
}

func (p *SatelliteUserConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SatelliteUserConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteUserConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("emailNotifications", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:emailNotifications: ", p), err) }
  if err := oprot.WriteBool(bool(p.EmailNotifications)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.emailNotifications (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:emailNotifications: ", p), err) }
  return err
}

func (p *SatelliteUserConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteUserConfig(%+v)", *p)
}

// Attributes:
//  - LocationId
//  - LocationName
//  - ParentLocationId
type Location struct {
  LocationId int32 `thrift:"locationId,1" db:"locationId" json:"locationId"`
  LocationName string `thrift:"locationName,2" db:"locationName" json:"locationName"`
  ParentLocationId int32 `thrift:"parentLocationId,3" db:"parentLocationId" json:"parentLocationId"`
}

func NewLocation() *Location {
  return &Location{}
}


func (p *Location) GetLocationId() int32 {
  return p.LocationId
}

func (p *Location) GetLocationName() string {
  return p.LocationName
}

func (p *Location) GetParentLocationId() int32 {
  return p.ParentLocationId
}
func (p *Location) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Location)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LocationId = v
}
  return nil
}

func (p *Location)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LocationName = v
}
  return nil
}

func (p *Location)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ParentLocationId = v
}
  return nil
}

func (p *Location) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Location"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Location) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locationId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:locationId: ", p), err) }
  if err := oprot.WriteI32(int32(p.LocationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locationId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:locationId: ", p), err) }
  return err
}

func (p *Location) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locationName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:locationName: ", p), err) }
  if err := oprot.WriteString(string(p.LocationName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locationName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:locationName: ", p), err) }
  return err
}

func (p *Location) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parentLocationId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parentLocationId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ParentLocationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parentLocationId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parentLocationId: ", p), err) }
  return err
}

func (p *Location) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Location(%+v)", *p)
}

// Attributes:
//  - Message
type TTransferRejectedException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewTTransferRejectedException() *TTransferRejectedException {
  return &TTransferRejectedException{}
}


func (p *TTransferRejectedException) GetMessage() string {
  return p.Message
}
func (p *TTransferRejectedException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTransferRejectedException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TTransferRejectedException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTransferRejectedException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTransferRejectedException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *TTransferRejectedException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTransferRejectedException(%+v)", *p)
}

func (p *TTransferRejectedException) Error() string {
  return p.String()
}

// Attributes:
//  - Number
//  - Message
type TAuthorizationException struct {
  Number AuthorizationError `thrift:"number,1" db:"number" json:"number"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewTAuthorizationException() *TAuthorizationException {
  return &TAuthorizationException{}
}


func (p *TAuthorizationException) GetNumber() AuthorizationError {
  return p.Number
}

func (p *TAuthorizationException) GetMessage() string {
  return p.Message
}
func (p *TAuthorizationException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAuthorizationException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AuthorizationError(v)
  p.Number = temp
}
  return nil
}

func (p *TAuthorizationException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TAuthorizationException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAuthorizationException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAuthorizationException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("number", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:number: ", p), err) }
  if err := oprot.WriteI32(int32(p.Number)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.number (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:number: ", p), err) }
  return err
}

func (p *TAuthorizationException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *TAuthorizationException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAuthorizationException(%+v)", *p)
}

func (p *TAuthorizationException) Error() string {
  return p.String()
}

type TInvalidTokenException struct {
}

func NewTInvalidTokenException() *TInvalidTokenException {
  return &TInvalidTokenException{}
}

func (p *TInvalidTokenException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TInvalidTokenException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TInvalidTokenException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TInvalidTokenException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TInvalidTokenException(%+v)", *p)
}

func (p *TInvalidTokenException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type TNotFoundException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewTNotFoundException() *TNotFoundException {
  return &TNotFoundException{}
}


func (p *TNotFoundException) GetMessage() string {
  return p.Message
}
func (p *TNotFoundException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TNotFoundException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TNotFoundException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TNotFoundException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TNotFoundException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *TNotFoundException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TNotFoundException(%+v)", *p)
}

func (p *TNotFoundException) Error() string {
  return p.String()
}

// Attributes:
//  - Number
//  - Message
type TInvalidDateParam struct {
  Number DateParamError `thrift:"number,1" db:"number" json:"number"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewTInvalidDateParam() *TInvalidDateParam {
  return &TInvalidDateParam{}
}


func (p *TInvalidDateParam) GetNumber() DateParamError {
  return p.Number
}

func (p *TInvalidDateParam) GetMessage() string {
  return p.Message
}
func (p *TInvalidDateParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TInvalidDateParam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := DateParamError(v)
  p.Number = temp
}
  return nil
}

func (p *TInvalidDateParam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TInvalidDateParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TInvalidDateParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TInvalidDateParam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("number", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:number: ", p), err) }
  if err := oprot.WriteI32(int32(p.Number)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.number (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:number: ", p), err) }
  return err
}

func (p *TInvalidDateParam) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *TInvalidDateParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TInvalidDateParam(%+v)", *p)
}

func (p *TInvalidDateParam) Error() string {
  return p.String()
}

// Attributes:
//  - Number
//  - Message
type TInvocationException struct {
  Number InvocationError `thrift:"number,1" db:"number" json:"number"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewTInvocationException() *TInvocationException {
  return &TInvocationException{}
}


func (p *TInvocationException) GetNumber() InvocationError {
  return p.Number
}

func (p *TInvocationException) GetMessage() string {
  return p.Message
}
func (p *TInvocationException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TInvocationException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := InvocationError(v)
  p.Number = temp
}
  return nil
}

func (p *TInvocationException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TInvocationException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TInvocationException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TInvocationException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("number", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:number: ", p), err) }
  if err := oprot.WriteI32(int32(p.Number)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.number (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:number: ", p), err) }
  return err
}

func (p *TInvocationException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *TInvocationException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TInvocationException(%+v)", *p)
}

func (p *TInvocationException) Error() string {
  return p.String()
}

type SatelliteServer interface {
  // Parameters:
  //  - ClientVersion
  GetVersion(clientVersion Int) (r Int, err error)
  GetSupportedFeatures() (r string, err error)
  GetConfiguration() (r *SatelliteConfig, err error)
  // Parameters:
  //  - UserToken
  //  - ImageBaseId
  //  - FileSize
  //  - BlockHashes
  //  - MachineDescription
  RequestImageVersionUpload(userToken Token, imageBaseId UUID, fileSize int64, blockHashes [][]byte, machineDescription []byte) (r *TransferInformation, err error)
  // Parameters:
  //  - UploadToken
  //  - BlockHashes
  UpdateBlockHashes(uploadToken Token, blockHashes [][]byte) (err error)
  // Parameters:
  //  - UploadToken
  CancelUpload(uploadToken Token) (err error)
  // Parameters:
  //  - UploadToken
  QueryUploadStatus(uploadToken Token) (r *TransferStatus, err error)
  // Parameters:
  //  - UserToken
  //  - ImageVersionId
  RequestDownload(userToken Token, imageVersionId UUID) (r *TransferInformation, err error)
  // Parameters:
  //  - DownloadToken
  CancelDownload(downloadToken string) (err error)
  // Parameters:
  //  - UserToken
  IsAuthenticated(userToken Token) (err error)
  // Parameters:
  //  - UserToken
  Whoami(userToken Token) (r *WhoamiInfo, err error)
  // Parameters:
  //  - UserToken
  InvalidateSession(userToken Token) (err error)
  // Parameters:
  //  - UserToken
  //  - Page
  GetUserList(userToken Token, page int32) (r []*UserInfo, err error)
  // Parameters:
  //  - UserToken
  GetUserConfig(userToken Token) (r *SatelliteUserConfig, err error)
  // Parameters:
  //  - UserToken
  //  - Config
  SetUserConfig(userToken Token, config *SatelliteUserConfig) (err error)
  GetOperatingSystems() (r []*OperatingSystem, err error)
  GetVirtualizers() (r []*Virtualizer, err error)
  GetAllOrganizations() (r []*Organization, err error)
  GetLocations() (r []*Location, err error)
  GetStatus() (r *SatelliteStatus, err error)
  // Parameters:
  //  - UserToken
  //  - TagSearch
  //  - Page
  GetImageList(userToken Token, tagSearch []string, page int32) (r []*ImageSummaryRead, err error)
  // Parameters:
  //  - UserToken
  //  - ImageBaseId
  GetImageDetails(userToken Token, imageBaseId UUID) (r *ImageDetailsRead, err error)
  // Parameters:
  //  - UserToken
  //  - ImageName
  CreateImage(userToken Token, imageName string) (r UUID, err error)
  // Parameters:
  //  - UserToken
  //  - ImageBaseId
  //  - Image
  UpdateImageBase(userToken Token, imageBaseId UUID, image *ImageBaseWrite) (err error)
  // Parameters:
  //  - UserToken
  //  - ImageVersionId
  //  - Image
  UpdateImageVersion(userToken Token, imageVersionId UUID, image *ImageVersionWrite) (err error)
  // Parameters:
  //  - UserToken
  //  - ImageVersionId
  DeleteImageVersion(userToken Token, imageVersionId UUID) (err error)
  // Parameters:
  //  - UserToken
  //  - ImageBaseId
  DeleteImageBase(userToken Token, imageBaseId UUID) (err error)
  // Parameters:
  //  - UserToken
  //  - ImageBaseId
  //  - Permissions
  WriteImagePermissions(userToken Token, imageBaseId UUID, permissions map[UUID]*ImagePermissions) (err error)
  // Parameters:
  //  - UserToken
  //  - ImageBaseId
  GetImagePermissions(userToken Token, imageBaseId UUID) (r map[UUID]*ImagePermissions, err error)
  // Parameters:
  //  - UserToken
  //  - ImageBaseId
  //  - NewOwnerId_
  SetImageOwner(userToken Token, imageBaseId UUID, newOwnerId UUID) (err error)
  // Parameters:
  //  - UserToken
  //  - ImageBaseId
  //  - ExpireTime
  SetImageVersionExpiry(userToken Token, imageBaseId UUID, expireTime UnixTimestamp) (err error)
  // Parameters:
  //  - UserToken
  //  - ImageVersionId
  GetImageVersionVirtConfig(userToken Token, imageVersionId UUID) (r []byte, err error)
  // Parameters:
  //  - UserToken
  //  - ImageVersionId
  //  - Meta
  SetImageVersionVirtConfig(userToken Token, imageVersionId UUID, meta []byte) (err error)
  // Parameters:
  //  - UserToken
  //  - ImageVersionId
  RequestImageReplication(userToken Token, imageVersionId UUID) (r UUID, err error)
  // Parameters:
  //  - UserToken
  //  - ImageVersionId
  PublishImageVersion(userToken Token, imageVersionId UUID) (r UUID, err error)
  // Parameters:
  //  - UserToken
  //  - Lecture
  CreateLecture(userToken Token, lecture *LectureWrite) (r UUID, err error)
  // Parameters:
  //  - UserToken
  //  - LectureId
  //  - Lecture
  UpdateLecture(userToken Token, lectureId UUID, lecture *LectureWrite) (err error)
  // Parameters:
  //  - UserToken
  //  - Page
  GetLectureList(userToken Token, page int32) (r []*LectureSummary, err error)
  // Parameters:
  //  - UserToken
  //  - LectureId
  GetLectureDetails(userToken Token, lectureId UUID) (r *LectureRead, err error)
  // Parameters:
  //  - UserToken
  //  - LectureId
  DeleteLecture(userToken Token, lectureId UUID) (err error)
  // Parameters:
  //  - UserToken
  //  - LectureId
  //  - Permissions
  WriteLecturePermissions(userToken Token, lectureId UUID, permissions map[UUID]*LecturePermissions) (err error)
  // Parameters:
  //  - UserToken
  //  - LectureId
  GetLecturePermissions(userToken Token, lectureId UUID) (r map[UUID]*LecturePermissions, err error)
  // Parameters:
  //  - UserToken
  //  - LectureId
  //  - NewOwnerId_
  SetLectureOwner(userToken Token, lectureId UUID, newOwnerId UUID) (err error)
}

type SatelliteServerClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewSatelliteServerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SatelliteServerClient {
  return &SatelliteServerClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewSatelliteServerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SatelliteServerClient {
  return &SatelliteServerClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - ClientVersion
func (p *SatelliteServerClient) GetVersion(clientVersion Int) (r Int, err error) {
  if err = p.sendGetVersion(clientVersion); err != nil { return }
  return p.recvGetVersion()
}

func (p *SatelliteServerClient) sendGetVersion(clientVersion Int)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getVersion", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetVersionArgs{
  ClientVersion : clientVersion,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetVersion() (value Int, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getVersion" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getVersion failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getVersion failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error23 error
    error23, err = error22.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error23
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getVersion failed: invalid message type")
    return
  }
  result := SatelliteServerGetVersionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *SatelliteServerClient) GetSupportedFeatures() (r string, err error) {
  if err = p.sendGetSupportedFeatures(); err != nil { return }
  return p.recvGetSupportedFeatures()
}

func (p *SatelliteServerClient) sendGetSupportedFeatures()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSupportedFeatures", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetSupportedFeaturesArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetSupportedFeatures() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSupportedFeatures" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSupportedFeatures failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSupportedFeatures failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error25 error
    error25, err = error24.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error25
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSupportedFeatures failed: invalid message type")
    return
  }
  result := SatelliteServerGetSupportedFeaturesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *SatelliteServerClient) GetConfiguration() (r *SatelliteConfig, err error) {
  if err = p.sendGetConfiguration(); err != nil { return }
  return p.recvGetConfiguration()
}

func (p *SatelliteServerClient) sendGetConfiguration()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getConfiguration", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetConfigurationArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetConfiguration() (value *SatelliteConfig, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getConfiguration" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getConfiguration failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getConfiguration failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error27 error
    error27, err = error26.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error27
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getConfiguration failed: invalid message type")
    return
  }
  result := SatelliteServerGetConfigurationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - ImageBaseId
//  - FileSize
//  - BlockHashes
//  - MachineDescription
func (p *SatelliteServerClient) RequestImageVersionUpload(userToken Token, imageBaseId UUID, fileSize int64, blockHashes [][]byte, machineDescription []byte) (r *TransferInformation, err error) {
  if err = p.sendRequestImageVersionUpload(userToken, imageBaseId, fileSize, blockHashes, machineDescription); err != nil { return }
  return p.recvRequestImageVersionUpload()
}

func (p *SatelliteServerClient) sendRequestImageVersionUpload(userToken Token, imageBaseId UUID, fileSize int64, blockHashes [][]byte, machineDescription []byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("requestImageVersionUpload", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerRequestImageVersionUploadArgs{
  UserToken : userToken,
  ImageBaseId : imageBaseId,
  FileSize : fileSize,
  BlockHashes : blockHashes,
  MachineDescription : machineDescription,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvRequestImageVersionUpload() (value *TransferInformation, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "requestImageVersionUpload" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "requestImageVersionUpload failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "requestImageVersionUpload failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error29 error
    error29, err = error28.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error29
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "requestImageVersionUpload failed: invalid message type")
    return
  }
  result := SatelliteServerRequestImageVersionUploadResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Rejection != nil {
    err = result.Rejection
    return 
  } else   if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.Ffff != nil {
    err = result.Ffff
    return 
  } else   if result.Sdf != nil {
    err = result.Sdf
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UploadToken
//  - BlockHashes
func (p *SatelliteServerClient) UpdateBlockHashes(uploadToken Token, blockHashes [][]byte) (err error) {
  if err = p.sendUpdateBlockHashes(uploadToken, blockHashes); err != nil { return }
  return p.recvUpdateBlockHashes()
}

func (p *SatelliteServerClient) sendUpdateBlockHashes(uploadToken Token, blockHashes [][]byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateBlockHashes", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerUpdateBlockHashesArgs{
  UploadToken : uploadToken,
  BlockHashes : blockHashes,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvUpdateBlockHashes() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateBlockHashes" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateBlockHashes failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateBlockHashes failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error31 error
    error31, err = error30.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error31
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateBlockHashes failed: invalid message type")
    return
  }
  result := SatelliteServerUpdateBlockHashesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex1 != nil {
    err = result.Ex1
    return 
  }
  return
}

// Parameters:
//  - UploadToken
func (p *SatelliteServerClient) CancelUpload(uploadToken Token) (err error) {
  if err = p.sendCancelUpload(uploadToken); err != nil { return }
  return p.recvCancelUpload()
}

func (p *SatelliteServerClient) sendCancelUpload(uploadToken Token)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("cancelUpload", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerCancelUploadArgs{
  UploadToken : uploadToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvCancelUpload() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "cancelUpload" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "cancelUpload failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cancelUpload failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error33 error
    error33, err = error32.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error33
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "cancelUpload failed: invalid message type")
    return
  }
  result := SatelliteServerCancelUploadResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex1 != nil {
    err = result.Ex1
    return 
  }
  return
}

// Parameters:
//  - UploadToken
func (p *SatelliteServerClient) QueryUploadStatus(uploadToken Token) (r *TransferStatus, err error) {
  if err = p.sendQueryUploadStatus(uploadToken); err != nil { return }
  return p.recvQueryUploadStatus()
}

func (p *SatelliteServerClient) sendQueryUploadStatus(uploadToken Token)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("queryUploadStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerQueryUploadStatusArgs{
  UploadToken : uploadToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvQueryUploadStatus() (value *TransferStatus, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "queryUploadStatus" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "queryUploadStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryUploadStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error35 error
    error35, err = error34.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error35
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "queryUploadStatus failed: invalid message type")
    return
  }
  result := SatelliteServerQueryUploadStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex1 != nil {
    err = result.Ex1
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - ImageVersionId
func (p *SatelliteServerClient) RequestDownload(userToken Token, imageVersionId UUID) (r *TransferInformation, err error) {
  if err = p.sendRequestDownload(userToken, imageVersionId); err != nil { return }
  return p.recvRequestDownload()
}

func (p *SatelliteServerClient) sendRequestDownload(userToken Token, imageVersionId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("requestDownload", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerRequestDownloadArgs{
  UserToken : userToken,
  ImageVersionId : imageVersionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvRequestDownload() (value *TransferInformation, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "requestDownload" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "requestDownload failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "requestDownload failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error37 error
    error37, err = error36.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error37
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "requestDownload failed: invalid message type")
    return
  }
  result := SatelliteServerRequestDownloadResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Rejection != nil {
    err = result.Rejection
    return 
  } else   if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.Ffff != nil {
    err = result.Ffff
    return 
  } else   if result.Sdf != nil {
    err = result.Sdf
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - DownloadToken
func (p *SatelliteServerClient) CancelDownload(downloadToken string) (err error) {
  if err = p.sendCancelDownload(downloadToken); err != nil { return }
  return p.recvCancelDownload()
}

func (p *SatelliteServerClient) sendCancelDownload(downloadToken string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("cancelDownload", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerCancelDownloadArgs{
  DownloadToken : downloadToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvCancelDownload() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "cancelDownload" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "cancelDownload failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cancelDownload failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error39 error
    error39, err = error38.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error39
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "cancelDownload failed: invalid message type")
    return
  }
  result := SatelliteServerCancelDownloadResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex1 != nil {
    err = result.Ex1
    return 
  }
  return
}

// Parameters:
//  - UserToken
func (p *SatelliteServerClient) IsAuthenticated(userToken Token) (err error) {
  if err = p.sendIsAuthenticated(userToken); err != nil { return }
  return p.recvIsAuthenticated()
}

func (p *SatelliteServerClient) sendIsAuthenticated(userToken Token)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("isAuthenticated", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerIsAuthenticatedArgs{
  UserToken : userToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvIsAuthenticated() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "isAuthenticated" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "isAuthenticated failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isAuthenticated failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error41 error
    error41, err = error40.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error41
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "isAuthenticated failed: invalid message type")
    return
  }
  result := SatelliteServerIsAuthenticatedResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  return
}

// Parameters:
//  - UserToken
func (p *SatelliteServerClient) Whoami(userToken Token) (r *WhoamiInfo, err error) {
  if err = p.sendWhoami(userToken); err != nil { return }
  return p.recvWhoami()
}

func (p *SatelliteServerClient) sendWhoami(userToken Token)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("whoami", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerWhoamiArgs{
  UserToken : userToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvWhoami() (value *WhoamiInfo, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "whoami" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "whoami failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "whoami failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error43 error
    error43, err = error42.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error43
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "whoami failed: invalid message type")
    return
  }
  result := SatelliteServerWhoamiResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
func (p *SatelliteServerClient) InvalidateSession(userToken Token) (err error) {
  if err = p.sendInvalidateSession(userToken); err != nil { return }
  return p.recvInvalidateSession()
}

func (p *SatelliteServerClient) sendInvalidateSession(userToken Token)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("invalidateSession", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerInvalidateSessionArgs{
  UserToken : userToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvInvalidateSession() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "invalidateSession" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "invalidateSession failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "invalidateSession failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error45 error
    error45, err = error44.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error45
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "invalidateSession failed: invalid message type")
    return
  }
  result := SatelliteServerInvalidateSessionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  return
}

// Parameters:
//  - UserToken
//  - Page
func (p *SatelliteServerClient) GetUserList(userToken Token, page int32) (r []*UserInfo, err error) {
  if err = p.sendGetUserList(userToken, page); err != nil { return }
  return p.recvGetUserList()
}

func (p *SatelliteServerClient) sendGetUserList(userToken Token, page int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserList", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetUserListArgs{
  UserToken : userToken,
  Page : page,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetUserList() (value []*UserInfo, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserList" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserList failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserList failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error47 error
    error47, err = error46.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error47
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserList failed: invalid message type")
    return
  }
  result := SatelliteServerGetUserListResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
func (p *SatelliteServerClient) GetUserConfig(userToken Token) (r *SatelliteUserConfig, err error) {
  if err = p.sendGetUserConfig(userToken); err != nil { return }
  return p.recvGetUserConfig()
}

func (p *SatelliteServerClient) sendGetUserConfig(userToken Token)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetUserConfigArgs{
  UserToken : userToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetUserConfig() (value *SatelliteUserConfig, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserConfig" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error49 error
    error49, err = error48.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error49
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserConfig failed: invalid message type")
    return
  }
  result := SatelliteServerGetUserConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - Config
func (p *SatelliteServerClient) SetUserConfig(userToken Token, config *SatelliteUserConfig) (err error) {
  if err = p.sendSetUserConfig(userToken, config); err != nil { return }
  return p.recvSetUserConfig()
}

func (p *SatelliteServerClient) sendSetUserConfig(userToken Token, config *SatelliteUserConfig)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setUserConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerSetUserConfigArgs{
  UserToken : userToken,
  Config : config,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvSetUserConfig() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setUserConfig" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setUserConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setUserConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error51 error
    error51, err = error50.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error51
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setUserConfig failed: invalid message type")
    return
  }
  result := SatelliteServerSetUserConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  return
}

func (p *SatelliteServerClient) GetOperatingSystems() (r []*OperatingSystem, err error) {
  if err = p.sendGetOperatingSystems(); err != nil { return }
  return p.recvGetOperatingSystems()
}

func (p *SatelliteServerClient) sendGetOperatingSystems()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getOperatingSystems", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetOperatingSystemsArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetOperatingSystems() (value []*OperatingSystem, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getOperatingSystems" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getOperatingSystems failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getOperatingSystems failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error53 error
    error53, err = error52.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error53
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getOperatingSystems failed: invalid message type")
    return
  }
  result := SatelliteServerGetOperatingSystemsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *SatelliteServerClient) GetVirtualizers() (r []*Virtualizer, err error) {
  if err = p.sendGetVirtualizers(); err != nil { return }
  return p.recvGetVirtualizers()
}

func (p *SatelliteServerClient) sendGetVirtualizers()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getVirtualizers", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetVirtualizersArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetVirtualizers() (value []*Virtualizer, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getVirtualizers" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getVirtualizers failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getVirtualizers failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error55 error
    error55, err = error54.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error55
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getVirtualizers failed: invalid message type")
    return
  }
  result := SatelliteServerGetVirtualizersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *SatelliteServerClient) GetAllOrganizations() (r []*Organization, err error) {
  if err = p.sendGetAllOrganizations(); err != nil { return }
  return p.recvGetAllOrganizations()
}

func (p *SatelliteServerClient) sendGetAllOrganizations()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllOrganizations", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetAllOrganizationsArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetAllOrganizations() (value []*Organization, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllOrganizations" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllOrganizations failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllOrganizations failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error57 error
    error57, err = error56.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error57
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllOrganizations failed: invalid message type")
    return
  }
  result := SatelliteServerGetAllOrganizationsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *SatelliteServerClient) GetLocations() (r []*Location, err error) {
  if err = p.sendGetLocations(); err != nil { return }
  return p.recvGetLocations()
}

func (p *SatelliteServerClient) sendGetLocations()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getLocations", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetLocationsArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetLocations() (value []*Location, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getLocations" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLocations failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLocations failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error59 error
    error59, err = error58.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error59
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLocations failed: invalid message type")
    return
  }
  result := SatelliteServerGetLocationsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *SatelliteServerClient) GetStatus() (r *SatelliteStatus, err error) {
  if err = p.sendGetStatus(); err != nil { return }
  return p.recvGetStatus()
}

func (p *SatelliteServerClient) sendGetStatus()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetStatusArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetStatus() (value *SatelliteStatus, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getStatus" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error61 error
    error61, err = error60.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error61
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getStatus failed: invalid message type")
    return
  }
  result := SatelliteServerGetStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - TagSearch
//  - Page
func (p *SatelliteServerClient) GetImageList(userToken Token, tagSearch []string, page int32) (r []*ImageSummaryRead, err error) {
  if err = p.sendGetImageList(userToken, tagSearch, page); err != nil { return }
  return p.recvGetImageList()
}

func (p *SatelliteServerClient) sendGetImageList(userToken Token, tagSearch []string, page int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getImageList", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetImageListArgs{
  UserToken : userToken,
  TagSearch : tagSearch,
  Page : page,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetImageList() (value []*ImageSummaryRead, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getImageList" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getImageList failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getImageList failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error63 error
    error63, err = error62.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error63
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getImageList failed: invalid message type")
    return
  }
  result := SatelliteServerGetImageListResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - ImageBaseId
func (p *SatelliteServerClient) GetImageDetails(userToken Token, imageBaseId UUID) (r *ImageDetailsRead, err error) {
  if err = p.sendGetImageDetails(userToken, imageBaseId); err != nil { return }
  return p.recvGetImageDetails()
}

func (p *SatelliteServerClient) sendGetImageDetails(userToken Token, imageBaseId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getImageDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetImageDetailsArgs{
  UserToken : userToken,
  ImageBaseId : imageBaseId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetImageDetails() (value *ImageDetailsRead, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getImageDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getImageDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getImageDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error65 error
    error65, err = error64.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error65
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getImageDetails failed: invalid message type")
    return
  }
  result := SatelliteServerGetImageDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - ImageName
func (p *SatelliteServerClient) CreateImage(userToken Token, imageName string) (r UUID, err error) {
  if err = p.sendCreateImage(userToken, imageName); err != nil { return }
  return p.recvCreateImage()
}

func (p *SatelliteServerClient) sendCreateImage(userToken Token, imageName string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createImage", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerCreateImageArgs{
  UserToken : userToken,
  ImageName : imageName,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvCreateImage() (value UUID, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createImage" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createImage failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createImage failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error66 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error67 error
    error67, err = error66.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error67
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createImage failed: invalid message type")
    return
  }
  result := SatelliteServerCreateImageResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.Error != nil {
    err = result.Error
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - ImageBaseId
//  - Image
func (p *SatelliteServerClient) UpdateImageBase(userToken Token, imageBaseId UUID, image *ImageBaseWrite) (err error) {
  if err = p.sendUpdateImageBase(userToken, imageBaseId, image); err != nil { return }
  return p.recvUpdateImageBase()
}

func (p *SatelliteServerClient) sendUpdateImageBase(userToken Token, imageBaseId UUID, image *ImageBaseWrite)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateImageBase", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerUpdateImageBaseArgs{
  UserToken : userToken,
  ImageBaseId : imageBaseId,
  Image : image,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvUpdateImageBase() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateImageBase" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateImageBase failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateImageBase failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error68 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error69 error
    error69, err = error68.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error69
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateImageBase failed: invalid message type")
    return
  }
  result := SatelliteServerUpdateImageBaseResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ImgError != nil {
    err = result.ImgError
    return 
  }
  return
}

// Parameters:
//  - UserToken
//  - ImageVersionId
//  - Image
func (p *SatelliteServerClient) UpdateImageVersion(userToken Token, imageVersionId UUID, image *ImageVersionWrite) (err error) {
  if err = p.sendUpdateImageVersion(userToken, imageVersionId, image); err != nil { return }
  return p.recvUpdateImageVersion()
}

func (p *SatelliteServerClient) sendUpdateImageVersion(userToken Token, imageVersionId UUID, image *ImageVersionWrite)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateImageVersion", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerUpdateImageVersionArgs{
  UserToken : userToken,
  ImageVersionId : imageVersionId,
  Image : image,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvUpdateImageVersion() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateImageVersion" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateImageVersion failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateImageVersion failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error70 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error71 error
    error71, err = error70.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error71
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateImageVersion failed: invalid message type")
    return
  }
  result := SatelliteServerUpdateImageVersionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ImgError != nil {
    err = result.ImgError
    return 
  }
  return
}

// Parameters:
//  - UserToken
//  - ImageVersionId
func (p *SatelliteServerClient) DeleteImageVersion(userToken Token, imageVersionId UUID) (err error) {
  if err = p.sendDeleteImageVersion(userToken, imageVersionId); err != nil { return }
  return p.recvDeleteImageVersion()
}

func (p *SatelliteServerClient) sendDeleteImageVersion(userToken Token, imageVersionId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteImageVersion", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerDeleteImageVersionArgs{
  UserToken : userToken,
  ImageVersionId : imageVersionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvDeleteImageVersion() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteImageVersion" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteImageVersion failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteImageVersion failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error72 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error73 error
    error73, err = error72.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error73
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteImageVersion failed: invalid message type")
    return
  }
  result := SatelliteServerDeleteImageVersionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  return
}

// Parameters:
//  - UserToken
//  - ImageBaseId
func (p *SatelliteServerClient) DeleteImageBase(userToken Token, imageBaseId UUID) (err error) {
  if err = p.sendDeleteImageBase(userToken, imageBaseId); err != nil { return }
  return p.recvDeleteImageBase()
}

func (p *SatelliteServerClient) sendDeleteImageBase(userToken Token, imageBaseId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteImageBase", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerDeleteImageBaseArgs{
  UserToken : userToken,
  ImageBaseId : imageBaseId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvDeleteImageBase() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteImageBase" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteImageBase failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteImageBase failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error74 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error75 error
    error75, err = error74.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error75
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteImageBase failed: invalid message type")
    return
  }
  result := SatelliteServerDeleteImageBaseResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  return
}

// Parameters:
//  - UserToken
//  - ImageBaseId
//  - Permissions
func (p *SatelliteServerClient) WriteImagePermissions(userToken Token, imageBaseId UUID, permissions map[UUID]*ImagePermissions) (err error) {
  if err = p.sendWriteImagePermissions(userToken, imageBaseId, permissions); err != nil { return }
  return p.recvWriteImagePermissions()
}

func (p *SatelliteServerClient) sendWriteImagePermissions(userToken Token, imageBaseId UUID, permissions map[UUID]*ImagePermissions)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("writeImagePermissions", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerWriteImagePermissionsArgs{
  UserToken : userToken,
  ImageBaseId : imageBaseId,
  Permissions : permissions,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvWriteImagePermissions() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "writeImagePermissions" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "writeImagePermissions failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "writeImagePermissions failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error76 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error77 error
    error77, err = error76.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error77
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "writeImagePermissions failed: invalid message type")
    return
  }
  result := SatelliteServerWriteImagePermissionsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  return
}

// Parameters:
//  - UserToken
//  - ImageBaseId
func (p *SatelliteServerClient) GetImagePermissions(userToken Token, imageBaseId UUID) (r map[UUID]*ImagePermissions, err error) {
  if err = p.sendGetImagePermissions(userToken, imageBaseId); err != nil { return }
  return p.recvGetImagePermissions()
}

func (p *SatelliteServerClient) sendGetImagePermissions(userToken Token, imageBaseId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getImagePermissions", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetImagePermissionsArgs{
  UserToken : userToken,
  ImageBaseId : imageBaseId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetImagePermissions() (value map[UUID]*ImagePermissions, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getImagePermissions" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getImagePermissions failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getImagePermissions failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error78 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error79 error
    error79, err = error78.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error79
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getImagePermissions failed: invalid message type")
    return
  }
  result := SatelliteServerGetImagePermissionsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - ImageBaseId
//  - NewOwnerId_
func (p *SatelliteServerClient) SetImageOwner(userToken Token, imageBaseId UUID, newOwnerId UUID) (err error) {
  if err = p.sendSetImageOwner(userToken, imageBaseId, newOwnerId); err != nil { return }
  return p.recvSetImageOwner()
}

func (p *SatelliteServerClient) sendSetImageOwner(userToken Token, imageBaseId UUID, newOwnerId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setImageOwner", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerSetImageOwnerArgs{
  UserToken : userToken,
  ImageBaseId : imageBaseId,
  NewOwnerId_ : newOwnerId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvSetImageOwner() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setImageOwner" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setImageOwner failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setImageOwner failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error80 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error81 error
    error81, err = error80.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error81
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setImageOwner failed: invalid message type")
    return
  }
  result := SatelliteServerSetImageOwnerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  return
}

// Parameters:
//  - UserToken
//  - ImageBaseId
//  - ExpireTime
func (p *SatelliteServerClient) SetImageVersionExpiry(userToken Token, imageBaseId UUID, expireTime UnixTimestamp) (err error) {
  if err = p.sendSetImageVersionExpiry(userToken, imageBaseId, expireTime); err != nil { return }
  return p.recvSetImageVersionExpiry()
}

func (p *SatelliteServerClient) sendSetImageVersionExpiry(userToken Token, imageBaseId UUID, expireTime UnixTimestamp)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setImageVersionExpiry", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerSetImageVersionExpiryArgs{
  UserToken : userToken,
  ImageBaseId : imageBaseId,
  ExpireTime : expireTime,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvSetImageVersionExpiry() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setImageVersionExpiry" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setImageVersionExpiry failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setImageVersionExpiry failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error82 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error83 error
    error83, err = error82.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error83
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setImageVersionExpiry failed: invalid message type")
    return
  }
  result := SatelliteServerSetImageVersionExpiryResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  } else   if result.DateError != nil {
    err = result.DateError
    return 
  }
  return
}

// Parameters:
//  - UserToken
//  - ImageVersionId
func (p *SatelliteServerClient) GetImageVersionVirtConfig(userToken Token, imageVersionId UUID) (r []byte, err error) {
  if err = p.sendGetImageVersionVirtConfig(userToken, imageVersionId); err != nil { return }
  return p.recvGetImageVersionVirtConfig()
}

func (p *SatelliteServerClient) sendGetImageVersionVirtConfig(userToken Token, imageVersionId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getImageVersionVirtConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetImageVersionVirtConfigArgs{
  UserToken : userToken,
  ImageVersionId : imageVersionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetImageVersionVirtConfig() (value []byte, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getImageVersionVirtConfig" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getImageVersionVirtConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getImageVersionVirtConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error84 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error85 error
    error85, err = error84.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error85
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getImageVersionVirtConfig failed: invalid message type")
    return
  }
  result := SatelliteServerGetImageVersionVirtConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - ImageVersionId
//  - Meta
func (p *SatelliteServerClient) SetImageVersionVirtConfig(userToken Token, imageVersionId UUID, meta []byte) (err error) {
  if err = p.sendSetImageVersionVirtConfig(userToken, imageVersionId, meta); err != nil { return }
  return p.recvSetImageVersionVirtConfig()
}

func (p *SatelliteServerClient) sendSetImageVersionVirtConfig(userToken Token, imageVersionId UUID, meta []byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setImageVersionVirtConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerSetImageVersionVirtConfigArgs{
  UserToken : userToken,
  ImageVersionId : imageVersionId,
  Meta : meta,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvSetImageVersionVirtConfig() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setImageVersionVirtConfig" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setImageVersionVirtConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setImageVersionVirtConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error86 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error87 error
    error87, err = error86.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error87
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setImageVersionVirtConfig failed: invalid message type")
    return
  }
  result := SatelliteServerSetImageVersionVirtConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  return
}

// Parameters:
//  - UserToken
//  - ImageVersionId
func (p *SatelliteServerClient) RequestImageReplication(userToken Token, imageVersionId UUID) (r UUID, err error) {
  if err = p.sendRequestImageReplication(userToken, imageVersionId); err != nil { return }
  return p.recvRequestImageReplication()
}

func (p *SatelliteServerClient) sendRequestImageReplication(userToken Token, imageVersionId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("requestImageReplication", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerRequestImageReplicationArgs{
  UserToken : userToken,
  ImageVersionId : imageVersionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvRequestImageReplication() (value UUID, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "requestImageReplication" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "requestImageReplication failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "requestImageReplication failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error88 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error89 error
    error89, err = error88.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error89
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "requestImageReplication failed: invalid message type")
    return
  }
  result := SatelliteServerRequestImageReplicationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - ImageVersionId
func (p *SatelliteServerClient) PublishImageVersion(userToken Token, imageVersionId UUID) (r UUID, err error) {
  if err = p.sendPublishImageVersion(userToken, imageVersionId); err != nil { return }
  return p.recvPublishImageVersion()
}

func (p *SatelliteServerClient) sendPublishImageVersion(userToken Token, imageVersionId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("publishImageVersion", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerPublishImageVersionArgs{
  UserToken : userToken,
  ImageVersionId : imageVersionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvPublishImageVersion() (value UUID, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "publishImageVersion" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "publishImageVersion failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "publishImageVersion failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error90 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error91 error
    error91, err = error90.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error91
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "publishImageVersion failed: invalid message type")
    return
  }
  result := SatelliteServerPublishImageVersionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  } else   if result.Tre != nil {
    err = result.Tre
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - Lecture
func (p *SatelliteServerClient) CreateLecture(userToken Token, lecture *LectureWrite) (r UUID, err error) {
  if err = p.sendCreateLecture(userToken, lecture); err != nil { return }
  return p.recvCreateLecture()
}

func (p *SatelliteServerClient) sendCreateLecture(userToken Token, lecture *LectureWrite)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createLecture", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerCreateLectureArgs{
  UserToken : userToken,
  Lecture : lecture,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvCreateLecture() (value UUID, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createLecture" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createLecture failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createLecture failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error92 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error93 error
    error93, err = error92.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error93
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createLecture failed: invalid message type")
    return
  }
  result := SatelliteServerCreateLectureResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  } else   if result.DateError != nil {
    err = result.DateError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - LectureId
//  - Lecture
func (p *SatelliteServerClient) UpdateLecture(userToken Token, lectureId UUID, lecture *LectureWrite) (err error) {
  if err = p.sendUpdateLecture(userToken, lectureId, lecture); err != nil { return }
  return p.recvUpdateLecture()
}

func (p *SatelliteServerClient) sendUpdateLecture(userToken Token, lectureId UUID, lecture *LectureWrite)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateLecture", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerUpdateLectureArgs{
  UserToken : userToken,
  LectureId : lectureId,
  Lecture : lecture,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvUpdateLecture() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateLecture" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateLecture failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateLecture failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error94 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error95 error
    error95, err = error94.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error95
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateLecture failed: invalid message type")
    return
  }
  result := SatelliteServerUpdateLectureResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  } else   if result.DateError != nil {
    err = result.DateError
    return 
  }
  return
}

// Parameters:
//  - UserToken
//  - Page
func (p *SatelliteServerClient) GetLectureList(userToken Token, page int32) (r []*LectureSummary, err error) {
  if err = p.sendGetLectureList(userToken, page); err != nil { return }
  return p.recvGetLectureList()
}

func (p *SatelliteServerClient) sendGetLectureList(userToken Token, page int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getLectureList", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetLectureListArgs{
  UserToken : userToken,
  Page : page,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetLectureList() (value []*LectureSummary, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getLectureList" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLectureList failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLectureList failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error96 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error97 error
    error97, err = error96.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error97
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLectureList failed: invalid message type")
    return
  }
  result := SatelliteServerGetLectureListResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - LectureId
func (p *SatelliteServerClient) GetLectureDetails(userToken Token, lectureId UUID) (r *LectureRead, err error) {
  if err = p.sendGetLectureDetails(userToken, lectureId); err != nil { return }
  return p.recvGetLectureDetails()
}

func (p *SatelliteServerClient) sendGetLectureDetails(userToken Token, lectureId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getLectureDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetLectureDetailsArgs{
  UserToken : userToken,
  LectureId : lectureId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetLectureDetails() (value *LectureRead, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getLectureDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLectureDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLectureDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error98 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error99 error
    error99, err = error98.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error99
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLectureDetails failed: invalid message type")
    return
  }
  result := SatelliteServerGetLectureDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - LectureId
func (p *SatelliteServerClient) DeleteLecture(userToken Token, lectureId UUID) (err error) {
  if err = p.sendDeleteLecture(userToken, lectureId); err != nil { return }
  return p.recvDeleteLecture()
}

func (p *SatelliteServerClient) sendDeleteLecture(userToken Token, lectureId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteLecture", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerDeleteLectureArgs{
  UserToken : userToken,
  LectureId : lectureId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvDeleteLecture() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteLecture" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteLecture failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteLecture failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error100 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error101 error
    error101, err = error100.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error101
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteLecture failed: invalid message type")
    return
  }
  result := SatelliteServerDeleteLectureResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  return
}

// Parameters:
//  - UserToken
//  - LectureId
//  - Permissions
func (p *SatelliteServerClient) WriteLecturePermissions(userToken Token, lectureId UUID, permissions map[UUID]*LecturePermissions) (err error) {
  if err = p.sendWriteLecturePermissions(userToken, lectureId, permissions); err != nil { return }
  return p.recvWriteLecturePermissions()
}

func (p *SatelliteServerClient) sendWriteLecturePermissions(userToken Token, lectureId UUID, permissions map[UUID]*LecturePermissions)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("writeLecturePermissions", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerWriteLecturePermissionsArgs{
  UserToken : userToken,
  LectureId : lectureId,
  Permissions : permissions,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvWriteLecturePermissions() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "writeLecturePermissions" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "writeLecturePermissions failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "writeLecturePermissions failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error102 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error103 error
    error103, err = error102.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error103
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "writeLecturePermissions failed: invalid message type")
    return
  }
  result := SatelliteServerWriteLecturePermissionsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  return
}

// Parameters:
//  - UserToken
//  - LectureId
func (p *SatelliteServerClient) GetLecturePermissions(userToken Token, lectureId UUID) (r map[UUID]*LecturePermissions, err error) {
  if err = p.sendGetLecturePermissions(userToken, lectureId); err != nil { return }
  return p.recvGetLecturePermissions()
}

func (p *SatelliteServerClient) sendGetLecturePermissions(userToken Token, lectureId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getLecturePermissions", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerGetLecturePermissionsArgs{
  UserToken : userToken,
  LectureId : lectureId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvGetLecturePermissions() (value map[UUID]*LecturePermissions, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getLecturePermissions" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLecturePermissions failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLecturePermissions failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error104 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error105 error
    error105, err = error104.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error105
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLecturePermissions failed: invalid message type")
    return
  }
  result := SatelliteServerGetLecturePermissionsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - LectureId
//  - NewOwnerId_
func (p *SatelliteServerClient) SetLectureOwner(userToken Token, lectureId UUID, newOwnerId UUID) (err error) {
  if err = p.sendSetLectureOwner(userToken, lectureId, newOwnerId); err != nil { return }
  return p.recvSetLectureOwner()
}

func (p *SatelliteServerClient) sendSetLectureOwner(userToken Token, lectureId UUID, newOwnerId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setLectureOwner", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SatelliteServerSetLectureOwnerArgs{
  UserToken : userToken,
  LectureId : lectureId,
  NewOwnerId_ : newOwnerId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SatelliteServerClient) recvSetLectureOwner() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setLectureOwner" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setLectureOwner failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setLectureOwner failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error106 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error107 error
    error107, err = error106.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error107
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setLectureOwner failed: invalid message type")
    return
  }
  result := SatelliteServerSetLectureOwnerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  return
}


type SatelliteServerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SatelliteServer
}

func (p *SatelliteServerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SatelliteServerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SatelliteServerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSatelliteServerProcessor(handler SatelliteServer) *SatelliteServerProcessor {

  self108 := &SatelliteServerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self108.processorMap["getVersion"] = &satelliteServerProcessorGetVersion{handler:handler}
  self108.processorMap["getSupportedFeatures"] = &satelliteServerProcessorGetSupportedFeatures{handler:handler}
  self108.processorMap["getConfiguration"] = &satelliteServerProcessorGetConfiguration{handler:handler}
  self108.processorMap["requestImageVersionUpload"] = &satelliteServerProcessorRequestImageVersionUpload{handler:handler}
  self108.processorMap["updateBlockHashes"] = &satelliteServerProcessorUpdateBlockHashes{handler:handler}
  self108.processorMap["cancelUpload"] = &satelliteServerProcessorCancelUpload{handler:handler}
  self108.processorMap["queryUploadStatus"] = &satelliteServerProcessorQueryUploadStatus{handler:handler}
  self108.processorMap["requestDownload"] = &satelliteServerProcessorRequestDownload{handler:handler}
  self108.processorMap["cancelDownload"] = &satelliteServerProcessorCancelDownload{handler:handler}
  self108.processorMap["isAuthenticated"] = &satelliteServerProcessorIsAuthenticated{handler:handler}
  self108.processorMap["whoami"] = &satelliteServerProcessorWhoami{handler:handler}
  self108.processorMap["invalidateSession"] = &satelliteServerProcessorInvalidateSession{handler:handler}
  self108.processorMap["getUserList"] = &satelliteServerProcessorGetUserList{handler:handler}
  self108.processorMap["getUserConfig"] = &satelliteServerProcessorGetUserConfig{handler:handler}
  self108.processorMap["setUserConfig"] = &satelliteServerProcessorSetUserConfig{handler:handler}
  self108.processorMap["getOperatingSystems"] = &satelliteServerProcessorGetOperatingSystems{handler:handler}
  self108.processorMap["getVirtualizers"] = &satelliteServerProcessorGetVirtualizers{handler:handler}
  self108.processorMap["getAllOrganizations"] = &satelliteServerProcessorGetAllOrganizations{handler:handler}
  self108.processorMap["getLocations"] = &satelliteServerProcessorGetLocations{handler:handler}
  self108.processorMap["getStatus"] = &satelliteServerProcessorGetStatus{handler:handler}
  self108.processorMap["getImageList"] = &satelliteServerProcessorGetImageList{handler:handler}
  self108.processorMap["getImageDetails"] = &satelliteServerProcessorGetImageDetails{handler:handler}
  self108.processorMap["createImage"] = &satelliteServerProcessorCreateImage{handler:handler}
  self108.processorMap["updateImageBase"] = &satelliteServerProcessorUpdateImageBase{handler:handler}
  self108.processorMap["updateImageVersion"] = &satelliteServerProcessorUpdateImageVersion{handler:handler}
  self108.processorMap["deleteImageVersion"] = &satelliteServerProcessorDeleteImageVersion{handler:handler}
  self108.processorMap["deleteImageBase"] = &satelliteServerProcessorDeleteImageBase{handler:handler}
  self108.processorMap["writeImagePermissions"] = &satelliteServerProcessorWriteImagePermissions{handler:handler}
  self108.processorMap["getImagePermissions"] = &satelliteServerProcessorGetImagePermissions{handler:handler}
  self108.processorMap["setImageOwner"] = &satelliteServerProcessorSetImageOwner{handler:handler}
  self108.processorMap["setImageVersionExpiry"] = &satelliteServerProcessorSetImageVersionExpiry{handler:handler}
  self108.processorMap["getImageVersionVirtConfig"] = &satelliteServerProcessorGetImageVersionVirtConfig{handler:handler}
  self108.processorMap["setImageVersionVirtConfig"] = &satelliteServerProcessorSetImageVersionVirtConfig{handler:handler}
  self108.processorMap["requestImageReplication"] = &satelliteServerProcessorRequestImageReplication{handler:handler}
  self108.processorMap["publishImageVersion"] = &satelliteServerProcessorPublishImageVersion{handler:handler}
  self108.processorMap["createLecture"] = &satelliteServerProcessorCreateLecture{handler:handler}
  self108.processorMap["updateLecture"] = &satelliteServerProcessorUpdateLecture{handler:handler}
  self108.processorMap["getLectureList"] = &satelliteServerProcessorGetLectureList{handler:handler}
  self108.processorMap["getLectureDetails"] = &satelliteServerProcessorGetLectureDetails{handler:handler}
  self108.processorMap["deleteLecture"] = &satelliteServerProcessorDeleteLecture{handler:handler}
  self108.processorMap["writeLecturePermissions"] = &satelliteServerProcessorWriteLecturePermissions{handler:handler}
  self108.processorMap["getLecturePermissions"] = &satelliteServerProcessorGetLecturePermissions{handler:handler}
  self108.processorMap["setLectureOwner"] = &satelliteServerProcessorSetLectureOwner{handler:handler}
return self108
}

func (p *SatelliteServerProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x109 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x109.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x109

}

type satelliteServerProcessorGetVersion struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetVersionResult{}
var retval Int
  var err2 error
  if retval, err2 = p.handler.GetVersion(args.ClientVersion); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVersion: " + err2.Error())
    oprot.WriteMessageBegin("getVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetSupportedFeatures struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetSupportedFeatures) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetSupportedFeaturesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSupportedFeatures", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetSupportedFeaturesResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetSupportedFeatures(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSupportedFeatures: " + err2.Error())
    oprot.WriteMessageBegin("getSupportedFeatures", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getSupportedFeatures", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetConfiguration struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetConfiguration) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetConfigurationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getConfiguration", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetConfigurationResult{}
var retval *SatelliteConfig
  var err2 error
  if retval, err2 = p.handler.GetConfiguration(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getConfiguration: " + err2.Error())
    oprot.WriteMessageBegin("getConfiguration", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getConfiguration", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorRequestImageVersionUpload struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorRequestImageVersionUpload) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerRequestImageVersionUploadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("requestImageVersionUpload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerRequestImageVersionUploadResult{}
var retval *TransferInformation
  var err2 error
  if retval, err2 = p.handler.RequestImageVersionUpload(args.UserToken, args.ImageBaseId, args.FileSize, args.BlockHashes, args.MachineDescription); err2 != nil {
  switch v := err2.(type) {
    case *TTransferRejectedException:
  result.Rejection = v
    case *TAuthorizationException:
  result.AuthError = v
    case *TInvocationException:
  result.Ffff = v
    case *TNotFoundException:
  result.Sdf = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestImageVersionUpload: " + err2.Error())
    oprot.WriteMessageBegin("requestImageVersionUpload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("requestImageVersionUpload", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorUpdateBlockHashes struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorUpdateBlockHashes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerUpdateBlockHashesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateBlockHashes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerUpdateBlockHashesResult{}
  var err2 error
  if err2 = p.handler.UpdateBlockHashes(args.UploadToken, args.BlockHashes); err2 != nil {
  switch v := err2.(type) {
    case *TInvalidTokenException:
  result.Ex1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateBlockHashes: " + err2.Error())
    oprot.WriteMessageBegin("updateBlockHashes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateBlockHashes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorCancelUpload struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorCancelUpload) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerCancelUploadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("cancelUpload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerCancelUploadResult{}
  var err2 error
  if err2 = p.handler.CancelUpload(args.UploadToken); err2 != nil {
  switch v := err2.(type) {
    case *TInvalidTokenException:
  result.Ex1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelUpload: " + err2.Error())
    oprot.WriteMessageBegin("cancelUpload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("cancelUpload", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorQueryUploadStatus struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorQueryUploadStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerQueryUploadStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryUploadStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerQueryUploadStatusResult{}
var retval *TransferStatus
  var err2 error
  if retval, err2 = p.handler.QueryUploadStatus(args.UploadToken); err2 != nil {
  switch v := err2.(type) {
    case *TInvalidTokenException:
  result.Ex1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryUploadStatus: " + err2.Error())
    oprot.WriteMessageBegin("queryUploadStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryUploadStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorRequestDownload struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorRequestDownload) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerRequestDownloadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("requestDownload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerRequestDownloadResult{}
var retval *TransferInformation
  var err2 error
  if retval, err2 = p.handler.RequestDownload(args.UserToken, args.ImageVersionId); err2 != nil {
  switch v := err2.(type) {
    case *TTransferRejectedException:
  result.Rejection = v
    case *TAuthorizationException:
  result.AuthError = v
    case *TInvocationException:
  result.Ffff = v
    case *TNotFoundException:
  result.Sdf = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestDownload: " + err2.Error())
    oprot.WriteMessageBegin("requestDownload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("requestDownload", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorCancelDownload struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorCancelDownload) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerCancelDownloadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("cancelDownload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerCancelDownloadResult{}
  var err2 error
  if err2 = p.handler.CancelDownload(args.DownloadToken); err2 != nil {
  switch v := err2.(type) {
    case *TInvalidTokenException:
  result.Ex1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelDownload: " + err2.Error())
    oprot.WriteMessageBegin("cancelDownload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("cancelDownload", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorIsAuthenticated struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorIsAuthenticated) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerIsAuthenticatedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("isAuthenticated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerIsAuthenticatedResult{}
  var err2 error
  if err2 = p.handler.IsAuthenticated(args.UserToken); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isAuthenticated: " + err2.Error())
    oprot.WriteMessageBegin("isAuthenticated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("isAuthenticated", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorWhoami struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorWhoami) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerWhoamiArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("whoami", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerWhoamiResult{}
var retval *WhoamiInfo
  var err2 error
  if retval, err2 = p.handler.Whoami(args.UserToken); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing whoami: " + err2.Error())
    oprot.WriteMessageBegin("whoami", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("whoami", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorInvalidateSession struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorInvalidateSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerInvalidateSessionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("invalidateSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerInvalidateSessionResult{}
  var err2 error
  if err2 = p.handler.InvalidateSession(args.UserToken); err2 != nil {
  switch v := err2.(type) {
    case *TInvalidTokenException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing invalidateSession: " + err2.Error())
    oprot.WriteMessageBegin("invalidateSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("invalidateSession", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetUserList struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetUserList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetUserListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetUserListResult{}
var retval []*UserInfo
  var err2 error
  if retval, err2 = p.handler.GetUserList(args.UserToken, args.Page); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserList: " + err2.Error())
    oprot.WriteMessageBegin("getUserList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetUserConfig struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetUserConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetUserConfigArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetUserConfigResult{}
var retval *SatelliteUserConfig
  var err2 error
  if retval, err2 = p.handler.GetUserConfig(args.UserToken); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserConfig: " + err2.Error())
    oprot.WriteMessageBegin("getUserConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserConfig", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorSetUserConfig struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorSetUserConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerSetUserConfigArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setUserConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerSetUserConfigResult{}
  var err2 error
  if err2 = p.handler.SetUserConfig(args.UserToken, args.Config); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setUserConfig: " + err2.Error())
    oprot.WriteMessageBegin("setUserConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("setUserConfig", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetOperatingSystems struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetOperatingSystems) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetOperatingSystemsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getOperatingSystems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetOperatingSystemsResult{}
var retval []*OperatingSystem
  var err2 error
  if retval, err2 = p.handler.GetOperatingSystems(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOperatingSystems: " + err2.Error())
    oprot.WriteMessageBegin("getOperatingSystems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getOperatingSystems", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetVirtualizers struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetVirtualizers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetVirtualizersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getVirtualizers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetVirtualizersResult{}
var retval []*Virtualizer
  var err2 error
  if retval, err2 = p.handler.GetVirtualizers(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVirtualizers: " + err2.Error())
    oprot.WriteMessageBegin("getVirtualizers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getVirtualizers", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetAllOrganizations struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetAllOrganizations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetAllOrganizationsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllOrganizations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetAllOrganizationsResult{}
var retval []*Organization
  var err2 error
  if retval, err2 = p.handler.GetAllOrganizations(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllOrganizations: " + err2.Error())
    oprot.WriteMessageBegin("getAllOrganizations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllOrganizations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetLocations struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetLocations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetLocationsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLocations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetLocationsResult{}
var retval []*Location
  var err2 error
  if retval, err2 = p.handler.GetLocations(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLocations: " + err2.Error())
    oprot.WriteMessageBegin("getLocations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getLocations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetStatus struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetStatusResult{}
var retval *SatelliteStatus
  var err2 error
  if retval, err2 = p.handler.GetStatus(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStatus: " + err2.Error())
    oprot.WriteMessageBegin("getStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetImageList struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetImageList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetImageListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getImageList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetImageListResult{}
var retval []*ImageSummaryRead
  var err2 error
  if retval, err2 = p.handler.GetImageList(args.UserToken, args.TagSearch, args.Page); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getImageList: " + err2.Error())
    oprot.WriteMessageBegin("getImageList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getImageList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetImageDetails struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetImageDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetImageDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getImageDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetImageDetailsResult{}
var retval *ImageDetailsRead
  var err2 error
  if retval, err2 = p.handler.GetImageDetails(args.UserToken, args.ImageBaseId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getImageDetails: " + err2.Error())
    oprot.WriteMessageBegin("getImageDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getImageDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorCreateImage struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorCreateImage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerCreateImageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createImage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerCreateImageResult{}
var retval UUID
  var err2 error
  if retval, err2 = p.handler.CreateImage(args.UserToken, args.ImageName); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TInvocationException:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createImage: " + err2.Error())
    oprot.WriteMessageBegin("createImage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("createImage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorUpdateImageBase struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorUpdateImageBase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerUpdateImageBaseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateImageBase", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerUpdateImageBaseResult{}
  var err2 error
  if err2 = p.handler.UpdateImageBase(args.UserToken, args.ImageBaseId, args.Image); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ImgError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateImageBase: " + err2.Error())
    oprot.WriteMessageBegin("updateImageBase", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateImageBase", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorUpdateImageVersion struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorUpdateImageVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerUpdateImageVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateImageVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerUpdateImageVersionResult{}
  var err2 error
  if err2 = p.handler.UpdateImageVersion(args.UserToken, args.ImageVersionId, args.Image); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ImgError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateImageVersion: " + err2.Error())
    oprot.WriteMessageBegin("updateImageVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateImageVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorDeleteImageVersion struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorDeleteImageVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerDeleteImageVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteImageVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerDeleteImageVersionResult{}
  var err2 error
  if err2 = p.handler.DeleteImageVersion(args.UserToken, args.ImageVersionId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteImageVersion: " + err2.Error())
    oprot.WriteMessageBegin("deleteImageVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteImageVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorDeleteImageBase struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorDeleteImageBase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerDeleteImageBaseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteImageBase", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerDeleteImageBaseResult{}
  var err2 error
  if err2 = p.handler.DeleteImageBase(args.UserToken, args.ImageBaseId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteImageBase: " + err2.Error())
    oprot.WriteMessageBegin("deleteImageBase", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteImageBase", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorWriteImagePermissions struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorWriteImagePermissions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerWriteImagePermissionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("writeImagePermissions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerWriteImagePermissionsResult{}
  var err2 error
  if err2 = p.handler.WriteImagePermissions(args.UserToken, args.ImageBaseId, args.Permissions); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing writeImagePermissions: " + err2.Error())
    oprot.WriteMessageBegin("writeImagePermissions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("writeImagePermissions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetImagePermissions struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetImagePermissions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetImagePermissionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getImagePermissions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetImagePermissionsResult{}
var retval map[UUID]*ImagePermissions
  var err2 error
  if retval, err2 = p.handler.GetImagePermissions(args.UserToken, args.ImageBaseId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getImagePermissions: " + err2.Error())
    oprot.WriteMessageBegin("getImagePermissions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getImagePermissions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorSetImageOwner struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorSetImageOwner) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerSetImageOwnerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setImageOwner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerSetImageOwnerResult{}
  var err2 error
  if err2 = p.handler.SetImageOwner(args.UserToken, args.ImageBaseId, args.NewOwnerId_); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setImageOwner: " + err2.Error())
    oprot.WriteMessageBegin("setImageOwner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("setImageOwner", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorSetImageVersionExpiry struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorSetImageVersionExpiry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerSetImageVersionExpiryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setImageVersionExpiry", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerSetImageVersionExpiryResult{}
  var err2 error
  if err2 = p.handler.SetImageVersionExpiry(args.UserToken, args.ImageBaseId, args.ExpireTime); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    case *TInvalidDateParam:
  result.DateError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setImageVersionExpiry: " + err2.Error())
    oprot.WriteMessageBegin("setImageVersionExpiry", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("setImageVersionExpiry", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetImageVersionVirtConfig struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetImageVersionVirtConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetImageVersionVirtConfigArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getImageVersionVirtConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetImageVersionVirtConfigResult{}
var retval []byte
  var err2 error
  if retval, err2 = p.handler.GetImageVersionVirtConfig(args.UserToken, args.ImageVersionId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getImageVersionVirtConfig: " + err2.Error())
    oprot.WriteMessageBegin("getImageVersionVirtConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getImageVersionVirtConfig", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorSetImageVersionVirtConfig struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorSetImageVersionVirtConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerSetImageVersionVirtConfigArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setImageVersionVirtConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerSetImageVersionVirtConfigResult{}
  var err2 error
  if err2 = p.handler.SetImageVersionVirtConfig(args.UserToken, args.ImageVersionId, args.Meta); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setImageVersionVirtConfig: " + err2.Error())
    oprot.WriteMessageBegin("setImageVersionVirtConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("setImageVersionVirtConfig", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorRequestImageReplication struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorRequestImageReplication) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerRequestImageReplicationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("requestImageReplication", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerRequestImageReplicationResult{}
var retval UUID
  var err2 error
  if retval, err2 = p.handler.RequestImageReplication(args.UserToken, args.ImageVersionId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestImageReplication: " + err2.Error())
    oprot.WriteMessageBegin("requestImageReplication", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("requestImageReplication", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorPublishImageVersion struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorPublishImageVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerPublishImageVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("publishImageVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerPublishImageVersionResult{}
var retval UUID
  var err2 error
  if retval, err2 = p.handler.PublishImageVersion(args.UserToken, args.ImageVersionId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    case *TTransferRejectedException:
  result.Tre = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing publishImageVersion: " + err2.Error())
    oprot.WriteMessageBegin("publishImageVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("publishImageVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorCreateLecture struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorCreateLecture) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerCreateLectureArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createLecture", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerCreateLectureResult{}
var retval UUID
  var err2 error
  if retval, err2 = p.handler.CreateLecture(args.UserToken, args.Lecture); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TInvocationException:
  result.ServerError = v
    case *TInvalidDateParam:
  result.DateError = v
    case *TNotFoundException:
  result.NotFound = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createLecture: " + err2.Error())
    oprot.WriteMessageBegin("createLecture", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("createLecture", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorUpdateLecture struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorUpdateLecture) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerUpdateLectureArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateLecture", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerUpdateLectureResult{}
  var err2 error
  if err2 = p.handler.UpdateLecture(args.UserToken, args.LectureId, args.Lecture); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    case *TInvalidDateParam:
  result.DateError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateLecture: " + err2.Error())
    oprot.WriteMessageBegin("updateLecture", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateLecture", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetLectureList struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetLectureList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetLectureListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLectureList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetLectureListResult{}
var retval []*LectureSummary
  var err2 error
  if retval, err2 = p.handler.GetLectureList(args.UserToken, args.Page); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLectureList: " + err2.Error())
    oprot.WriteMessageBegin("getLectureList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getLectureList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetLectureDetails struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetLectureDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetLectureDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLectureDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetLectureDetailsResult{}
var retval *LectureRead
  var err2 error
  if retval, err2 = p.handler.GetLectureDetails(args.UserToken, args.LectureId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLectureDetails: " + err2.Error())
    oprot.WriteMessageBegin("getLectureDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getLectureDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorDeleteLecture struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorDeleteLecture) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerDeleteLectureArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteLecture", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerDeleteLectureResult{}
  var err2 error
  if err2 = p.handler.DeleteLecture(args.UserToken, args.LectureId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteLecture: " + err2.Error())
    oprot.WriteMessageBegin("deleteLecture", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteLecture", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorWriteLecturePermissions struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorWriteLecturePermissions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerWriteLecturePermissionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("writeLecturePermissions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerWriteLecturePermissionsResult{}
  var err2 error
  if err2 = p.handler.WriteLecturePermissions(args.UserToken, args.LectureId, args.Permissions); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing writeLecturePermissions: " + err2.Error())
    oprot.WriteMessageBegin("writeLecturePermissions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("writeLecturePermissions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorGetLecturePermissions struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorGetLecturePermissions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerGetLecturePermissionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLecturePermissions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerGetLecturePermissionsResult{}
var retval map[UUID]*LecturePermissions
  var err2 error
  if retval, err2 = p.handler.GetLecturePermissions(args.UserToken, args.LectureId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLecturePermissions: " + err2.Error())
    oprot.WriteMessageBegin("getLecturePermissions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getLecturePermissions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type satelliteServerProcessorSetLectureOwner struct {
  handler SatelliteServer
}

func (p *satelliteServerProcessorSetLectureOwner) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SatelliteServerSetLectureOwnerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setLectureOwner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SatelliteServerSetLectureOwnerResult{}
  var err2 error
  if err2 = p.handler.SetLectureOwner(args.UserToken, args.LectureId, args.NewOwnerId_); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setLectureOwner: " + err2.Error())
    oprot.WriteMessageBegin("setLectureOwner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("setLectureOwner", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ClientVersion
type SatelliteServerGetVersionArgs struct {
  ClientVersion Int `thrift:"clientVersion,1" db:"clientVersion" json:"clientVersion"`
}

func NewSatelliteServerGetVersionArgs() *SatelliteServerGetVersionArgs {
  return &SatelliteServerGetVersionArgs{}
}


func (p *SatelliteServerGetVersionArgs) GetClientVersion() Int {
  return p.ClientVersion
}
func (p *SatelliteServerGetVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetVersionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Int(v)
  p.ClientVersion = temp
}
  return nil
}

func (p *SatelliteServerGetVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clientVersion", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clientVersion: ", p), err) }
  if err := oprot.WriteI64(int64(p.ClientVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientVersion (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clientVersion: ", p), err) }
  return err
}

func (p *SatelliteServerGetVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SatelliteServerGetVersionResult struct {
  Success *Int `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSatelliteServerGetVersionResult() *SatelliteServerGetVersionResult {
  return &SatelliteServerGetVersionResult{}
}

var SatelliteServerGetVersionResult_Success_DEFAULT Int
func (p *SatelliteServerGetVersionResult) GetSuccess() Int {
  if !p.IsSetSuccess() {
    return SatelliteServerGetVersionResult_Success_DEFAULT
  }
return *p.Success
}
func (p *SatelliteServerGetVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Int(v)
  p.Success = &temp
}
  return nil
}

func (p *SatelliteServerGetVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetVersionResult(%+v)", *p)
}

type SatelliteServerGetSupportedFeaturesArgs struct {
}

func NewSatelliteServerGetSupportedFeaturesArgs() *SatelliteServerGetSupportedFeaturesArgs {
  return &SatelliteServerGetSupportedFeaturesArgs{}
}

func (p *SatelliteServerGetSupportedFeaturesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetSupportedFeaturesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSupportedFeatures_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetSupportedFeaturesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetSupportedFeaturesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SatelliteServerGetSupportedFeaturesResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSatelliteServerGetSupportedFeaturesResult() *SatelliteServerGetSupportedFeaturesResult {
  return &SatelliteServerGetSupportedFeaturesResult{}
}

var SatelliteServerGetSupportedFeaturesResult_Success_DEFAULT string
func (p *SatelliteServerGetSupportedFeaturesResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return SatelliteServerGetSupportedFeaturesResult_Success_DEFAULT
  }
return *p.Success
}
func (p *SatelliteServerGetSupportedFeaturesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetSupportedFeaturesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetSupportedFeaturesResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *SatelliteServerGetSupportedFeaturesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSupportedFeatures_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetSupportedFeaturesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetSupportedFeaturesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetSupportedFeaturesResult(%+v)", *p)
}

type SatelliteServerGetConfigurationArgs struct {
}

func NewSatelliteServerGetConfigurationArgs() *SatelliteServerGetConfigurationArgs {
  return &SatelliteServerGetConfigurationArgs{}
}

func (p *SatelliteServerGetConfigurationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetConfigurationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getConfiguration_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetConfigurationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetConfigurationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SatelliteServerGetConfigurationResult struct {
  Success *SatelliteConfig `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSatelliteServerGetConfigurationResult() *SatelliteServerGetConfigurationResult {
  return &SatelliteServerGetConfigurationResult{}
}

var SatelliteServerGetConfigurationResult_Success_DEFAULT *SatelliteConfig
func (p *SatelliteServerGetConfigurationResult) GetSuccess() *SatelliteConfig {
  if !p.IsSetSuccess() {
    return SatelliteServerGetConfigurationResult_Success_DEFAULT
  }
return p.Success
}
func (p *SatelliteServerGetConfigurationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetConfigurationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetConfigurationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SatelliteConfig{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SatelliteServerGetConfigurationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getConfiguration_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetConfigurationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetConfigurationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetConfigurationResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageBaseId
//  - FileSize
//  - BlockHashes
//  - MachineDescription
type SatelliteServerRequestImageVersionUploadArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageBaseId UUID `thrift:"imageBaseId,2" db:"imageBaseId" json:"imageBaseId"`
  FileSize int64 `thrift:"fileSize,3" db:"fileSize" json:"fileSize"`
  BlockHashes [][]byte `thrift:"blockHashes,4" db:"blockHashes" json:"blockHashes"`
  MachineDescription []byte `thrift:"machineDescription,5" db:"machineDescription" json:"machineDescription"`
}

func NewSatelliteServerRequestImageVersionUploadArgs() *SatelliteServerRequestImageVersionUploadArgs {
  return &SatelliteServerRequestImageVersionUploadArgs{}
}


func (p *SatelliteServerRequestImageVersionUploadArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerRequestImageVersionUploadArgs) GetImageBaseId() UUID {
  return p.ImageBaseId
}

func (p *SatelliteServerRequestImageVersionUploadArgs) GetFileSize() int64 {
  return p.FileSize
}

func (p *SatelliteServerRequestImageVersionUploadArgs) GetBlockHashes() [][]byte {
  return p.BlockHashes
}

func (p *SatelliteServerRequestImageVersionUploadArgs) GetMachineDescription() []byte {
  return p.MachineDescription
}
func (p *SatelliteServerRequestImageVersionUploadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FileSize = v
}
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.BlockHashes =  tSlice
  for i := 0; i < size; i ++ {
var _elem110 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem110 = v
}
    p.BlockHashes = append(p.BlockHashes, _elem110)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MachineDescription = v
}
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("requestImageVersionUpload_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerRequestImageVersionUploadArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageBaseId: ", p), err) }
  return err
}

func (p *SatelliteServerRequestImageVersionUploadArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fileSize", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fileSize: ", p), err) }
  if err := oprot.WriteI64(int64(p.FileSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fileSize (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fileSize: ", p), err) }
  return err
}

func (p *SatelliteServerRequestImageVersionUploadArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("blockHashes", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:blockHashes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.BlockHashes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BlockHashes {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:blockHashes: ", p), err) }
  return err
}

func (p *SatelliteServerRequestImageVersionUploadArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("machineDescription", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:machineDescription: ", p), err) }
  if err := oprot.WriteBinary(p.MachineDescription); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.machineDescription (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:machineDescription: ", p), err) }
  return err
}

func (p *SatelliteServerRequestImageVersionUploadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerRequestImageVersionUploadArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Rejection
//  - AuthError
//  - Ffff
//  - Sdf
type SatelliteServerRequestImageVersionUploadResult struct {
  Success *TransferInformation `thrift:"success,0" db:"success" json:"success,omitempty"`
  Rejection *TTransferRejectedException `thrift:"rejection,1" db:"rejection" json:"rejection,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,2" db:"authError" json:"authError,omitempty"`
  Ffff *TInvocationException `thrift:"ffff,3" db:"ffff" json:"ffff,omitempty"`
  Sdf *TNotFoundException `thrift:"sdf,4" db:"sdf" json:"sdf,omitempty"`
}

func NewSatelliteServerRequestImageVersionUploadResult() *SatelliteServerRequestImageVersionUploadResult {
  return &SatelliteServerRequestImageVersionUploadResult{}
}

var SatelliteServerRequestImageVersionUploadResult_Success_DEFAULT *TransferInformation
func (p *SatelliteServerRequestImageVersionUploadResult) GetSuccess() *TransferInformation {
  if !p.IsSetSuccess() {
    return SatelliteServerRequestImageVersionUploadResult_Success_DEFAULT
  }
return p.Success
}
var SatelliteServerRequestImageVersionUploadResult_Rejection_DEFAULT *TTransferRejectedException
func (p *SatelliteServerRequestImageVersionUploadResult) GetRejection() *TTransferRejectedException {
  if !p.IsSetRejection() {
    return SatelliteServerRequestImageVersionUploadResult_Rejection_DEFAULT
  }
return p.Rejection
}
var SatelliteServerRequestImageVersionUploadResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerRequestImageVersionUploadResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerRequestImageVersionUploadResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerRequestImageVersionUploadResult_Ffff_DEFAULT *TInvocationException
func (p *SatelliteServerRequestImageVersionUploadResult) GetFfff() *TInvocationException {
  if !p.IsSetFfff() {
    return SatelliteServerRequestImageVersionUploadResult_Ffff_DEFAULT
  }
return p.Ffff
}
var SatelliteServerRequestImageVersionUploadResult_Sdf_DEFAULT *TNotFoundException
func (p *SatelliteServerRequestImageVersionUploadResult) GetSdf() *TNotFoundException {
  if !p.IsSetSdf() {
    return SatelliteServerRequestImageVersionUploadResult_Sdf_DEFAULT
  }
return p.Sdf
}
func (p *SatelliteServerRequestImageVersionUploadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerRequestImageVersionUploadResult) IsSetRejection() bool {
  return p.Rejection != nil
}

func (p *SatelliteServerRequestImageVersionUploadResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerRequestImageVersionUploadResult) IsSetFfff() bool {
  return p.Ffff != nil
}

func (p *SatelliteServerRequestImageVersionUploadResult) IsSetSdf() bool {
  return p.Sdf != nil
}

func (p *SatelliteServerRequestImageVersionUploadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TransferInformation{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Rejection = &TTransferRejectedException{}
  if err := p.Rejection.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rejection), err)
  }
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadResult)  ReadField2(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ffff = &TInvocationException{}
  if err := p.Ffff.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ffff), err)
  }
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Sdf = &TNotFoundException{}
  if err := p.Sdf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sdf), err)
  }
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("requestImageVersionUpload_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerRequestImageVersionUploadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestImageVersionUploadResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRejection() {
    if err := oprot.WriteFieldBegin("rejection", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rejection: ", p), err) }
    if err := p.Rejection.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rejection), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rejection: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestImageVersionUploadResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestImageVersionUploadResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetFfff() {
    if err := oprot.WriteFieldBegin("ffff", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ffff: ", p), err) }
    if err := p.Ffff.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ffff), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ffff: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestImageVersionUploadResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetSdf() {
    if err := oprot.WriteFieldBegin("sdf", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sdf: ", p), err) }
    if err := p.Sdf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sdf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sdf: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestImageVersionUploadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerRequestImageVersionUploadResult(%+v)", *p)
}

// Attributes:
//  - UploadToken
//  - BlockHashes
type SatelliteServerUpdateBlockHashesArgs struct {
  UploadToken Token `thrift:"uploadToken,1" db:"uploadToken" json:"uploadToken"`
  BlockHashes [][]byte `thrift:"blockHashes,2" db:"blockHashes" json:"blockHashes"`
}

func NewSatelliteServerUpdateBlockHashesArgs() *SatelliteServerUpdateBlockHashesArgs {
  return &SatelliteServerUpdateBlockHashesArgs{}
}


func (p *SatelliteServerUpdateBlockHashesArgs) GetUploadToken() Token {
  return p.UploadToken
}

func (p *SatelliteServerUpdateBlockHashesArgs) GetBlockHashes() [][]byte {
  return p.BlockHashes
}
func (p *SatelliteServerUpdateBlockHashesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerUpdateBlockHashesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UploadToken = temp
}
  return nil
}

func (p *SatelliteServerUpdateBlockHashesArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.BlockHashes =  tSlice
  for i := 0; i < size; i ++ {
var _elem111 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem111 = v
}
    p.BlockHashes = append(p.BlockHashes, _elem111)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SatelliteServerUpdateBlockHashesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateBlockHashes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerUpdateBlockHashesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uploadToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uploadToken: ", p), err) }
  if err := oprot.WriteString(string(p.UploadToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uploadToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uploadToken: ", p), err) }
  return err
}

func (p *SatelliteServerUpdateBlockHashesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("blockHashes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:blockHashes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.BlockHashes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BlockHashes {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:blockHashes: ", p), err) }
  return err
}

func (p *SatelliteServerUpdateBlockHashesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerUpdateBlockHashesArgs(%+v)", *p)
}

// Attributes:
//  - Ex1
type SatelliteServerUpdateBlockHashesResult struct {
  Ex1 *TInvalidTokenException `thrift:"ex1,1" db:"ex1" json:"ex1,omitempty"`
}

func NewSatelliteServerUpdateBlockHashesResult() *SatelliteServerUpdateBlockHashesResult {
  return &SatelliteServerUpdateBlockHashesResult{}
}

var SatelliteServerUpdateBlockHashesResult_Ex1_DEFAULT *TInvalidTokenException
func (p *SatelliteServerUpdateBlockHashesResult) GetEx1() *TInvalidTokenException {
  if !p.IsSetEx1() {
    return SatelliteServerUpdateBlockHashesResult_Ex1_DEFAULT
  }
return p.Ex1
}
func (p *SatelliteServerUpdateBlockHashesResult) IsSetEx1() bool {
  return p.Ex1 != nil
}

func (p *SatelliteServerUpdateBlockHashesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerUpdateBlockHashesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex1 = &TInvalidTokenException{}
  if err := p.Ex1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
  }
  return nil
}

func (p *SatelliteServerUpdateBlockHashesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateBlockHashes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerUpdateBlockHashesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx1() {
    if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err) }
    if err := p.Ex1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err) }
  }
  return err
}

func (p *SatelliteServerUpdateBlockHashesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerUpdateBlockHashesResult(%+v)", *p)
}

// Attributes:
//  - UploadToken
type SatelliteServerCancelUploadArgs struct {
  UploadToken Token `thrift:"uploadToken,1" db:"uploadToken" json:"uploadToken"`
}

func NewSatelliteServerCancelUploadArgs() *SatelliteServerCancelUploadArgs {
  return &SatelliteServerCancelUploadArgs{}
}


func (p *SatelliteServerCancelUploadArgs) GetUploadToken() Token {
  return p.UploadToken
}
func (p *SatelliteServerCancelUploadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerCancelUploadArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UploadToken = temp
}
  return nil
}

func (p *SatelliteServerCancelUploadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cancelUpload_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerCancelUploadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uploadToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uploadToken: ", p), err) }
  if err := oprot.WriteString(string(p.UploadToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uploadToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uploadToken: ", p), err) }
  return err
}

func (p *SatelliteServerCancelUploadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerCancelUploadArgs(%+v)", *p)
}

// Attributes:
//  - Ex1
type SatelliteServerCancelUploadResult struct {
  Ex1 *TInvalidTokenException `thrift:"ex1,1" db:"ex1" json:"ex1,omitempty"`
}

func NewSatelliteServerCancelUploadResult() *SatelliteServerCancelUploadResult {
  return &SatelliteServerCancelUploadResult{}
}

var SatelliteServerCancelUploadResult_Ex1_DEFAULT *TInvalidTokenException
func (p *SatelliteServerCancelUploadResult) GetEx1() *TInvalidTokenException {
  if !p.IsSetEx1() {
    return SatelliteServerCancelUploadResult_Ex1_DEFAULT
  }
return p.Ex1
}
func (p *SatelliteServerCancelUploadResult) IsSetEx1() bool {
  return p.Ex1 != nil
}

func (p *SatelliteServerCancelUploadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerCancelUploadResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex1 = &TInvalidTokenException{}
  if err := p.Ex1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
  }
  return nil
}

func (p *SatelliteServerCancelUploadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cancelUpload_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerCancelUploadResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx1() {
    if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err) }
    if err := p.Ex1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err) }
  }
  return err
}

func (p *SatelliteServerCancelUploadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerCancelUploadResult(%+v)", *p)
}

// Attributes:
//  - UploadToken
type SatelliteServerQueryUploadStatusArgs struct {
  UploadToken Token `thrift:"uploadToken,1" db:"uploadToken" json:"uploadToken"`
}

func NewSatelliteServerQueryUploadStatusArgs() *SatelliteServerQueryUploadStatusArgs {
  return &SatelliteServerQueryUploadStatusArgs{}
}


func (p *SatelliteServerQueryUploadStatusArgs) GetUploadToken() Token {
  return p.UploadToken
}
func (p *SatelliteServerQueryUploadStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerQueryUploadStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UploadToken = temp
}
  return nil
}

func (p *SatelliteServerQueryUploadStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryUploadStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerQueryUploadStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uploadToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uploadToken: ", p), err) }
  if err := oprot.WriteString(string(p.UploadToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uploadToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uploadToken: ", p), err) }
  return err
}

func (p *SatelliteServerQueryUploadStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerQueryUploadStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
type SatelliteServerQueryUploadStatusResult struct {
  Success *TransferStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex1 *TInvalidTokenException `thrift:"ex1,1" db:"ex1" json:"ex1,omitempty"`
}

func NewSatelliteServerQueryUploadStatusResult() *SatelliteServerQueryUploadStatusResult {
  return &SatelliteServerQueryUploadStatusResult{}
}

var SatelliteServerQueryUploadStatusResult_Success_DEFAULT *TransferStatus
func (p *SatelliteServerQueryUploadStatusResult) GetSuccess() *TransferStatus {
  if !p.IsSetSuccess() {
    return SatelliteServerQueryUploadStatusResult_Success_DEFAULT
  }
return p.Success
}
var SatelliteServerQueryUploadStatusResult_Ex1_DEFAULT *TInvalidTokenException
func (p *SatelliteServerQueryUploadStatusResult) GetEx1() *TInvalidTokenException {
  if !p.IsSetEx1() {
    return SatelliteServerQueryUploadStatusResult_Ex1_DEFAULT
  }
return p.Ex1
}
func (p *SatelliteServerQueryUploadStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerQueryUploadStatusResult) IsSetEx1() bool {
  return p.Ex1 != nil
}

func (p *SatelliteServerQueryUploadStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerQueryUploadStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TransferStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SatelliteServerQueryUploadStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex1 = &TInvalidTokenException{}
  if err := p.Ex1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
  }
  return nil
}

func (p *SatelliteServerQueryUploadStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryUploadStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerQueryUploadStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerQueryUploadStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx1() {
    if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err) }
    if err := p.Ex1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err) }
  }
  return err
}

func (p *SatelliteServerQueryUploadStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerQueryUploadStatusResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageVersionId
type SatelliteServerRequestDownloadArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageVersionId UUID `thrift:"imageVersionId,2" db:"imageVersionId" json:"imageVersionId"`
}

func NewSatelliteServerRequestDownloadArgs() *SatelliteServerRequestDownloadArgs {
  return &SatelliteServerRequestDownloadArgs{}
}


func (p *SatelliteServerRequestDownloadArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerRequestDownloadArgs) GetImageVersionId() UUID {
  return p.ImageVersionId
}
func (p *SatelliteServerRequestDownloadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerRequestDownloadArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerRequestDownloadArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageVersionId = temp
}
  return nil
}

func (p *SatelliteServerRequestDownloadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("requestDownload_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerRequestDownloadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerRequestDownloadArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageVersionId: ", p), err) }
  return err
}

func (p *SatelliteServerRequestDownloadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerRequestDownloadArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Rejection
//  - AuthError
//  - Ffff
//  - Sdf
type SatelliteServerRequestDownloadResult struct {
  Success *TransferInformation `thrift:"success,0" db:"success" json:"success,omitempty"`
  Rejection *TTransferRejectedException `thrift:"rejection,1" db:"rejection" json:"rejection,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,2" db:"authError" json:"authError,omitempty"`
  Ffff *TInvocationException `thrift:"ffff,3" db:"ffff" json:"ffff,omitempty"`
  Sdf *TNotFoundException `thrift:"sdf,4" db:"sdf" json:"sdf,omitempty"`
}

func NewSatelliteServerRequestDownloadResult() *SatelliteServerRequestDownloadResult {
  return &SatelliteServerRequestDownloadResult{}
}

var SatelliteServerRequestDownloadResult_Success_DEFAULT *TransferInformation
func (p *SatelliteServerRequestDownloadResult) GetSuccess() *TransferInformation {
  if !p.IsSetSuccess() {
    return SatelliteServerRequestDownloadResult_Success_DEFAULT
  }
return p.Success
}
var SatelliteServerRequestDownloadResult_Rejection_DEFAULT *TTransferRejectedException
func (p *SatelliteServerRequestDownloadResult) GetRejection() *TTransferRejectedException {
  if !p.IsSetRejection() {
    return SatelliteServerRequestDownloadResult_Rejection_DEFAULT
  }
return p.Rejection
}
var SatelliteServerRequestDownloadResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerRequestDownloadResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerRequestDownloadResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerRequestDownloadResult_Ffff_DEFAULT *TInvocationException
func (p *SatelliteServerRequestDownloadResult) GetFfff() *TInvocationException {
  if !p.IsSetFfff() {
    return SatelliteServerRequestDownloadResult_Ffff_DEFAULT
  }
return p.Ffff
}
var SatelliteServerRequestDownloadResult_Sdf_DEFAULT *TNotFoundException
func (p *SatelliteServerRequestDownloadResult) GetSdf() *TNotFoundException {
  if !p.IsSetSdf() {
    return SatelliteServerRequestDownloadResult_Sdf_DEFAULT
  }
return p.Sdf
}
func (p *SatelliteServerRequestDownloadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerRequestDownloadResult) IsSetRejection() bool {
  return p.Rejection != nil
}

func (p *SatelliteServerRequestDownloadResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerRequestDownloadResult) IsSetFfff() bool {
  return p.Ffff != nil
}

func (p *SatelliteServerRequestDownloadResult) IsSetSdf() bool {
  return p.Sdf != nil
}

func (p *SatelliteServerRequestDownloadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerRequestDownloadResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TransferInformation{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SatelliteServerRequestDownloadResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Rejection = &TTransferRejectedException{}
  if err := p.Rejection.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rejection), err)
  }
  return nil
}

func (p *SatelliteServerRequestDownloadResult)  ReadField2(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerRequestDownloadResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ffff = &TInvocationException{}
  if err := p.Ffff.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ffff), err)
  }
  return nil
}

func (p *SatelliteServerRequestDownloadResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Sdf = &TNotFoundException{}
  if err := p.Sdf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sdf), err)
  }
  return nil
}

func (p *SatelliteServerRequestDownloadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("requestDownload_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerRequestDownloadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestDownloadResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRejection() {
    if err := oprot.WriteFieldBegin("rejection", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rejection: ", p), err) }
    if err := p.Rejection.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rejection), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rejection: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestDownloadResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestDownloadResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetFfff() {
    if err := oprot.WriteFieldBegin("ffff", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ffff: ", p), err) }
    if err := p.Ffff.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ffff), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ffff: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestDownloadResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetSdf() {
    if err := oprot.WriteFieldBegin("sdf", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sdf: ", p), err) }
    if err := p.Sdf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sdf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sdf: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestDownloadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerRequestDownloadResult(%+v)", *p)
}

// Attributes:
//  - DownloadToken
type SatelliteServerCancelDownloadArgs struct {
  DownloadToken string `thrift:"downloadToken,1" db:"downloadToken" json:"downloadToken"`
}

func NewSatelliteServerCancelDownloadArgs() *SatelliteServerCancelDownloadArgs {
  return &SatelliteServerCancelDownloadArgs{}
}


func (p *SatelliteServerCancelDownloadArgs) GetDownloadToken() string {
  return p.DownloadToken
}
func (p *SatelliteServerCancelDownloadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerCancelDownloadArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DownloadToken = v
}
  return nil
}

func (p *SatelliteServerCancelDownloadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cancelDownload_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerCancelDownloadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("downloadToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:downloadToken: ", p), err) }
  if err := oprot.WriteString(string(p.DownloadToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.downloadToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:downloadToken: ", p), err) }
  return err
}

func (p *SatelliteServerCancelDownloadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerCancelDownloadArgs(%+v)", *p)
}

// Attributes:
//  - Ex1
type SatelliteServerCancelDownloadResult struct {
  Ex1 *TInvalidTokenException `thrift:"ex1,1" db:"ex1" json:"ex1,omitempty"`
}

func NewSatelliteServerCancelDownloadResult() *SatelliteServerCancelDownloadResult {
  return &SatelliteServerCancelDownloadResult{}
}

var SatelliteServerCancelDownloadResult_Ex1_DEFAULT *TInvalidTokenException
func (p *SatelliteServerCancelDownloadResult) GetEx1() *TInvalidTokenException {
  if !p.IsSetEx1() {
    return SatelliteServerCancelDownloadResult_Ex1_DEFAULT
  }
return p.Ex1
}
func (p *SatelliteServerCancelDownloadResult) IsSetEx1() bool {
  return p.Ex1 != nil
}

func (p *SatelliteServerCancelDownloadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerCancelDownloadResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex1 = &TInvalidTokenException{}
  if err := p.Ex1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
  }
  return nil
}

func (p *SatelliteServerCancelDownloadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cancelDownload_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerCancelDownloadResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx1() {
    if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err) }
    if err := p.Ex1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err) }
  }
  return err
}

func (p *SatelliteServerCancelDownloadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerCancelDownloadResult(%+v)", *p)
}

// Attributes:
//  - UserToken
type SatelliteServerIsAuthenticatedArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
}

func NewSatelliteServerIsAuthenticatedArgs() *SatelliteServerIsAuthenticatedArgs {
  return &SatelliteServerIsAuthenticatedArgs{}
}


func (p *SatelliteServerIsAuthenticatedArgs) GetUserToken() Token {
  return p.UserToken
}
func (p *SatelliteServerIsAuthenticatedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerIsAuthenticatedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerIsAuthenticatedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isAuthenticated_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerIsAuthenticatedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerIsAuthenticatedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerIsAuthenticatedArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - ServerError
type SatelliteServerIsAuthenticatedResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,2" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerIsAuthenticatedResult() *SatelliteServerIsAuthenticatedResult {
  return &SatelliteServerIsAuthenticatedResult{}
}

var SatelliteServerIsAuthenticatedResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerIsAuthenticatedResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerIsAuthenticatedResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerIsAuthenticatedResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerIsAuthenticatedResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerIsAuthenticatedResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerIsAuthenticatedResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerIsAuthenticatedResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerIsAuthenticatedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerIsAuthenticatedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerIsAuthenticatedResult)  ReadField2(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerIsAuthenticatedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isAuthenticated_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerIsAuthenticatedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerIsAuthenticatedResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerIsAuthenticatedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerIsAuthenticatedResult(%+v)", *p)
}

// Attributes:
//  - UserToken
type SatelliteServerWhoamiArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
}

func NewSatelliteServerWhoamiArgs() *SatelliteServerWhoamiArgs {
  return &SatelliteServerWhoamiArgs{}
}


func (p *SatelliteServerWhoamiArgs) GetUserToken() Token {
  return p.UserToken
}
func (p *SatelliteServerWhoamiArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerWhoamiArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerWhoamiArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("whoami_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerWhoamiArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerWhoamiArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerWhoamiArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - ServerError
type SatelliteServerWhoamiResult struct {
  Success *WhoamiInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,2" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerWhoamiResult() *SatelliteServerWhoamiResult {
  return &SatelliteServerWhoamiResult{}
}

var SatelliteServerWhoamiResult_Success_DEFAULT *WhoamiInfo
func (p *SatelliteServerWhoamiResult) GetSuccess() *WhoamiInfo {
  if !p.IsSetSuccess() {
    return SatelliteServerWhoamiResult_Success_DEFAULT
  }
return p.Success
}
var SatelliteServerWhoamiResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerWhoamiResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerWhoamiResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerWhoamiResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerWhoamiResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerWhoamiResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerWhoamiResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerWhoamiResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerWhoamiResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerWhoamiResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerWhoamiResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &WhoamiInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SatelliteServerWhoamiResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerWhoamiResult)  ReadField2(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerWhoamiResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("whoami_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerWhoamiResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerWhoamiResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerWhoamiResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerWhoamiResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerWhoamiResult(%+v)", *p)
}

// Attributes:
//  - UserToken
type SatelliteServerInvalidateSessionArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
}

func NewSatelliteServerInvalidateSessionArgs() *SatelliteServerInvalidateSessionArgs {
  return &SatelliteServerInvalidateSessionArgs{}
}


func (p *SatelliteServerInvalidateSessionArgs) GetUserToken() Token {
  return p.UserToken
}
func (p *SatelliteServerInvalidateSessionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerInvalidateSessionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerInvalidateSessionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("invalidateSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerInvalidateSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerInvalidateSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerInvalidateSessionArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type SatelliteServerInvalidateSessionResult struct {
  Ex *TInvalidTokenException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewSatelliteServerInvalidateSessionResult() *SatelliteServerInvalidateSessionResult {
  return &SatelliteServerInvalidateSessionResult{}
}

var SatelliteServerInvalidateSessionResult_Ex_DEFAULT *TInvalidTokenException
func (p *SatelliteServerInvalidateSessionResult) GetEx() *TInvalidTokenException {
  if !p.IsSetEx() {
    return SatelliteServerInvalidateSessionResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *SatelliteServerInvalidateSessionResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *SatelliteServerInvalidateSessionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerInvalidateSessionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &TInvalidTokenException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *SatelliteServerInvalidateSessionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("invalidateSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerInvalidateSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *SatelliteServerInvalidateSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerInvalidateSessionResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - Page
type SatelliteServerGetUserListArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
}

func NewSatelliteServerGetUserListArgs() *SatelliteServerGetUserListArgs {
  return &SatelliteServerGetUserListArgs{}
}


func (p *SatelliteServerGetUserListArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerGetUserListArgs) GetPage() int32 {
  return p.Page
}
func (p *SatelliteServerGetUserListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetUserListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerGetUserListArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *SatelliteServerGetUserListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetUserListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerGetUserListArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *SatelliteServerGetUserListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetUserListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
//  - ServerError
type SatelliteServerGetUserListResult struct {
  Success []*UserInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,2" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerGetUserListResult() *SatelliteServerGetUserListResult {
  return &SatelliteServerGetUserListResult{}
}

var SatelliteServerGetUserListResult_Success_DEFAULT []*UserInfo

func (p *SatelliteServerGetUserListResult) GetSuccess() []*UserInfo {
  return p.Success
}
var SatelliteServerGetUserListResult_Failure_DEFAULT *TAuthorizationException
func (p *SatelliteServerGetUserListResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return SatelliteServerGetUserListResult_Failure_DEFAULT
  }
return p.Failure
}
var SatelliteServerGetUserListResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerGetUserListResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerGetUserListResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerGetUserListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetUserListResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *SatelliteServerGetUserListResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerGetUserListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetUserListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserInfo, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem112 := &UserInfo{}
    if err := _elem112.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem112), err)
    }
    p.Success = append(p.Success, _elem112)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SatelliteServerGetUserListResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *SatelliteServerGetUserListResult)  ReadField2(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerGetUserListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetUserListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetUserListResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetUserListResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetUserListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetUserListResult(%+v)", *p)
}

// Attributes:
//  - UserToken
type SatelliteServerGetUserConfigArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
}

func NewSatelliteServerGetUserConfigArgs() *SatelliteServerGetUserConfigArgs {
  return &SatelliteServerGetUserConfigArgs{}
}


func (p *SatelliteServerGetUserConfigArgs) GetUserToken() Token {
  return p.UserToken
}
func (p *SatelliteServerGetUserConfigArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetUserConfigArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerGetUserConfigArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetUserConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerGetUserConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetUserConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
//  - ServerError
type SatelliteServerGetUserConfigResult struct {
  Success *SatelliteUserConfig `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,2" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerGetUserConfigResult() *SatelliteServerGetUserConfigResult {
  return &SatelliteServerGetUserConfigResult{}
}

var SatelliteServerGetUserConfigResult_Success_DEFAULT *SatelliteUserConfig
func (p *SatelliteServerGetUserConfigResult) GetSuccess() *SatelliteUserConfig {
  if !p.IsSetSuccess() {
    return SatelliteServerGetUserConfigResult_Success_DEFAULT
  }
return p.Success
}
var SatelliteServerGetUserConfigResult_Failure_DEFAULT *TAuthorizationException
func (p *SatelliteServerGetUserConfigResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return SatelliteServerGetUserConfigResult_Failure_DEFAULT
  }
return p.Failure
}
var SatelliteServerGetUserConfigResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerGetUserConfigResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerGetUserConfigResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerGetUserConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetUserConfigResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *SatelliteServerGetUserConfigResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerGetUserConfigResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetUserConfigResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SatelliteUserConfig{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SatelliteServerGetUserConfigResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *SatelliteServerGetUserConfigResult)  ReadField2(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerGetUserConfigResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetUserConfigResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetUserConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetUserConfigResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetUserConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetUserConfigResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - Config
type SatelliteServerSetUserConfigArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  Config *SatelliteUserConfig `thrift:"config,2" db:"config" json:"config"`
}

func NewSatelliteServerSetUserConfigArgs() *SatelliteServerSetUserConfigArgs {
  return &SatelliteServerSetUserConfigArgs{}
}


func (p *SatelliteServerSetUserConfigArgs) GetUserToken() Token {
  return p.UserToken
}
var SatelliteServerSetUserConfigArgs_Config_DEFAULT *SatelliteUserConfig
func (p *SatelliteServerSetUserConfigArgs) GetConfig() *SatelliteUserConfig {
  if !p.IsSetConfig() {
    return SatelliteServerSetUserConfigArgs_Config_DEFAULT
  }
return p.Config
}
func (p *SatelliteServerSetUserConfigArgs) IsSetConfig() bool {
  return p.Config != nil
}

func (p *SatelliteServerSetUserConfigArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerSetUserConfigArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerSetUserConfigArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Config = &SatelliteUserConfig{}
  if err := p.Config.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *SatelliteServerSetUserConfigArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setUserConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerSetUserConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerSetUserConfigArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("config", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:config: ", p), err) }
  if err := p.Config.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:config: ", p), err) }
  return err
}

func (p *SatelliteServerSetUserConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerSetUserConfigArgs(%+v)", *p)
}

// Attributes:
//  - Failure
//  - ServerError
type SatelliteServerSetUserConfigResult struct {
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,2" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerSetUserConfigResult() *SatelliteServerSetUserConfigResult {
  return &SatelliteServerSetUserConfigResult{}
}

var SatelliteServerSetUserConfigResult_Failure_DEFAULT *TAuthorizationException
func (p *SatelliteServerSetUserConfigResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return SatelliteServerSetUserConfigResult_Failure_DEFAULT
  }
return p.Failure
}
var SatelliteServerSetUserConfigResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerSetUserConfigResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerSetUserConfigResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerSetUserConfigResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *SatelliteServerSetUserConfigResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerSetUserConfigResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerSetUserConfigResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *SatelliteServerSetUserConfigResult)  ReadField2(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerSetUserConfigResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setUserConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerSetUserConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetUserConfigResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetUserConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerSetUserConfigResult(%+v)", *p)
}

type SatelliteServerGetOperatingSystemsArgs struct {
}

func NewSatelliteServerGetOperatingSystemsArgs() *SatelliteServerGetOperatingSystemsArgs {
  return &SatelliteServerGetOperatingSystemsArgs{}
}

func (p *SatelliteServerGetOperatingSystemsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetOperatingSystemsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOperatingSystems_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetOperatingSystemsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetOperatingSystemsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SatelliteServerGetOperatingSystemsResult struct {
  Success []*OperatingSystem `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSatelliteServerGetOperatingSystemsResult() *SatelliteServerGetOperatingSystemsResult {
  return &SatelliteServerGetOperatingSystemsResult{}
}

var SatelliteServerGetOperatingSystemsResult_Success_DEFAULT []*OperatingSystem

func (p *SatelliteServerGetOperatingSystemsResult) GetSuccess() []*OperatingSystem {
  return p.Success
}
func (p *SatelliteServerGetOperatingSystemsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetOperatingSystemsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetOperatingSystemsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*OperatingSystem, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem113 := &OperatingSystem{}
    if err := _elem113.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem113), err)
    }
    p.Success = append(p.Success, _elem113)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SatelliteServerGetOperatingSystemsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOperatingSystems_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetOperatingSystemsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetOperatingSystemsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetOperatingSystemsResult(%+v)", *p)
}

type SatelliteServerGetVirtualizersArgs struct {
}

func NewSatelliteServerGetVirtualizersArgs() *SatelliteServerGetVirtualizersArgs {
  return &SatelliteServerGetVirtualizersArgs{}
}

func (p *SatelliteServerGetVirtualizersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetVirtualizersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getVirtualizers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetVirtualizersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetVirtualizersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SatelliteServerGetVirtualizersResult struct {
  Success []*Virtualizer `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSatelliteServerGetVirtualizersResult() *SatelliteServerGetVirtualizersResult {
  return &SatelliteServerGetVirtualizersResult{}
}

var SatelliteServerGetVirtualizersResult_Success_DEFAULT []*Virtualizer

func (p *SatelliteServerGetVirtualizersResult) GetSuccess() []*Virtualizer {
  return p.Success
}
func (p *SatelliteServerGetVirtualizersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetVirtualizersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetVirtualizersResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Virtualizer, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem114 := &Virtualizer{}
    if err := _elem114.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem114), err)
    }
    p.Success = append(p.Success, _elem114)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SatelliteServerGetVirtualizersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getVirtualizers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetVirtualizersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetVirtualizersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetVirtualizersResult(%+v)", *p)
}

type SatelliteServerGetAllOrganizationsArgs struct {
}

func NewSatelliteServerGetAllOrganizationsArgs() *SatelliteServerGetAllOrganizationsArgs {
  return &SatelliteServerGetAllOrganizationsArgs{}
}

func (p *SatelliteServerGetAllOrganizationsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetAllOrganizationsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllOrganizations_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetAllOrganizationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetAllOrganizationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SatelliteServerGetAllOrganizationsResult struct {
  Success []*Organization `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSatelliteServerGetAllOrganizationsResult() *SatelliteServerGetAllOrganizationsResult {
  return &SatelliteServerGetAllOrganizationsResult{}
}

var SatelliteServerGetAllOrganizationsResult_Success_DEFAULT []*Organization

func (p *SatelliteServerGetAllOrganizationsResult) GetSuccess() []*Organization {
  return p.Success
}
func (p *SatelliteServerGetAllOrganizationsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetAllOrganizationsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetAllOrganizationsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Organization, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem115 := &Organization{}
    if err := _elem115.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem115), err)
    }
    p.Success = append(p.Success, _elem115)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SatelliteServerGetAllOrganizationsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllOrganizations_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetAllOrganizationsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetAllOrganizationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetAllOrganizationsResult(%+v)", *p)
}

type SatelliteServerGetLocationsArgs struct {
}

func NewSatelliteServerGetLocationsArgs() *SatelliteServerGetLocationsArgs {
  return &SatelliteServerGetLocationsArgs{}
}

func (p *SatelliteServerGetLocationsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetLocationsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLocations_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetLocationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetLocationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SatelliteServerGetLocationsResult struct {
  Success []*Location `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSatelliteServerGetLocationsResult() *SatelliteServerGetLocationsResult {
  return &SatelliteServerGetLocationsResult{}
}

var SatelliteServerGetLocationsResult_Success_DEFAULT []*Location

func (p *SatelliteServerGetLocationsResult) GetSuccess() []*Location {
  return p.Success
}
func (p *SatelliteServerGetLocationsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetLocationsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetLocationsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Location, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem116 := &Location{}
    if err := _elem116.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem116), err)
    }
    p.Success = append(p.Success, _elem116)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SatelliteServerGetLocationsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLocations_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetLocationsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetLocationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetLocationsResult(%+v)", *p)
}

type SatelliteServerGetStatusArgs struct {
}

func NewSatelliteServerGetStatusArgs() *SatelliteServerGetStatusArgs {
  return &SatelliteServerGetStatusArgs{}
}

func (p *SatelliteServerGetStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SatelliteServerGetStatusResult struct {
  Success *SatelliteStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSatelliteServerGetStatusResult() *SatelliteServerGetStatusResult {
  return &SatelliteServerGetStatusResult{}
}

var SatelliteServerGetStatusResult_Success_DEFAULT *SatelliteStatus
func (p *SatelliteServerGetStatusResult) GetSuccess() *SatelliteStatus {
  if !p.IsSetSuccess() {
    return SatelliteServerGetStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *SatelliteServerGetStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SatelliteStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SatelliteServerGetStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetStatusResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - TagSearch
//  - Page
type SatelliteServerGetImageListArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  TagSearch []string `thrift:"tagSearch,2" db:"tagSearch" json:"tagSearch"`
  Page int32 `thrift:"page,3" db:"page" json:"page"`
}

func NewSatelliteServerGetImageListArgs() *SatelliteServerGetImageListArgs {
  return &SatelliteServerGetImageListArgs{}
}


func (p *SatelliteServerGetImageListArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerGetImageListArgs) GetTagSearch() []string {
  return p.TagSearch
}

func (p *SatelliteServerGetImageListArgs) GetPage() int32 {
  return p.Page
}
func (p *SatelliteServerGetImageListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetImageListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerGetImageListArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.TagSearch =  tSlice
  for i := 0; i < size; i ++ {
var _elem117 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem117 = v
}
    p.TagSearch = append(p.TagSearch, _elem117)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SatelliteServerGetImageListArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *SatelliteServerGetImageListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getImageList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetImageListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerGetImageListArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tagSearch", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tagSearch: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.TagSearch)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TagSearch {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tagSearch: ", p), err) }
  return err
}

func (p *SatelliteServerGetImageListArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:page: ", p), err) }
  return err
}

func (p *SatelliteServerGetImageListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetImageListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - ServerError
type SatelliteServerGetImageListResult struct {
  Success []*ImageSummaryRead `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,2" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerGetImageListResult() *SatelliteServerGetImageListResult {
  return &SatelliteServerGetImageListResult{}
}

var SatelliteServerGetImageListResult_Success_DEFAULT []*ImageSummaryRead

func (p *SatelliteServerGetImageListResult) GetSuccess() []*ImageSummaryRead {
  return p.Success
}
var SatelliteServerGetImageListResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerGetImageListResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerGetImageListResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerGetImageListResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerGetImageListResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerGetImageListResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerGetImageListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetImageListResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerGetImageListResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerGetImageListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetImageListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ImageSummaryRead, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem118 := &ImageSummaryRead{}
    if err := _elem118.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem118), err)
    }
    p.Success = append(p.Success, _elem118)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SatelliteServerGetImageListResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerGetImageListResult)  ReadField2(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerGetImageListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getImageList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetImageListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImageListResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImageListResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImageListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetImageListResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageBaseId
type SatelliteServerGetImageDetailsArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageBaseId UUID `thrift:"imageBaseId,2" db:"imageBaseId" json:"imageBaseId"`
}

func NewSatelliteServerGetImageDetailsArgs() *SatelliteServerGetImageDetailsArgs {
  return &SatelliteServerGetImageDetailsArgs{}
}


func (p *SatelliteServerGetImageDetailsArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerGetImageDetailsArgs) GetImageBaseId() UUID {
  return p.ImageBaseId
}
func (p *SatelliteServerGetImageDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetImageDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerGetImageDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *SatelliteServerGetImageDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getImageDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetImageDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerGetImageDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageBaseId: ", p), err) }
  return err
}

func (p *SatelliteServerGetImageDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetImageDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerGetImageDetailsResult struct {
  Success *ImageDetailsRead `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerGetImageDetailsResult() *SatelliteServerGetImageDetailsResult {
  return &SatelliteServerGetImageDetailsResult{}
}

var SatelliteServerGetImageDetailsResult_Success_DEFAULT *ImageDetailsRead
func (p *SatelliteServerGetImageDetailsResult) GetSuccess() *ImageDetailsRead {
  if !p.IsSetSuccess() {
    return SatelliteServerGetImageDetailsResult_Success_DEFAULT
  }
return p.Success
}
var SatelliteServerGetImageDetailsResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerGetImageDetailsResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerGetImageDetailsResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerGetImageDetailsResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerGetImageDetailsResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerGetImageDetailsResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerGetImageDetailsResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerGetImageDetailsResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerGetImageDetailsResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerGetImageDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetImageDetailsResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerGetImageDetailsResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerGetImageDetailsResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerGetImageDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetImageDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ImageDetailsRead{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SatelliteServerGetImageDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerGetImageDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerGetImageDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerGetImageDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getImageDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetImageDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImageDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImageDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImageDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImageDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetImageDetailsResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageName
type SatelliteServerCreateImageArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageName string `thrift:"imageName,2" db:"imageName" json:"imageName"`
}

func NewSatelliteServerCreateImageArgs() *SatelliteServerCreateImageArgs {
  return &SatelliteServerCreateImageArgs{}
}


func (p *SatelliteServerCreateImageArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerCreateImageArgs) GetImageName() string {
  return p.ImageName
}
func (p *SatelliteServerCreateImageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerCreateImageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerCreateImageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ImageName = v
}
  return nil
}

func (p *SatelliteServerCreateImageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createImage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerCreateImageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerCreateImageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageName: ", p), err) }
  if err := oprot.WriteString(string(p.ImageName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageName: ", p), err) }
  return err
}

func (p *SatelliteServerCreateImageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerCreateImageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - Error
type SatelliteServerCreateImageResult struct {
  Success *UUID `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  Error *TInvocationException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewSatelliteServerCreateImageResult() *SatelliteServerCreateImageResult {
  return &SatelliteServerCreateImageResult{}
}

var SatelliteServerCreateImageResult_Success_DEFAULT UUID
func (p *SatelliteServerCreateImageResult) GetSuccess() UUID {
  if !p.IsSetSuccess() {
    return SatelliteServerCreateImageResult_Success_DEFAULT
  }
return *p.Success
}
var SatelliteServerCreateImageResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerCreateImageResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerCreateImageResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerCreateImageResult_Error_DEFAULT *TInvocationException
func (p *SatelliteServerCreateImageResult) GetError() *TInvocationException {
  if !p.IsSetError() {
    return SatelliteServerCreateImageResult_Error_DEFAULT
  }
return p.Error
}
func (p *SatelliteServerCreateImageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerCreateImageResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerCreateImageResult) IsSetError() bool {
  return p.Error != nil
}

func (p *SatelliteServerCreateImageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerCreateImageResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := UUID(v)
  p.Success = &temp
}
  return nil
}

func (p *SatelliteServerCreateImageResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerCreateImageResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Error = &TInvocationException{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *SatelliteServerCreateImageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createImage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerCreateImageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerCreateImageResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerCreateImageResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *SatelliteServerCreateImageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerCreateImageResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageBaseId
//  - Image
type SatelliteServerUpdateImageBaseArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageBaseId UUID `thrift:"imageBaseId,2" db:"imageBaseId" json:"imageBaseId"`
  Image *ImageBaseWrite `thrift:"image,3" db:"image" json:"image"`
}

func NewSatelliteServerUpdateImageBaseArgs() *SatelliteServerUpdateImageBaseArgs {
  return &SatelliteServerUpdateImageBaseArgs{}
}


func (p *SatelliteServerUpdateImageBaseArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerUpdateImageBaseArgs) GetImageBaseId() UUID {
  return p.ImageBaseId
}
var SatelliteServerUpdateImageBaseArgs_Image_DEFAULT *ImageBaseWrite
func (p *SatelliteServerUpdateImageBaseArgs) GetImage() *ImageBaseWrite {
  if !p.IsSetImage() {
    return SatelliteServerUpdateImageBaseArgs_Image_DEFAULT
  }
return p.Image
}
func (p *SatelliteServerUpdateImageBaseArgs) IsSetImage() bool {
  return p.Image != nil
}

func (p *SatelliteServerUpdateImageBaseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerUpdateImageBaseArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerUpdateImageBaseArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *SatelliteServerUpdateImageBaseArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Image = &ImageBaseWrite{}
  if err := p.Image.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Image), err)
  }
  return nil
}

func (p *SatelliteServerUpdateImageBaseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateImageBase_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerUpdateImageBaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerUpdateImageBaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageBaseId: ", p), err) }
  return err
}

func (p *SatelliteServerUpdateImageBaseArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:image: ", p), err) }
  if err := p.Image.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Image), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:image: ", p), err) }
  return err
}

func (p *SatelliteServerUpdateImageBaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerUpdateImageBaseArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - NotFound
//  - ImgError
type SatelliteServerUpdateImageBaseResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ImgError *TInvocationException `thrift:"imgError,3" db:"imgError" json:"imgError,omitempty"`
}

func NewSatelliteServerUpdateImageBaseResult() *SatelliteServerUpdateImageBaseResult {
  return &SatelliteServerUpdateImageBaseResult{}
}

var SatelliteServerUpdateImageBaseResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerUpdateImageBaseResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerUpdateImageBaseResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerUpdateImageBaseResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerUpdateImageBaseResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerUpdateImageBaseResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerUpdateImageBaseResult_ImgError_DEFAULT *TInvocationException
func (p *SatelliteServerUpdateImageBaseResult) GetImgError() *TInvocationException {
  if !p.IsSetImgError() {
    return SatelliteServerUpdateImageBaseResult_ImgError_DEFAULT
  }
return p.ImgError
}
func (p *SatelliteServerUpdateImageBaseResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerUpdateImageBaseResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerUpdateImageBaseResult) IsSetImgError() bool {
  return p.ImgError != nil
}

func (p *SatelliteServerUpdateImageBaseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerUpdateImageBaseResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerUpdateImageBaseResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerUpdateImageBaseResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ImgError = &TInvocationException{}
  if err := p.ImgError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImgError), err)
  }
  return nil
}

func (p *SatelliteServerUpdateImageBaseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateImageBase_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerUpdateImageBaseResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerUpdateImageBaseResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerUpdateImageBaseResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetImgError() {
    if err := oprot.WriteFieldBegin("imgError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:imgError: ", p), err) }
    if err := p.ImgError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImgError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:imgError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerUpdateImageBaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerUpdateImageBaseResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageVersionId
//  - Image
type SatelliteServerUpdateImageVersionArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageVersionId UUID `thrift:"imageVersionId,2" db:"imageVersionId" json:"imageVersionId"`
  Image *ImageVersionWrite `thrift:"image,3" db:"image" json:"image"`
}

func NewSatelliteServerUpdateImageVersionArgs() *SatelliteServerUpdateImageVersionArgs {
  return &SatelliteServerUpdateImageVersionArgs{}
}


func (p *SatelliteServerUpdateImageVersionArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerUpdateImageVersionArgs) GetImageVersionId() UUID {
  return p.ImageVersionId
}
var SatelliteServerUpdateImageVersionArgs_Image_DEFAULT *ImageVersionWrite
func (p *SatelliteServerUpdateImageVersionArgs) GetImage() *ImageVersionWrite {
  if !p.IsSetImage() {
    return SatelliteServerUpdateImageVersionArgs_Image_DEFAULT
  }
return p.Image
}
func (p *SatelliteServerUpdateImageVersionArgs) IsSetImage() bool {
  return p.Image != nil
}

func (p *SatelliteServerUpdateImageVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerUpdateImageVersionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerUpdateImageVersionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageVersionId = temp
}
  return nil
}

func (p *SatelliteServerUpdateImageVersionArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Image = &ImageVersionWrite{}
  if err := p.Image.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Image), err)
  }
  return nil
}

func (p *SatelliteServerUpdateImageVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateImageVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerUpdateImageVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerUpdateImageVersionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageVersionId: ", p), err) }
  return err
}

func (p *SatelliteServerUpdateImageVersionArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:image: ", p), err) }
  if err := p.Image.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Image), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:image: ", p), err) }
  return err
}

func (p *SatelliteServerUpdateImageVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerUpdateImageVersionArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - NotFound
//  - ImgError
type SatelliteServerUpdateImageVersionResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ImgError *TInvocationException `thrift:"imgError,3" db:"imgError" json:"imgError,omitempty"`
}

func NewSatelliteServerUpdateImageVersionResult() *SatelliteServerUpdateImageVersionResult {
  return &SatelliteServerUpdateImageVersionResult{}
}

var SatelliteServerUpdateImageVersionResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerUpdateImageVersionResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerUpdateImageVersionResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerUpdateImageVersionResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerUpdateImageVersionResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerUpdateImageVersionResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerUpdateImageVersionResult_ImgError_DEFAULT *TInvocationException
func (p *SatelliteServerUpdateImageVersionResult) GetImgError() *TInvocationException {
  if !p.IsSetImgError() {
    return SatelliteServerUpdateImageVersionResult_ImgError_DEFAULT
  }
return p.ImgError
}
func (p *SatelliteServerUpdateImageVersionResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerUpdateImageVersionResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerUpdateImageVersionResult) IsSetImgError() bool {
  return p.ImgError != nil
}

func (p *SatelliteServerUpdateImageVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerUpdateImageVersionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerUpdateImageVersionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerUpdateImageVersionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ImgError = &TInvocationException{}
  if err := p.ImgError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImgError), err)
  }
  return nil
}

func (p *SatelliteServerUpdateImageVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateImageVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerUpdateImageVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerUpdateImageVersionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerUpdateImageVersionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetImgError() {
    if err := oprot.WriteFieldBegin("imgError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:imgError: ", p), err) }
    if err := p.ImgError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImgError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:imgError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerUpdateImageVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerUpdateImageVersionResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageVersionId
type SatelliteServerDeleteImageVersionArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageVersionId UUID `thrift:"imageVersionId,2" db:"imageVersionId" json:"imageVersionId"`
}

func NewSatelliteServerDeleteImageVersionArgs() *SatelliteServerDeleteImageVersionArgs {
  return &SatelliteServerDeleteImageVersionArgs{}
}


func (p *SatelliteServerDeleteImageVersionArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerDeleteImageVersionArgs) GetImageVersionId() UUID {
  return p.ImageVersionId
}
func (p *SatelliteServerDeleteImageVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerDeleteImageVersionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerDeleteImageVersionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageVersionId = temp
}
  return nil
}

func (p *SatelliteServerDeleteImageVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteImageVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerDeleteImageVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerDeleteImageVersionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageVersionId: ", p), err) }
  return err
}

func (p *SatelliteServerDeleteImageVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerDeleteImageVersionArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerDeleteImageVersionResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerDeleteImageVersionResult() *SatelliteServerDeleteImageVersionResult {
  return &SatelliteServerDeleteImageVersionResult{}
}

var SatelliteServerDeleteImageVersionResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerDeleteImageVersionResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerDeleteImageVersionResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerDeleteImageVersionResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerDeleteImageVersionResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerDeleteImageVersionResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerDeleteImageVersionResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerDeleteImageVersionResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerDeleteImageVersionResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerDeleteImageVersionResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerDeleteImageVersionResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerDeleteImageVersionResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerDeleteImageVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerDeleteImageVersionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerDeleteImageVersionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerDeleteImageVersionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerDeleteImageVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteImageVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerDeleteImageVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerDeleteImageVersionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerDeleteImageVersionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerDeleteImageVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerDeleteImageVersionResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageBaseId
type SatelliteServerDeleteImageBaseArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageBaseId UUID `thrift:"imageBaseId,2" db:"imageBaseId" json:"imageBaseId"`
}

func NewSatelliteServerDeleteImageBaseArgs() *SatelliteServerDeleteImageBaseArgs {
  return &SatelliteServerDeleteImageBaseArgs{}
}


func (p *SatelliteServerDeleteImageBaseArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerDeleteImageBaseArgs) GetImageBaseId() UUID {
  return p.ImageBaseId
}
func (p *SatelliteServerDeleteImageBaseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerDeleteImageBaseArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerDeleteImageBaseArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *SatelliteServerDeleteImageBaseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteImageBase_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerDeleteImageBaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerDeleteImageBaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageBaseId: ", p), err) }
  return err
}

func (p *SatelliteServerDeleteImageBaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerDeleteImageBaseArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerDeleteImageBaseResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerDeleteImageBaseResult() *SatelliteServerDeleteImageBaseResult {
  return &SatelliteServerDeleteImageBaseResult{}
}

var SatelliteServerDeleteImageBaseResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerDeleteImageBaseResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerDeleteImageBaseResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerDeleteImageBaseResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerDeleteImageBaseResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerDeleteImageBaseResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerDeleteImageBaseResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerDeleteImageBaseResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerDeleteImageBaseResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerDeleteImageBaseResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerDeleteImageBaseResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerDeleteImageBaseResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerDeleteImageBaseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerDeleteImageBaseResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerDeleteImageBaseResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerDeleteImageBaseResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerDeleteImageBaseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteImageBase_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerDeleteImageBaseResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerDeleteImageBaseResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerDeleteImageBaseResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerDeleteImageBaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerDeleteImageBaseResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageBaseId
//  - Permissions
type SatelliteServerWriteImagePermissionsArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageBaseId UUID `thrift:"imageBaseId,2" db:"imageBaseId" json:"imageBaseId"`
  Permissions map[UUID]*ImagePermissions `thrift:"permissions,3" db:"permissions" json:"permissions"`
}

func NewSatelliteServerWriteImagePermissionsArgs() *SatelliteServerWriteImagePermissionsArgs {
  return &SatelliteServerWriteImagePermissionsArgs{}
}


func (p *SatelliteServerWriteImagePermissionsArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerWriteImagePermissionsArgs) GetImageBaseId() UUID {
  return p.ImageBaseId
}

func (p *SatelliteServerWriteImagePermissionsArgs) GetPermissions() map[UUID]*ImagePermissions {
  return p.Permissions
}
func (p *SatelliteServerWriteImagePermissionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerWriteImagePermissionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerWriteImagePermissionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *SatelliteServerWriteImagePermissionsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[UUID]*ImagePermissions, size)
  p.Permissions =  tMap
  for i := 0; i < size; i ++ {
var _key119 UUID
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := UUID(v)
    _key119 = temp
}
    _val120 := &ImagePermissions{}
    if err := _val120.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val120), err)
    }
    p.Permissions[_key119] = _val120
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SatelliteServerWriteImagePermissionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("writeImagePermissions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerWriteImagePermissionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerWriteImagePermissionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageBaseId: ", p), err) }
  return err
}

func (p *SatelliteServerWriteImagePermissionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("permissions", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:permissions: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Permissions)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Permissions {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:permissions: ", p), err) }
  return err
}

func (p *SatelliteServerWriteImagePermissionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerWriteImagePermissionsArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerWriteImagePermissionsResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerWriteImagePermissionsResult() *SatelliteServerWriteImagePermissionsResult {
  return &SatelliteServerWriteImagePermissionsResult{}
}

var SatelliteServerWriteImagePermissionsResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerWriteImagePermissionsResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerWriteImagePermissionsResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerWriteImagePermissionsResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerWriteImagePermissionsResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerWriteImagePermissionsResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerWriteImagePermissionsResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerWriteImagePermissionsResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerWriteImagePermissionsResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerWriteImagePermissionsResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerWriteImagePermissionsResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerWriteImagePermissionsResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerWriteImagePermissionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerWriteImagePermissionsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerWriteImagePermissionsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerWriteImagePermissionsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerWriteImagePermissionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("writeImagePermissions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerWriteImagePermissionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerWriteImagePermissionsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerWriteImagePermissionsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerWriteImagePermissionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerWriteImagePermissionsResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageBaseId
type SatelliteServerGetImagePermissionsArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageBaseId UUID `thrift:"imageBaseId,2" db:"imageBaseId" json:"imageBaseId"`
}

func NewSatelliteServerGetImagePermissionsArgs() *SatelliteServerGetImagePermissionsArgs {
  return &SatelliteServerGetImagePermissionsArgs{}
}


func (p *SatelliteServerGetImagePermissionsArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerGetImagePermissionsArgs) GetImageBaseId() UUID {
  return p.ImageBaseId
}
func (p *SatelliteServerGetImagePermissionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetImagePermissionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerGetImagePermissionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *SatelliteServerGetImagePermissionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getImagePermissions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetImagePermissionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerGetImagePermissionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageBaseId: ", p), err) }
  return err
}

func (p *SatelliteServerGetImagePermissionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetImagePermissionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerGetImagePermissionsResult struct {
  Success map[UUID]*ImagePermissions `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerGetImagePermissionsResult() *SatelliteServerGetImagePermissionsResult {
  return &SatelliteServerGetImagePermissionsResult{}
}

var SatelliteServerGetImagePermissionsResult_Success_DEFAULT map[UUID]*ImagePermissions

func (p *SatelliteServerGetImagePermissionsResult) GetSuccess() map[UUID]*ImagePermissions {
  return p.Success
}
var SatelliteServerGetImagePermissionsResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerGetImagePermissionsResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerGetImagePermissionsResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerGetImagePermissionsResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerGetImagePermissionsResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerGetImagePermissionsResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerGetImagePermissionsResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerGetImagePermissionsResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerGetImagePermissionsResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerGetImagePermissionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetImagePermissionsResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerGetImagePermissionsResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerGetImagePermissionsResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerGetImagePermissionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetImagePermissionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[UUID]*ImagePermissions, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key121 UUID
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := UUID(v)
    _key121 = temp
}
    _val122 := &ImagePermissions{}
    if err := _val122.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val122), err)
    }
    p.Success[_key121] = _val122
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SatelliteServerGetImagePermissionsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerGetImagePermissionsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerGetImagePermissionsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerGetImagePermissionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getImagePermissions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetImagePermissionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImagePermissionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImagePermissionsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImagePermissionsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImagePermissionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetImagePermissionsResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageBaseId
//  - NewOwnerId_
type SatelliteServerSetImageOwnerArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageBaseId UUID `thrift:"imageBaseId,2" db:"imageBaseId" json:"imageBaseId"`
  NewOwnerId_ UUID `thrift:"newOwnerId,3" db:"newOwnerId" json:"newOwnerId"`
}

func NewSatelliteServerSetImageOwnerArgs() *SatelliteServerSetImageOwnerArgs {
  return &SatelliteServerSetImageOwnerArgs{}
}


func (p *SatelliteServerSetImageOwnerArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerSetImageOwnerArgs) GetImageBaseId() UUID {
  return p.ImageBaseId
}

func (p *SatelliteServerSetImageOwnerArgs) GetNewOwnerId_() UUID {
  return p.NewOwnerId_
}
func (p *SatelliteServerSetImageOwnerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerSetImageOwnerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerSetImageOwnerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *SatelliteServerSetImageOwnerArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UUID(v)
  p.NewOwnerId_ = temp
}
  return nil
}

func (p *SatelliteServerSetImageOwnerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setImageOwner_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerSetImageOwnerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerSetImageOwnerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageBaseId: ", p), err) }
  return err
}

func (p *SatelliteServerSetImageOwnerArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newOwnerId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newOwnerId: ", p), err) }
  if err := oprot.WriteString(string(p.NewOwnerId_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newOwnerId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newOwnerId: ", p), err) }
  return err
}

func (p *SatelliteServerSetImageOwnerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerSetImageOwnerArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerSetImageOwnerResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerSetImageOwnerResult() *SatelliteServerSetImageOwnerResult {
  return &SatelliteServerSetImageOwnerResult{}
}

var SatelliteServerSetImageOwnerResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerSetImageOwnerResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerSetImageOwnerResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerSetImageOwnerResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerSetImageOwnerResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerSetImageOwnerResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerSetImageOwnerResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerSetImageOwnerResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerSetImageOwnerResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerSetImageOwnerResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerSetImageOwnerResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerSetImageOwnerResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerSetImageOwnerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerSetImageOwnerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerSetImageOwnerResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerSetImageOwnerResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerSetImageOwnerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setImageOwner_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerSetImageOwnerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetImageOwnerResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetImageOwnerResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetImageOwnerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerSetImageOwnerResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageBaseId
//  - ExpireTime
type SatelliteServerSetImageVersionExpiryArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageBaseId UUID `thrift:"imageBaseId,2" db:"imageBaseId" json:"imageBaseId"`
  ExpireTime UnixTimestamp `thrift:"expireTime,3" db:"expireTime" json:"expireTime"`
}

func NewSatelliteServerSetImageVersionExpiryArgs() *SatelliteServerSetImageVersionExpiryArgs {
  return &SatelliteServerSetImageVersionExpiryArgs{}
}


func (p *SatelliteServerSetImageVersionExpiryArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerSetImageVersionExpiryArgs) GetImageBaseId() UUID {
  return p.ImageBaseId
}

func (p *SatelliteServerSetImageVersionExpiryArgs) GetExpireTime() UnixTimestamp {
  return p.ExpireTime
}
func (p *SatelliteServerSetImageVersionExpiryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerSetImageVersionExpiryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerSetImageVersionExpiryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *SatelliteServerSetImageVersionExpiryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UnixTimestamp(v)
  p.ExpireTime = temp
}
  return nil
}

func (p *SatelliteServerSetImageVersionExpiryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setImageVersionExpiry_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerSetImageVersionExpiryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerSetImageVersionExpiryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageBaseId: ", p), err) }
  return err
}

func (p *SatelliteServerSetImageVersionExpiryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expireTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expireTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExpireTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expireTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expireTime: ", p), err) }
  return err
}

func (p *SatelliteServerSetImageVersionExpiryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerSetImageVersionExpiryArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - NotFound
//  - ServerError
//  - DateError
type SatelliteServerSetImageVersionExpiryResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
  DateError *TInvalidDateParam `thrift:"dateError,4" db:"dateError" json:"dateError,omitempty"`
}

func NewSatelliteServerSetImageVersionExpiryResult() *SatelliteServerSetImageVersionExpiryResult {
  return &SatelliteServerSetImageVersionExpiryResult{}
}

var SatelliteServerSetImageVersionExpiryResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerSetImageVersionExpiryResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerSetImageVersionExpiryResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerSetImageVersionExpiryResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerSetImageVersionExpiryResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerSetImageVersionExpiryResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerSetImageVersionExpiryResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerSetImageVersionExpiryResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerSetImageVersionExpiryResult_ServerError_DEFAULT
  }
return p.ServerError
}
var SatelliteServerSetImageVersionExpiryResult_DateError_DEFAULT *TInvalidDateParam
func (p *SatelliteServerSetImageVersionExpiryResult) GetDateError() *TInvalidDateParam {
  if !p.IsSetDateError() {
    return SatelliteServerSetImageVersionExpiryResult_DateError_DEFAULT
  }
return p.DateError
}
func (p *SatelliteServerSetImageVersionExpiryResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerSetImageVersionExpiryResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerSetImageVersionExpiryResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerSetImageVersionExpiryResult) IsSetDateError() bool {
  return p.DateError != nil
}

func (p *SatelliteServerSetImageVersionExpiryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerSetImageVersionExpiryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerSetImageVersionExpiryResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerSetImageVersionExpiryResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerSetImageVersionExpiryResult)  ReadField4(iprot thrift.TProtocol) error {
  p.DateError = &TInvalidDateParam{}
  if err := p.DateError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DateError), err)
  }
  return nil
}

func (p *SatelliteServerSetImageVersionExpiryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setImageVersionExpiry_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerSetImageVersionExpiryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetImageVersionExpiryResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetImageVersionExpiryResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetImageVersionExpiryResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDateError() {
    if err := oprot.WriteFieldBegin("dateError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dateError: ", p), err) }
    if err := p.DateError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DateError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dateError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetImageVersionExpiryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerSetImageVersionExpiryResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageVersionId
type SatelliteServerGetImageVersionVirtConfigArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageVersionId UUID `thrift:"imageVersionId,2" db:"imageVersionId" json:"imageVersionId"`
}

func NewSatelliteServerGetImageVersionVirtConfigArgs() *SatelliteServerGetImageVersionVirtConfigArgs {
  return &SatelliteServerGetImageVersionVirtConfigArgs{}
}


func (p *SatelliteServerGetImageVersionVirtConfigArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerGetImageVersionVirtConfigArgs) GetImageVersionId() UUID {
  return p.ImageVersionId
}
func (p *SatelliteServerGetImageVersionVirtConfigArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetImageVersionVirtConfigArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerGetImageVersionVirtConfigArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageVersionId = temp
}
  return nil
}

func (p *SatelliteServerGetImageVersionVirtConfigArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getImageVersionVirtConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetImageVersionVirtConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerGetImageVersionVirtConfigArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageVersionId: ", p), err) }
  return err
}

func (p *SatelliteServerGetImageVersionVirtConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetImageVersionVirtConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerGetImageVersionVirtConfigResult struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerGetImageVersionVirtConfigResult() *SatelliteServerGetImageVersionVirtConfigResult {
  return &SatelliteServerGetImageVersionVirtConfigResult{}
}

var SatelliteServerGetImageVersionVirtConfigResult_Success_DEFAULT []byte

func (p *SatelliteServerGetImageVersionVirtConfigResult) GetSuccess() []byte {
  return p.Success
}
var SatelliteServerGetImageVersionVirtConfigResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerGetImageVersionVirtConfigResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerGetImageVersionVirtConfigResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerGetImageVersionVirtConfigResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerGetImageVersionVirtConfigResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerGetImageVersionVirtConfigResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerGetImageVersionVirtConfigResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerGetImageVersionVirtConfigResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerGetImageVersionVirtConfigResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerGetImageVersionVirtConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetImageVersionVirtConfigResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerGetImageVersionVirtConfigResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerGetImageVersionVirtConfigResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerGetImageVersionVirtConfigResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetImageVersionVirtConfigResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *SatelliteServerGetImageVersionVirtConfigResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerGetImageVersionVirtConfigResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerGetImageVersionVirtConfigResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerGetImageVersionVirtConfigResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getImageVersionVirtConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetImageVersionVirtConfigResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImageVersionVirtConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImageVersionVirtConfigResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImageVersionVirtConfigResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetImageVersionVirtConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetImageVersionVirtConfigResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageVersionId
//  - Meta
type SatelliteServerSetImageVersionVirtConfigArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageVersionId UUID `thrift:"imageVersionId,2" db:"imageVersionId" json:"imageVersionId"`
  Meta []byte `thrift:"meta,3" db:"meta" json:"meta"`
}

func NewSatelliteServerSetImageVersionVirtConfigArgs() *SatelliteServerSetImageVersionVirtConfigArgs {
  return &SatelliteServerSetImageVersionVirtConfigArgs{}
}


func (p *SatelliteServerSetImageVersionVirtConfigArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerSetImageVersionVirtConfigArgs) GetImageVersionId() UUID {
  return p.ImageVersionId
}

func (p *SatelliteServerSetImageVersionVirtConfigArgs) GetMeta() []byte {
  return p.Meta
}
func (p *SatelliteServerSetImageVersionVirtConfigArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerSetImageVersionVirtConfigArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerSetImageVersionVirtConfigArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageVersionId = temp
}
  return nil
}

func (p *SatelliteServerSetImageVersionVirtConfigArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Meta = v
}
  return nil
}

func (p *SatelliteServerSetImageVersionVirtConfigArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setImageVersionVirtConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerSetImageVersionVirtConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerSetImageVersionVirtConfigArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageVersionId: ", p), err) }
  return err
}

func (p *SatelliteServerSetImageVersionVirtConfigArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("meta", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:meta: ", p), err) }
  if err := oprot.WriteBinary(p.Meta); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.meta (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:meta: ", p), err) }
  return err
}

func (p *SatelliteServerSetImageVersionVirtConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerSetImageVersionVirtConfigArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerSetImageVersionVirtConfigResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerSetImageVersionVirtConfigResult() *SatelliteServerSetImageVersionVirtConfigResult {
  return &SatelliteServerSetImageVersionVirtConfigResult{}
}

var SatelliteServerSetImageVersionVirtConfigResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerSetImageVersionVirtConfigResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerSetImageVersionVirtConfigResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerSetImageVersionVirtConfigResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerSetImageVersionVirtConfigResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerSetImageVersionVirtConfigResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerSetImageVersionVirtConfigResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerSetImageVersionVirtConfigResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerSetImageVersionVirtConfigResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerSetImageVersionVirtConfigResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerSetImageVersionVirtConfigResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerSetImageVersionVirtConfigResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerSetImageVersionVirtConfigResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerSetImageVersionVirtConfigResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerSetImageVersionVirtConfigResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerSetImageVersionVirtConfigResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerSetImageVersionVirtConfigResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setImageVersionVirtConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerSetImageVersionVirtConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetImageVersionVirtConfigResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetImageVersionVirtConfigResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetImageVersionVirtConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerSetImageVersionVirtConfigResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageVersionId
type SatelliteServerRequestImageReplicationArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageVersionId UUID `thrift:"imageVersionId,2" db:"imageVersionId" json:"imageVersionId"`
}

func NewSatelliteServerRequestImageReplicationArgs() *SatelliteServerRequestImageReplicationArgs {
  return &SatelliteServerRequestImageReplicationArgs{}
}


func (p *SatelliteServerRequestImageReplicationArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerRequestImageReplicationArgs) GetImageVersionId() UUID {
  return p.ImageVersionId
}
func (p *SatelliteServerRequestImageReplicationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerRequestImageReplicationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerRequestImageReplicationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageVersionId = temp
}
  return nil
}

func (p *SatelliteServerRequestImageReplicationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("requestImageReplication_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerRequestImageReplicationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerRequestImageReplicationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageVersionId: ", p), err) }
  return err
}

func (p *SatelliteServerRequestImageReplicationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerRequestImageReplicationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerRequestImageReplicationResult struct {
  Success *UUID `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerRequestImageReplicationResult() *SatelliteServerRequestImageReplicationResult {
  return &SatelliteServerRequestImageReplicationResult{}
}

var SatelliteServerRequestImageReplicationResult_Success_DEFAULT UUID
func (p *SatelliteServerRequestImageReplicationResult) GetSuccess() UUID {
  if !p.IsSetSuccess() {
    return SatelliteServerRequestImageReplicationResult_Success_DEFAULT
  }
return *p.Success
}
var SatelliteServerRequestImageReplicationResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerRequestImageReplicationResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerRequestImageReplicationResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerRequestImageReplicationResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerRequestImageReplicationResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerRequestImageReplicationResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerRequestImageReplicationResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerRequestImageReplicationResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerRequestImageReplicationResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerRequestImageReplicationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerRequestImageReplicationResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerRequestImageReplicationResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerRequestImageReplicationResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerRequestImageReplicationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerRequestImageReplicationResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := UUID(v)
  p.Success = &temp
}
  return nil
}

func (p *SatelliteServerRequestImageReplicationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerRequestImageReplicationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerRequestImageReplicationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerRequestImageReplicationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("requestImageReplication_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerRequestImageReplicationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestImageReplicationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestImageReplicationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestImageReplicationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerRequestImageReplicationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerRequestImageReplicationResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageVersionId
type SatelliteServerPublishImageVersionArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageVersionId UUID `thrift:"imageVersionId,2" db:"imageVersionId" json:"imageVersionId"`
}

func NewSatelliteServerPublishImageVersionArgs() *SatelliteServerPublishImageVersionArgs {
  return &SatelliteServerPublishImageVersionArgs{}
}


func (p *SatelliteServerPublishImageVersionArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerPublishImageVersionArgs) GetImageVersionId() UUID {
  return p.ImageVersionId
}
func (p *SatelliteServerPublishImageVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerPublishImageVersionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerPublishImageVersionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageVersionId = temp
}
  return nil
}

func (p *SatelliteServerPublishImageVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("publishImageVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerPublishImageVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerPublishImageVersionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageVersionId: ", p), err) }
  return err
}

func (p *SatelliteServerPublishImageVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerPublishImageVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - NotFound
//  - ServerError
//  - Tre
type SatelliteServerPublishImageVersionResult struct {
  Success *UUID `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
  Tre *TTransferRejectedException `thrift:"tre,4" db:"tre" json:"tre,omitempty"`
}

func NewSatelliteServerPublishImageVersionResult() *SatelliteServerPublishImageVersionResult {
  return &SatelliteServerPublishImageVersionResult{}
}

var SatelliteServerPublishImageVersionResult_Success_DEFAULT UUID
func (p *SatelliteServerPublishImageVersionResult) GetSuccess() UUID {
  if !p.IsSetSuccess() {
    return SatelliteServerPublishImageVersionResult_Success_DEFAULT
  }
return *p.Success
}
var SatelliteServerPublishImageVersionResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerPublishImageVersionResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerPublishImageVersionResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerPublishImageVersionResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerPublishImageVersionResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerPublishImageVersionResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerPublishImageVersionResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerPublishImageVersionResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerPublishImageVersionResult_ServerError_DEFAULT
  }
return p.ServerError
}
var SatelliteServerPublishImageVersionResult_Tre_DEFAULT *TTransferRejectedException
func (p *SatelliteServerPublishImageVersionResult) GetTre() *TTransferRejectedException {
  if !p.IsSetTre() {
    return SatelliteServerPublishImageVersionResult_Tre_DEFAULT
  }
return p.Tre
}
func (p *SatelliteServerPublishImageVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerPublishImageVersionResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerPublishImageVersionResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerPublishImageVersionResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerPublishImageVersionResult) IsSetTre() bool {
  return p.Tre != nil
}

func (p *SatelliteServerPublishImageVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerPublishImageVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := UUID(v)
  p.Success = &temp
}
  return nil
}

func (p *SatelliteServerPublishImageVersionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerPublishImageVersionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerPublishImageVersionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerPublishImageVersionResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Tre = &TTransferRejectedException{}
  if err := p.Tre.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tre), err)
  }
  return nil
}

func (p *SatelliteServerPublishImageVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("publishImageVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerPublishImageVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerPublishImageVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerPublishImageVersionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerPublishImageVersionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerPublishImageVersionResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTre() {
    if err := oprot.WriteFieldBegin("tre", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tre: ", p), err) }
    if err := p.Tre.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tre), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tre: ", p), err) }
  }
  return err
}

func (p *SatelliteServerPublishImageVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerPublishImageVersionResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - Lecture
type SatelliteServerCreateLectureArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  Lecture *LectureWrite `thrift:"lecture,2" db:"lecture" json:"lecture"`
}

func NewSatelliteServerCreateLectureArgs() *SatelliteServerCreateLectureArgs {
  return &SatelliteServerCreateLectureArgs{}
}


func (p *SatelliteServerCreateLectureArgs) GetUserToken() Token {
  return p.UserToken
}
var SatelliteServerCreateLectureArgs_Lecture_DEFAULT *LectureWrite
func (p *SatelliteServerCreateLectureArgs) GetLecture() *LectureWrite {
  if !p.IsSetLecture() {
    return SatelliteServerCreateLectureArgs_Lecture_DEFAULT
  }
return p.Lecture
}
func (p *SatelliteServerCreateLectureArgs) IsSetLecture() bool {
  return p.Lecture != nil
}

func (p *SatelliteServerCreateLectureArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerCreateLectureArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerCreateLectureArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Lecture = &LectureWrite{}
  if err := p.Lecture.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Lecture), err)
  }
  return nil
}

func (p *SatelliteServerCreateLectureArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createLecture_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerCreateLectureArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerCreateLectureArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lecture", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lecture: ", p), err) }
  if err := p.Lecture.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Lecture), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lecture: ", p), err) }
  return err
}

func (p *SatelliteServerCreateLectureArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerCreateLectureArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - ServerError
//  - DateError
//  - NotFound
type SatelliteServerCreateLectureResult struct {
  Success *UUID `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,2" db:"serverError" json:"serverError,omitempty"`
  DateError *TInvalidDateParam `thrift:"dateError,3" db:"dateError" json:"dateError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,4" db:"notFound" json:"notFound,omitempty"`
}

func NewSatelliteServerCreateLectureResult() *SatelliteServerCreateLectureResult {
  return &SatelliteServerCreateLectureResult{}
}

var SatelliteServerCreateLectureResult_Success_DEFAULT UUID
func (p *SatelliteServerCreateLectureResult) GetSuccess() UUID {
  if !p.IsSetSuccess() {
    return SatelliteServerCreateLectureResult_Success_DEFAULT
  }
return *p.Success
}
var SatelliteServerCreateLectureResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerCreateLectureResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerCreateLectureResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerCreateLectureResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerCreateLectureResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerCreateLectureResult_ServerError_DEFAULT
  }
return p.ServerError
}
var SatelliteServerCreateLectureResult_DateError_DEFAULT *TInvalidDateParam
func (p *SatelliteServerCreateLectureResult) GetDateError() *TInvalidDateParam {
  if !p.IsSetDateError() {
    return SatelliteServerCreateLectureResult_DateError_DEFAULT
  }
return p.DateError
}
var SatelliteServerCreateLectureResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerCreateLectureResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerCreateLectureResult_NotFound_DEFAULT
  }
return p.NotFound
}
func (p *SatelliteServerCreateLectureResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerCreateLectureResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerCreateLectureResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerCreateLectureResult) IsSetDateError() bool {
  return p.DateError != nil
}

func (p *SatelliteServerCreateLectureResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerCreateLectureResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerCreateLectureResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := UUID(v)
  p.Success = &temp
}
  return nil
}

func (p *SatelliteServerCreateLectureResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerCreateLectureResult)  ReadField2(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerCreateLectureResult)  ReadField3(iprot thrift.TProtocol) error {
  p.DateError = &TInvalidDateParam{}
  if err := p.DateError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DateError), err)
  }
  return nil
}

func (p *SatelliteServerCreateLectureResult)  ReadField4(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerCreateLectureResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createLecture_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerCreateLectureResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerCreateLectureResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerCreateLectureResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerCreateLectureResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDateError() {
    if err := oprot.WriteFieldBegin("dateError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dateError: ", p), err) }
    if err := p.DateError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DateError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dateError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerCreateLectureResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerCreateLectureResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerCreateLectureResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - LectureId
//  - Lecture
type SatelliteServerUpdateLectureArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  LectureId UUID `thrift:"lectureId,2" db:"lectureId" json:"lectureId"`
  Lecture *LectureWrite `thrift:"lecture,3" db:"lecture" json:"lecture"`
}

func NewSatelliteServerUpdateLectureArgs() *SatelliteServerUpdateLectureArgs {
  return &SatelliteServerUpdateLectureArgs{}
}


func (p *SatelliteServerUpdateLectureArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerUpdateLectureArgs) GetLectureId() UUID {
  return p.LectureId
}
var SatelliteServerUpdateLectureArgs_Lecture_DEFAULT *LectureWrite
func (p *SatelliteServerUpdateLectureArgs) GetLecture() *LectureWrite {
  if !p.IsSetLecture() {
    return SatelliteServerUpdateLectureArgs_Lecture_DEFAULT
  }
return p.Lecture
}
func (p *SatelliteServerUpdateLectureArgs) IsSetLecture() bool {
  return p.Lecture != nil
}

func (p *SatelliteServerUpdateLectureArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerUpdateLectureArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerUpdateLectureArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.LectureId = temp
}
  return nil
}

func (p *SatelliteServerUpdateLectureArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Lecture = &LectureWrite{}
  if err := p.Lecture.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Lecture), err)
  }
  return nil
}

func (p *SatelliteServerUpdateLectureArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateLecture_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerUpdateLectureArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerUpdateLectureArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lectureId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lectureId: ", p), err) }
  if err := oprot.WriteString(string(p.LectureId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lectureId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lectureId: ", p), err) }
  return err
}

func (p *SatelliteServerUpdateLectureArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lecture", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lecture: ", p), err) }
  if err := p.Lecture.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Lecture), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lecture: ", p), err) }
  return err
}

func (p *SatelliteServerUpdateLectureArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerUpdateLectureArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - NotFound
//  - ServerError
//  - DateError
type SatelliteServerUpdateLectureResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
  DateError *TInvalidDateParam `thrift:"dateError,4" db:"dateError" json:"dateError,omitempty"`
}

func NewSatelliteServerUpdateLectureResult() *SatelliteServerUpdateLectureResult {
  return &SatelliteServerUpdateLectureResult{}
}

var SatelliteServerUpdateLectureResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerUpdateLectureResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerUpdateLectureResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerUpdateLectureResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerUpdateLectureResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerUpdateLectureResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerUpdateLectureResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerUpdateLectureResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerUpdateLectureResult_ServerError_DEFAULT
  }
return p.ServerError
}
var SatelliteServerUpdateLectureResult_DateError_DEFAULT *TInvalidDateParam
func (p *SatelliteServerUpdateLectureResult) GetDateError() *TInvalidDateParam {
  if !p.IsSetDateError() {
    return SatelliteServerUpdateLectureResult_DateError_DEFAULT
  }
return p.DateError
}
func (p *SatelliteServerUpdateLectureResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerUpdateLectureResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerUpdateLectureResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerUpdateLectureResult) IsSetDateError() bool {
  return p.DateError != nil
}

func (p *SatelliteServerUpdateLectureResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerUpdateLectureResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerUpdateLectureResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerUpdateLectureResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerUpdateLectureResult)  ReadField4(iprot thrift.TProtocol) error {
  p.DateError = &TInvalidDateParam{}
  if err := p.DateError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DateError), err)
  }
  return nil
}

func (p *SatelliteServerUpdateLectureResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateLecture_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerUpdateLectureResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerUpdateLectureResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerUpdateLectureResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerUpdateLectureResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDateError() {
    if err := oprot.WriteFieldBegin("dateError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dateError: ", p), err) }
    if err := p.DateError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DateError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dateError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerUpdateLectureResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerUpdateLectureResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - Page
type SatelliteServerGetLectureListArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
}

func NewSatelliteServerGetLectureListArgs() *SatelliteServerGetLectureListArgs {
  return &SatelliteServerGetLectureListArgs{}
}


func (p *SatelliteServerGetLectureListArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerGetLectureListArgs) GetPage() int32 {
  return p.Page
}
func (p *SatelliteServerGetLectureListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetLectureListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerGetLectureListArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *SatelliteServerGetLectureListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLectureList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetLectureListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerGetLectureListArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *SatelliteServerGetLectureListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetLectureListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - ServerError
type SatelliteServerGetLectureListResult struct {
  Success []*LectureSummary `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,2" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerGetLectureListResult() *SatelliteServerGetLectureListResult {
  return &SatelliteServerGetLectureListResult{}
}

var SatelliteServerGetLectureListResult_Success_DEFAULT []*LectureSummary

func (p *SatelliteServerGetLectureListResult) GetSuccess() []*LectureSummary {
  return p.Success
}
var SatelliteServerGetLectureListResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerGetLectureListResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerGetLectureListResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerGetLectureListResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerGetLectureListResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerGetLectureListResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerGetLectureListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetLectureListResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerGetLectureListResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerGetLectureListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetLectureListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LectureSummary, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem123 := &LectureSummary{}
    if err := _elem123.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem123), err)
    }
    p.Success = append(p.Success, _elem123)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SatelliteServerGetLectureListResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerGetLectureListResult)  ReadField2(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerGetLectureListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLectureList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetLectureListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetLectureListResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetLectureListResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetLectureListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetLectureListResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - LectureId
type SatelliteServerGetLectureDetailsArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  LectureId UUID `thrift:"lectureId,2" db:"lectureId" json:"lectureId"`
}

func NewSatelliteServerGetLectureDetailsArgs() *SatelliteServerGetLectureDetailsArgs {
  return &SatelliteServerGetLectureDetailsArgs{}
}


func (p *SatelliteServerGetLectureDetailsArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerGetLectureDetailsArgs) GetLectureId() UUID {
  return p.LectureId
}
func (p *SatelliteServerGetLectureDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetLectureDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerGetLectureDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.LectureId = temp
}
  return nil
}

func (p *SatelliteServerGetLectureDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLectureDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetLectureDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerGetLectureDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lectureId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lectureId: ", p), err) }
  if err := oprot.WriteString(string(p.LectureId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lectureId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lectureId: ", p), err) }
  return err
}

func (p *SatelliteServerGetLectureDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetLectureDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerGetLectureDetailsResult struct {
  Success *LectureRead `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerGetLectureDetailsResult() *SatelliteServerGetLectureDetailsResult {
  return &SatelliteServerGetLectureDetailsResult{}
}

var SatelliteServerGetLectureDetailsResult_Success_DEFAULT *LectureRead
func (p *SatelliteServerGetLectureDetailsResult) GetSuccess() *LectureRead {
  if !p.IsSetSuccess() {
    return SatelliteServerGetLectureDetailsResult_Success_DEFAULT
  }
return p.Success
}
var SatelliteServerGetLectureDetailsResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerGetLectureDetailsResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerGetLectureDetailsResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerGetLectureDetailsResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerGetLectureDetailsResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerGetLectureDetailsResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerGetLectureDetailsResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerGetLectureDetailsResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerGetLectureDetailsResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerGetLectureDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetLectureDetailsResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerGetLectureDetailsResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerGetLectureDetailsResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerGetLectureDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetLectureDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &LectureRead{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SatelliteServerGetLectureDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerGetLectureDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerGetLectureDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerGetLectureDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLectureDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetLectureDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetLectureDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetLectureDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetLectureDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetLectureDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetLectureDetailsResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - LectureId
type SatelliteServerDeleteLectureArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  LectureId UUID `thrift:"lectureId,2" db:"lectureId" json:"lectureId"`
}

func NewSatelliteServerDeleteLectureArgs() *SatelliteServerDeleteLectureArgs {
  return &SatelliteServerDeleteLectureArgs{}
}


func (p *SatelliteServerDeleteLectureArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerDeleteLectureArgs) GetLectureId() UUID {
  return p.LectureId
}
func (p *SatelliteServerDeleteLectureArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerDeleteLectureArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerDeleteLectureArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.LectureId = temp
}
  return nil
}

func (p *SatelliteServerDeleteLectureArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteLecture_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerDeleteLectureArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerDeleteLectureArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lectureId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lectureId: ", p), err) }
  if err := oprot.WriteString(string(p.LectureId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lectureId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lectureId: ", p), err) }
  return err
}

func (p *SatelliteServerDeleteLectureArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerDeleteLectureArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerDeleteLectureResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerDeleteLectureResult() *SatelliteServerDeleteLectureResult {
  return &SatelliteServerDeleteLectureResult{}
}

var SatelliteServerDeleteLectureResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerDeleteLectureResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerDeleteLectureResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerDeleteLectureResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerDeleteLectureResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerDeleteLectureResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerDeleteLectureResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerDeleteLectureResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerDeleteLectureResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerDeleteLectureResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerDeleteLectureResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerDeleteLectureResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerDeleteLectureResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerDeleteLectureResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerDeleteLectureResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerDeleteLectureResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerDeleteLectureResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteLecture_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerDeleteLectureResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerDeleteLectureResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerDeleteLectureResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerDeleteLectureResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerDeleteLectureResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - LectureId
//  - Permissions
type SatelliteServerWriteLecturePermissionsArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  LectureId UUID `thrift:"lectureId,2" db:"lectureId" json:"lectureId"`
  Permissions map[UUID]*LecturePermissions `thrift:"permissions,3" db:"permissions" json:"permissions"`
}

func NewSatelliteServerWriteLecturePermissionsArgs() *SatelliteServerWriteLecturePermissionsArgs {
  return &SatelliteServerWriteLecturePermissionsArgs{}
}


func (p *SatelliteServerWriteLecturePermissionsArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerWriteLecturePermissionsArgs) GetLectureId() UUID {
  return p.LectureId
}

func (p *SatelliteServerWriteLecturePermissionsArgs) GetPermissions() map[UUID]*LecturePermissions {
  return p.Permissions
}
func (p *SatelliteServerWriteLecturePermissionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerWriteLecturePermissionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerWriteLecturePermissionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.LectureId = temp
}
  return nil
}

func (p *SatelliteServerWriteLecturePermissionsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[UUID]*LecturePermissions, size)
  p.Permissions =  tMap
  for i := 0; i < size; i ++ {
var _key124 UUID
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := UUID(v)
    _key124 = temp
}
    _val125 := &LecturePermissions{}
    if err := _val125.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val125), err)
    }
    p.Permissions[_key124] = _val125
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SatelliteServerWriteLecturePermissionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("writeLecturePermissions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerWriteLecturePermissionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerWriteLecturePermissionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lectureId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lectureId: ", p), err) }
  if err := oprot.WriteString(string(p.LectureId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lectureId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lectureId: ", p), err) }
  return err
}

func (p *SatelliteServerWriteLecturePermissionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("permissions", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:permissions: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Permissions)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Permissions {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:permissions: ", p), err) }
  return err
}

func (p *SatelliteServerWriteLecturePermissionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerWriteLecturePermissionsArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerWriteLecturePermissionsResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerWriteLecturePermissionsResult() *SatelliteServerWriteLecturePermissionsResult {
  return &SatelliteServerWriteLecturePermissionsResult{}
}

var SatelliteServerWriteLecturePermissionsResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerWriteLecturePermissionsResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerWriteLecturePermissionsResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerWriteLecturePermissionsResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerWriteLecturePermissionsResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerWriteLecturePermissionsResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerWriteLecturePermissionsResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerWriteLecturePermissionsResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerWriteLecturePermissionsResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerWriteLecturePermissionsResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerWriteLecturePermissionsResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerWriteLecturePermissionsResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerWriteLecturePermissionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerWriteLecturePermissionsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerWriteLecturePermissionsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerWriteLecturePermissionsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerWriteLecturePermissionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("writeLecturePermissions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerWriteLecturePermissionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerWriteLecturePermissionsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerWriteLecturePermissionsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerWriteLecturePermissionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerWriteLecturePermissionsResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - LectureId
type SatelliteServerGetLecturePermissionsArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  LectureId UUID `thrift:"lectureId,2" db:"lectureId" json:"lectureId"`
}

func NewSatelliteServerGetLecturePermissionsArgs() *SatelliteServerGetLecturePermissionsArgs {
  return &SatelliteServerGetLecturePermissionsArgs{}
}


func (p *SatelliteServerGetLecturePermissionsArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerGetLecturePermissionsArgs) GetLectureId() UUID {
  return p.LectureId
}
func (p *SatelliteServerGetLecturePermissionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetLecturePermissionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerGetLecturePermissionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.LectureId = temp
}
  return nil
}

func (p *SatelliteServerGetLecturePermissionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLecturePermissions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetLecturePermissionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerGetLecturePermissionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lectureId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lectureId: ", p), err) }
  if err := oprot.WriteString(string(p.LectureId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lectureId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lectureId: ", p), err) }
  return err
}

func (p *SatelliteServerGetLecturePermissionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetLecturePermissionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerGetLecturePermissionsResult struct {
  Success map[UUID]*LecturePermissions `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerGetLecturePermissionsResult() *SatelliteServerGetLecturePermissionsResult {
  return &SatelliteServerGetLecturePermissionsResult{}
}

var SatelliteServerGetLecturePermissionsResult_Success_DEFAULT map[UUID]*LecturePermissions

func (p *SatelliteServerGetLecturePermissionsResult) GetSuccess() map[UUID]*LecturePermissions {
  return p.Success
}
var SatelliteServerGetLecturePermissionsResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerGetLecturePermissionsResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerGetLecturePermissionsResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerGetLecturePermissionsResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerGetLecturePermissionsResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerGetLecturePermissionsResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerGetLecturePermissionsResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerGetLecturePermissionsResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerGetLecturePermissionsResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerGetLecturePermissionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SatelliteServerGetLecturePermissionsResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerGetLecturePermissionsResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerGetLecturePermissionsResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerGetLecturePermissionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerGetLecturePermissionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[UUID]*LecturePermissions, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key126 UUID
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := UUID(v)
    _key126 = temp
}
    _val127 := &LecturePermissions{}
    if err := _val127.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val127), err)
    }
    p.Success[_key126] = _val127
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SatelliteServerGetLecturePermissionsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerGetLecturePermissionsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerGetLecturePermissionsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerGetLecturePermissionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLecturePermissions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerGetLecturePermissionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetLecturePermissionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetLecturePermissionsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetLecturePermissionsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerGetLecturePermissionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerGetLecturePermissionsResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - LectureId
//  - NewOwnerId_
type SatelliteServerSetLectureOwnerArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  LectureId UUID `thrift:"lectureId,2" db:"lectureId" json:"lectureId"`
  NewOwnerId_ UUID `thrift:"newOwnerId,3" db:"newOwnerId" json:"newOwnerId"`
}

func NewSatelliteServerSetLectureOwnerArgs() *SatelliteServerSetLectureOwnerArgs {
  return &SatelliteServerSetLectureOwnerArgs{}
}


func (p *SatelliteServerSetLectureOwnerArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *SatelliteServerSetLectureOwnerArgs) GetLectureId() UUID {
  return p.LectureId
}

func (p *SatelliteServerSetLectureOwnerArgs) GetNewOwnerId_() UUID {
  return p.NewOwnerId_
}
func (p *SatelliteServerSetLectureOwnerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerSetLectureOwnerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *SatelliteServerSetLectureOwnerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.LectureId = temp
}
  return nil
}

func (p *SatelliteServerSetLectureOwnerArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UUID(v)
  p.NewOwnerId_ = temp
}
  return nil
}

func (p *SatelliteServerSetLectureOwnerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setLectureOwner_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerSetLectureOwnerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *SatelliteServerSetLectureOwnerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lectureId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lectureId: ", p), err) }
  if err := oprot.WriteString(string(p.LectureId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lectureId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lectureId: ", p), err) }
  return err
}

func (p *SatelliteServerSetLectureOwnerArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newOwnerId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newOwnerId: ", p), err) }
  if err := oprot.WriteString(string(p.NewOwnerId_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newOwnerId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newOwnerId: ", p), err) }
  return err
}

func (p *SatelliteServerSetLectureOwnerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerSetLectureOwnerArgs(%+v)", *p)
}

// Attributes:
//  - AuthError
//  - NotFound
//  - ServerError
type SatelliteServerSetLectureOwnerResult struct {
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewSatelliteServerSetLectureOwnerResult() *SatelliteServerSetLectureOwnerResult {
  return &SatelliteServerSetLectureOwnerResult{}
}

var SatelliteServerSetLectureOwnerResult_AuthError_DEFAULT *TAuthorizationException
func (p *SatelliteServerSetLectureOwnerResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return SatelliteServerSetLectureOwnerResult_AuthError_DEFAULT
  }
return p.AuthError
}
var SatelliteServerSetLectureOwnerResult_NotFound_DEFAULT *TNotFoundException
func (p *SatelliteServerSetLectureOwnerResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return SatelliteServerSetLectureOwnerResult_NotFound_DEFAULT
  }
return p.NotFound
}
var SatelliteServerSetLectureOwnerResult_ServerError_DEFAULT *TInvocationException
func (p *SatelliteServerSetLectureOwnerResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return SatelliteServerSetLectureOwnerResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *SatelliteServerSetLectureOwnerResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *SatelliteServerSetLectureOwnerResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *SatelliteServerSetLectureOwnerResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *SatelliteServerSetLectureOwnerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SatelliteServerSetLectureOwnerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *SatelliteServerSetLectureOwnerResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *SatelliteServerSetLectureOwnerResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *SatelliteServerSetLectureOwnerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setLectureOwner_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SatelliteServerSetLectureOwnerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetLectureOwnerResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetLectureOwnerResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *SatelliteServerSetLectureOwnerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SatelliteServerSetLectureOwnerResult(%+v)", *p)
}


type MasterServer interface {
  Ping() (r bool, err error)
  // Parameters:
  //  - Login
  //  - Password
  Authenticate(login string, password string) (r *SessionData, err error)
  // Parameters:
  //  - Login
  //  - Password
  LocalAccountLogin(login string, password string) (r *ClientSessionData, err error)
  // Parameters:
  //  - SessionId
  //  - SatelliteName
  SetUsedSatellite(sessionId Token, satelliteName string) (err error)
  // Parameters:
  //  - SessionId
  //  - OrganizationId
  //  - SearchTerm
  FindUser(sessionId Token, organizationId string, searchTerm string) (r []*UserInfo, err error)
  // Parameters:
  //  - SessionId
  //  - Page
  GetPublicImages(sessionId Token, page int32) (r []*ImageSummaryRead, err error)
  // Parameters:
  //  - SessionId
  //  - ImageBaseId
  GetImageDetails(sessionId Token, imageBaseId UUID) (r *ImageDetailsRead, err error)
  // Parameters:
  //  - UserToken
  //  - UserId
  GetUser(userToken Token, userId UUID) (r *UserInfo, err error)
  // Parameters:
  //  - SessionId
  InvalidateSession(sessionId Token) (err error)
  // Parameters:
  //  - Token
  GetUserFromToken(token Token) (r *UserInfo, err error)
  // Parameters:
  //  - ServerSessionId
  IsServerAuthenticated(serverSessionId Token) (r bool, err error)
  // Parameters:
  //  - SatelliteId
  StartServerAuthentication(satelliteId int32) (r []byte, err error)
  // Parameters:
  //  - SatelliteId
  //  - ChallengeResponse
  ServerAuthenticate(satelliteId int32, challengeResponse []byte) (r *ServerSessionData, err error)
  // Parameters:
  //  - ServerSessionId
  //  - ImageVersionId
  GetImageData(serverSessionId Token, imageVersionId UUID) (r *ImagePublishData, err error)
  // Parameters:
  //  - UserToken
  //  - ImageDescription
  //  - BlockHashes
  SubmitImage(userToken Token, imageDescription *ImagePublishData, blockHashes [][]byte) (r *TransferInformation, err error)
  // Parameters:
  //  - UserToken
  //  - DisplayName
  //  - Addresses
  //  - Modulus
  //  - Exponent
  //  - Certsha256
  RegisterSatellite(userToken Token, displayName string, addresses []string, modulus string, exponent string, certsha256 []byte) (r int32, err error)
  // Parameters:
  //  - ServerSessionId
  //  - DisplayName
  //  - Addresses
  UpdateSatellite(serverSessionId Token, displayName string, addresses []string) (r bool, err error)
  // Parameters:
  //  - SessionId
  //  - ImageVersionId
  DownloadImage(sessionId Token, imageVersionId UUID) (r *TransferInformation, err error)
  GetOrganizations() (r []*Organization, err error)
  GetOperatingSystems() (r []*OperatingSystem, err error)
  GetVirtualizers() (r []*Virtualizer, err error)
  // Parameters:
  //  - StartDate
  GetTags(startDate UnixTimestamp) (r []*MasterTag, err error)
  // Parameters:
  //  - StartDate
  GetSoftware(startDate UnixTimestamp) (r []*MasterSoftware, err error)
  // Parameters:
  //  - UploadToken
  QueryUploadStatus(uploadToken Token) (r *TransferStatus, err error)
}

type MasterServerClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewMasterServerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MasterServerClient {
  return &MasterServerClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewMasterServerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MasterServerClient {
  return &MasterServerClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *MasterServerClient) Ping() (r bool, err error) {
  if err = p.sendPing(); err != nil { return }
  return p.recvPing()
}

func (p *MasterServerClient) sendPing()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ping", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerPingArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvPing() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "ping" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error255 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error256 error
    error256, err = error255.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error256
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
    return
  }
  result := MasterServerPingResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Login
//  - Password
func (p *MasterServerClient) Authenticate(login string, password string) (r *SessionData, err error) {
  if err = p.sendAuthenticate(login, password); err != nil { return }
  return p.recvAuthenticate()
}

func (p *MasterServerClient) sendAuthenticate(login string, password string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("authenticate", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerAuthenticateArgs{
  Login : login,
  Password : password,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvAuthenticate() (value *SessionData, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "authenticate" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "authenticate failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "authenticate failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error257 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error258 error
    error258, err = error257.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error258
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "authenticate failed: invalid message type")
    return
  }
  result := MasterServerAuthenticateResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.Error != nil {
    err = result.Error
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Login
//  - Password
func (p *MasterServerClient) LocalAccountLogin(login string, password string) (r *ClientSessionData, err error) {
  if err = p.sendLocalAccountLogin(login, password); err != nil { return }
  return p.recvLocalAccountLogin()
}

func (p *MasterServerClient) sendLocalAccountLogin(login string, password string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("localAccountLogin", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerLocalAccountLoginArgs{
  Login : login,
  Password : password,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvLocalAccountLogin() (value *ClientSessionData, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "localAccountLogin" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "localAccountLogin failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "localAccountLogin failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error259 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error260 error
    error260, err = error259.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error260
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "localAccountLogin failed: invalid message type")
    return
  }
  result := MasterServerLocalAccountLoginResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.Error != nil {
    err = result.Error
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - SessionId
//  - SatelliteName
func (p *MasterServerClient) SetUsedSatellite(sessionId Token, satelliteName string) (err error) {
  if err = p.sendSetUsedSatellite(sessionId, satelliteName); err != nil { return }
  return p.recvSetUsedSatellite()
}

func (p *MasterServerClient) sendSetUsedSatellite(sessionId Token, satelliteName string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setUsedSatellite", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerSetUsedSatelliteArgs{
  SessionId : sessionId,
  SatelliteName : satelliteName,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvSetUsedSatellite() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setUsedSatellite" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setUsedSatellite failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setUsedSatellite failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error261 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error262 error
    error262, err = error261.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error262
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setUsedSatellite failed: invalid message type")
    return
  }
  result := MasterServerSetUsedSatelliteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - SessionId
//  - OrganizationId
//  - SearchTerm
func (p *MasterServerClient) FindUser(sessionId Token, organizationId string, searchTerm string) (r []*UserInfo, err error) {
  if err = p.sendFindUser(sessionId, organizationId, searchTerm); err != nil { return }
  return p.recvFindUser()
}

func (p *MasterServerClient) sendFindUser(sessionId Token, organizationId string, searchTerm string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("findUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerFindUserArgs{
  SessionId : sessionId,
  OrganizationId : organizationId,
  SearchTerm : searchTerm,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvFindUser() (value []*UserInfo, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "findUser" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error263 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error264 error
    error264, err = error263.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error264
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findUser failed: invalid message type")
    return
  }
  result := MasterServerFindUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.Error != nil {
    err = result.Error
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - SessionId
//  - Page
func (p *MasterServerClient) GetPublicImages(sessionId Token, page int32) (r []*ImageSummaryRead, err error) {
  if err = p.sendGetPublicImages(sessionId, page); err != nil { return }
  return p.recvGetPublicImages()
}

func (p *MasterServerClient) sendGetPublicImages(sessionId Token, page int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getPublicImages", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerGetPublicImagesArgs{
  SessionId : sessionId,
  Page : page,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvGetPublicImages() (value []*ImageSummaryRead, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getPublicImages" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getPublicImages failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPublicImages failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error265 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error266 error
    error266, err = error265.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error266
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getPublicImages failed: invalid message type")
    return
  }
  result := MasterServerGetPublicImagesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.Error != nil {
    err = result.Error
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - SessionId
//  - ImageBaseId
func (p *MasterServerClient) GetImageDetails(sessionId Token, imageBaseId UUID) (r *ImageDetailsRead, err error) {
  if err = p.sendGetImageDetails(sessionId, imageBaseId); err != nil { return }
  return p.recvGetImageDetails()
}

func (p *MasterServerClient) sendGetImageDetails(sessionId Token, imageBaseId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getImageDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerGetImageDetailsArgs{
  SessionId : sessionId,
  ImageBaseId : imageBaseId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvGetImageDetails() (value *ImageDetailsRead, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getImageDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getImageDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getImageDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error267 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error268 error
    error268, err = error267.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error268
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getImageDetails failed: invalid message type")
    return
  }
  result := MasterServerGetImageDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - UserId
func (p *MasterServerClient) GetUser(userToken Token, userId UUID) (r *UserInfo, err error) {
  if err = p.sendGetUser(userToken, userId); err != nil { return }
  return p.recvGetUser()
}

func (p *MasterServerClient) sendGetUser(userToken Token, userId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerGetUserArgs{
  UserToken : userToken,
  UserId : userId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvGetUser() (value *UserInfo, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUser" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error269 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error270 error
    error270, err = error269.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error270
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUser failed: invalid message type")
    return
  }
  result := MasterServerGetUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.AuthError != nil {
    err = result.AuthError
    return 
  } else   if result.NotFound != nil {
    err = result.NotFound
    return 
  } else   if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - SessionId
func (p *MasterServerClient) InvalidateSession(sessionId Token) (err error) {
  if err = p.sendInvalidateSession(sessionId); err != nil { return }
  return p.recvInvalidateSession()
}

func (p *MasterServerClient) sendInvalidateSession(sessionId Token)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("invalidateSession", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerInvalidateSessionArgs{
  SessionId : sessionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvInvalidateSession() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "invalidateSession" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "invalidateSession failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "invalidateSession failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error271 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error272 error
    error272, err = error271.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error272
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "invalidateSession failed: invalid message type")
    return
  }
  result := MasterServerInvalidateSessionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  return
}

// Parameters:
//  - Token
func (p *MasterServerClient) GetUserFromToken(token Token) (r *UserInfo, err error) {
  if err = p.sendGetUserFromToken(token); err != nil { return }
  return p.recvGetUserFromToken()
}

func (p *MasterServerClient) sendGetUserFromToken(token Token)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserFromToken", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerGetUserFromTokenArgs{
  Token : token,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvGetUserFromToken() (value *UserInfo, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserFromToken" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserFromToken failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserFromToken failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error273 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error274 error
    error274, err = error273.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error274
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserFromToken failed: invalid message type")
    return
  }
  result := MasterServerGetUserFromTokenResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - ServerSessionId
func (p *MasterServerClient) IsServerAuthenticated(serverSessionId Token) (r bool, err error) {
  if err = p.sendIsServerAuthenticated(serverSessionId); err != nil { return }
  return p.recvIsServerAuthenticated()
}

func (p *MasterServerClient) sendIsServerAuthenticated(serverSessionId Token)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("isServerAuthenticated", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerIsServerAuthenticatedArgs{
  ServerSessionId : serverSessionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvIsServerAuthenticated() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "isServerAuthenticated" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "isServerAuthenticated failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isServerAuthenticated failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error275 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error276 error
    error276, err = error275.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error276
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "isServerAuthenticated failed: invalid message type")
    return
  }
  result := MasterServerIsServerAuthenticatedResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - SatelliteId
func (p *MasterServerClient) StartServerAuthentication(satelliteId int32) (r []byte, err error) {
  if err = p.sendStartServerAuthentication(satelliteId); err != nil { return }
  return p.recvStartServerAuthentication()
}

func (p *MasterServerClient) sendStartServerAuthentication(satelliteId int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("startServerAuthentication", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerStartServerAuthenticationArgs{
  SatelliteId : satelliteId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvStartServerAuthentication() (value []byte, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "startServerAuthentication" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "startServerAuthentication failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "startServerAuthentication failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error277 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error278 error
    error278, err = error277.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error278
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "startServerAuthentication failed: invalid message type")
    return
  }
  result := MasterServerStartServerAuthenticationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.Error != nil {
    err = result.Error
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - SatelliteId
//  - ChallengeResponse
func (p *MasterServerClient) ServerAuthenticate(satelliteId int32, challengeResponse []byte) (r *ServerSessionData, err error) {
  if err = p.sendServerAuthenticate(satelliteId, challengeResponse); err != nil { return }
  return p.recvServerAuthenticate()
}

func (p *MasterServerClient) sendServerAuthenticate(satelliteId int32, challengeResponse []byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("serverAuthenticate", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerServerAuthenticateArgs{
  SatelliteId : satelliteId,
  ChallengeResponse : challengeResponse,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvServerAuthenticate() (value *ServerSessionData, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "serverAuthenticate" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "serverAuthenticate failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "serverAuthenticate failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error279 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error280 error
    error280, err = error279.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error280
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "serverAuthenticate failed: invalid message type")
    return
  }
  result := MasterServerServerAuthenticateResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.Errr != nil {
    err = result.Errr
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - ServerSessionId
//  - ImageVersionId
func (p *MasterServerClient) GetImageData(serverSessionId Token, imageVersionId UUID) (r *ImagePublishData, err error) {
  if err = p.sendGetImageData(serverSessionId, imageVersionId); err != nil { return }
  return p.recvGetImageData()
}

func (p *MasterServerClient) sendGetImageData(serverSessionId Token, imageVersionId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getImageData", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerGetImageDataArgs{
  ServerSessionId : serverSessionId,
  ImageVersionId : imageVersionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvGetImageData() (value *ImagePublishData, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getImageData" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getImageData failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getImageData failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error281 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error282 error
    error282, err = error281.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error282
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getImageData failed: invalid message type")
    return
  }
  result := MasterServerGetImageDataResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.Failure2 != nil {
    err = result.Failure2
    return 
  } else   if result.F3 != nil {
    err = result.F3
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - ImageDescription
//  - BlockHashes
func (p *MasterServerClient) SubmitImage(userToken Token, imageDescription *ImagePublishData, blockHashes [][]byte) (r *TransferInformation, err error) {
  if err = p.sendSubmitImage(userToken, imageDescription, blockHashes); err != nil { return }
  return p.recvSubmitImage()
}

func (p *MasterServerClient) sendSubmitImage(userToken Token, imageDescription *ImagePublishData, blockHashes [][]byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("submitImage", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerSubmitImageArgs{
  UserToken : userToken,
  ImageDescription : imageDescription,
  BlockHashes : blockHashes,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvSubmitImage() (value *TransferInformation, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "submitImage" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "submitImage failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "submitImage failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error283 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error284 error
    error284, err = error283.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error284
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "submitImage failed: invalid message type")
    return
  }
  result := MasterServerSubmitImageResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.Failure2 != nil {
    err = result.Failure2
    return 
  } else   if result.Failure3 != nil {
    err = result.Failure3
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UserToken
//  - DisplayName
//  - Addresses
//  - Modulus
//  - Exponent
//  - Certsha256
func (p *MasterServerClient) RegisterSatellite(userToken Token, displayName string, addresses []string, modulus string, exponent string, certsha256 []byte) (r int32, err error) {
  if err = p.sendRegisterSatellite(userToken, displayName, addresses, modulus, exponent, certsha256); err != nil { return }
  return p.recvRegisterSatellite()
}

func (p *MasterServerClient) sendRegisterSatellite(userToken Token, displayName string, addresses []string, modulus string, exponent string, certsha256 []byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerSatellite", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerRegisterSatelliteArgs{
  UserToken : userToken,
  DisplayName : displayName,
  Addresses : addresses,
  Modulus : modulus,
  Exponent : exponent,
  Certsha256 : certsha256,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvRegisterSatellite() (value int32, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerSatellite" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerSatellite failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerSatellite failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error285 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error286 error
    error286, err = error285.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error286
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerSatellite failed: invalid message type")
    return
  }
  result := MasterServerRegisterSatelliteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error != nil {
    err = result.Error
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - ServerSessionId
//  - DisplayName
//  - Addresses
func (p *MasterServerClient) UpdateSatellite(serverSessionId Token, displayName string, addresses []string) (r bool, err error) {
  if err = p.sendUpdateSatellite(serverSessionId, displayName, addresses); err != nil { return }
  return p.recvUpdateSatellite()
}

func (p *MasterServerClient) sendUpdateSatellite(serverSessionId Token, displayName string, addresses []string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateSatellite", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerUpdateSatelliteArgs{
  ServerSessionId : serverSessionId,
  DisplayName : displayName,
  Addresses : addresses,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvUpdateSatellite() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateSatellite" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateSatellite failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSatellite failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error287 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error288 error
    error288, err = error287.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error288
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateSatellite failed: invalid message type")
    return
  }
  result := MasterServerUpdateSatelliteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.Error != nil {
    err = result.Error
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - SessionId
//  - ImageVersionId
func (p *MasterServerClient) DownloadImage(sessionId Token, imageVersionId UUID) (r *TransferInformation, err error) {
  if err = p.sendDownloadImage(sessionId, imageVersionId); err != nil { return }
  return p.recvDownloadImage()
}

func (p *MasterServerClient) sendDownloadImage(sessionId Token, imageVersionId UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("downloadImage", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerDownloadImageArgs{
  SessionId : sessionId,
  ImageVersionId : imageVersionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvDownloadImage() (value *TransferInformation, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "downloadImage" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "downloadImage failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "downloadImage failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error289 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error290 error
    error290, err = error289.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error290
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "downloadImage failed: invalid message type")
    return
  }
  result := MasterServerDownloadImageResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Failure != nil {
    err = result.Failure
    return 
  } else   if result.Failure2 != nil {
    err = result.Failure2
    return 
  } else   if result.F3 != nil {
    err = result.F3
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *MasterServerClient) GetOrganizations() (r []*Organization, err error) {
  if err = p.sendGetOrganizations(); err != nil { return }
  return p.recvGetOrganizations()
}

func (p *MasterServerClient) sendGetOrganizations()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getOrganizations", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerGetOrganizationsArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvGetOrganizations() (value []*Organization, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getOrganizations" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getOrganizations failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getOrganizations failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error291 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error292 error
    error292, err = error291.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error292
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getOrganizations failed: invalid message type")
    return
  }
  result := MasterServerGetOrganizationsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *MasterServerClient) GetOperatingSystems() (r []*OperatingSystem, err error) {
  if err = p.sendGetOperatingSystems(); err != nil { return }
  return p.recvGetOperatingSystems()
}

func (p *MasterServerClient) sendGetOperatingSystems()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getOperatingSystems", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerGetOperatingSystemsArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvGetOperatingSystems() (value []*OperatingSystem, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getOperatingSystems" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getOperatingSystems failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getOperatingSystems failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error293 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error294 error
    error294, err = error293.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error294
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getOperatingSystems failed: invalid message type")
    return
  }
  result := MasterServerGetOperatingSystemsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *MasterServerClient) GetVirtualizers() (r []*Virtualizer, err error) {
  if err = p.sendGetVirtualizers(); err != nil { return }
  return p.recvGetVirtualizers()
}

func (p *MasterServerClient) sendGetVirtualizers()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getVirtualizers", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerGetVirtualizersArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvGetVirtualizers() (value []*Virtualizer, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getVirtualizers" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getVirtualizers failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getVirtualizers failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error295 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error296 error
    error296, err = error295.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error296
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getVirtualizers failed: invalid message type")
    return
  }
  result := MasterServerGetVirtualizersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - StartDate
func (p *MasterServerClient) GetTags(startDate UnixTimestamp) (r []*MasterTag, err error) {
  if err = p.sendGetTags(startDate); err != nil { return }
  return p.recvGetTags()
}

func (p *MasterServerClient) sendGetTags(startDate UnixTimestamp)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getTags", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerGetTagsArgs{
  StartDate : startDate,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvGetTags() (value []*MasterTag, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getTags" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getTags failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTags failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error297 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error298 error
    error298, err = error297.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error298
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTags failed: invalid message type")
    return
  }
  result := MasterServerGetTagsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - StartDate
func (p *MasterServerClient) GetSoftware(startDate UnixTimestamp) (r []*MasterSoftware, err error) {
  if err = p.sendGetSoftware(startDate); err != nil { return }
  return p.recvGetSoftware()
}

func (p *MasterServerClient) sendGetSoftware(startDate UnixTimestamp)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSoftware", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerGetSoftwareArgs{
  StartDate : startDate,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvGetSoftware() (value []*MasterSoftware, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSoftware" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSoftware failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSoftware failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error299 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error300 error
    error300, err = error299.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error300
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSoftware failed: invalid message type")
    return
  }
  result := MasterServerGetSoftwareResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.ServerError != nil {
    err = result.ServerError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UploadToken
func (p *MasterServerClient) QueryUploadStatus(uploadToken Token) (r *TransferStatus, err error) {
  if err = p.sendQueryUploadStatus(uploadToken); err != nil { return }
  return p.recvQueryUploadStatus()
}

func (p *MasterServerClient) sendQueryUploadStatus(uploadToken Token)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("queryUploadStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MasterServerQueryUploadStatusArgs{
  UploadToken : uploadToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MasterServerClient) recvQueryUploadStatus() (value *TransferStatus, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "queryUploadStatus" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "queryUploadStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryUploadStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error301 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error302 error
    error302, err = error301.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error302
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "queryUploadStatus failed: invalid message type")
    return
  }
  result := MasterServerQueryUploadStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex1 != nil {
    err = result.Ex1
    return 
  }
  value = result.GetSuccess()
  return
}


type MasterServerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MasterServer
}

func (p *MasterServerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MasterServerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MasterServerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMasterServerProcessor(handler MasterServer) *MasterServerProcessor {

  self303 := &MasterServerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self303.processorMap["ping"] = &masterServerProcessorPing{handler:handler}
  self303.processorMap["authenticate"] = &masterServerProcessorAuthenticate{handler:handler}
  self303.processorMap["localAccountLogin"] = &masterServerProcessorLocalAccountLogin{handler:handler}
  self303.processorMap["setUsedSatellite"] = &masterServerProcessorSetUsedSatellite{handler:handler}
  self303.processorMap["findUser"] = &masterServerProcessorFindUser{handler:handler}
  self303.processorMap["getPublicImages"] = &masterServerProcessorGetPublicImages{handler:handler}
  self303.processorMap["getImageDetails"] = &masterServerProcessorGetImageDetails{handler:handler}
  self303.processorMap["getUser"] = &masterServerProcessorGetUser{handler:handler}
  self303.processorMap["invalidateSession"] = &masterServerProcessorInvalidateSession{handler:handler}
  self303.processorMap["getUserFromToken"] = &masterServerProcessorGetUserFromToken{handler:handler}
  self303.processorMap["isServerAuthenticated"] = &masterServerProcessorIsServerAuthenticated{handler:handler}
  self303.processorMap["startServerAuthentication"] = &masterServerProcessorStartServerAuthentication{handler:handler}
  self303.processorMap["serverAuthenticate"] = &masterServerProcessorServerAuthenticate{handler:handler}
  self303.processorMap["getImageData"] = &masterServerProcessorGetImageData{handler:handler}
  self303.processorMap["submitImage"] = &masterServerProcessorSubmitImage{handler:handler}
  self303.processorMap["registerSatellite"] = &masterServerProcessorRegisterSatellite{handler:handler}
  self303.processorMap["updateSatellite"] = &masterServerProcessorUpdateSatellite{handler:handler}
  self303.processorMap["downloadImage"] = &masterServerProcessorDownloadImage{handler:handler}
  self303.processorMap["getOrganizations"] = &masterServerProcessorGetOrganizations{handler:handler}
  self303.processorMap["getOperatingSystems"] = &masterServerProcessorGetOperatingSystems{handler:handler}
  self303.processorMap["getVirtualizers"] = &masterServerProcessorGetVirtualizers{handler:handler}
  self303.processorMap["getTags"] = &masterServerProcessorGetTags{handler:handler}
  self303.processorMap["getSoftware"] = &masterServerProcessorGetSoftware{handler:handler}
  self303.processorMap["queryUploadStatus"] = &masterServerProcessorQueryUploadStatus{handler:handler}
return self303
}

func (p *MasterServerProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x304 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x304.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x304

}

type masterServerProcessorPing struct {
  handler MasterServer
}

func (p *masterServerProcessorPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerPingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerPingResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Ping(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: " + err2.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorAuthenticate struct {
  handler MasterServer
}

func (p *masterServerProcessorAuthenticate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerAuthenticateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("authenticate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerAuthenticateResult{}
var retval *SessionData
  var err2 error
  if retval, err2 = p.handler.Authenticate(args.Login, args.Password); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authenticate: " + err2.Error())
    oprot.WriteMessageBegin("authenticate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("authenticate", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorLocalAccountLogin struct {
  handler MasterServer
}

func (p *masterServerProcessorLocalAccountLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerLocalAccountLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("localAccountLogin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerLocalAccountLoginResult{}
var retval *ClientSessionData
  var err2 error
  if retval, err2 = p.handler.LocalAccountLogin(args.Login, args.Password); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing localAccountLogin: " + err2.Error())
    oprot.WriteMessageBegin("localAccountLogin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("localAccountLogin", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorSetUsedSatellite struct {
  handler MasterServer
}

func (p *masterServerProcessorSetUsedSatellite) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerSetUsedSatelliteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setUsedSatellite", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerSetUsedSatelliteResult{}
  var err2 error
  if err2 = p.handler.SetUsedSatellite(args.SessionId, args.SatelliteName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setUsedSatellite: " + err2.Error())
    oprot.WriteMessageBegin("setUsedSatellite", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("setUsedSatellite", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorFindUser struct {
  handler MasterServer
}

func (p *masterServerProcessorFindUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerFindUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerFindUserResult{}
var retval []*UserInfo
  var err2 error
  if retval, err2 = p.handler.FindUser(args.SessionId, args.OrganizationId, args.SearchTerm); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findUser: " + err2.Error())
    oprot.WriteMessageBegin("findUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorGetPublicImages struct {
  handler MasterServer
}

func (p *masterServerProcessorGetPublicImages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerGetPublicImagesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getPublicImages", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerGetPublicImagesResult{}
var retval []*ImageSummaryRead
  var err2 error
  if retval, err2 = p.handler.GetPublicImages(args.SessionId, args.Page); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPublicImages: " + err2.Error())
    oprot.WriteMessageBegin("getPublicImages", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getPublicImages", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorGetImageDetails struct {
  handler MasterServer
}

func (p *masterServerProcessorGetImageDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerGetImageDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getImageDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerGetImageDetailsResult{}
var retval *ImageDetailsRead
  var err2 error
  if retval, err2 = p.handler.GetImageDetails(args.SessionId, args.ImageBaseId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getImageDetails: " + err2.Error())
    oprot.WriteMessageBegin("getImageDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getImageDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorGetUser struct {
  handler MasterServer
}

func (p *masterServerProcessorGetUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerGetUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerGetUserResult{}
var retval *UserInfo
  var err2 error
  if retval, err2 = p.handler.GetUser(args.UserToken, args.UserId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.AuthError = v
    case *TNotFoundException:
  result.NotFound = v
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUser: " + err2.Error())
    oprot.WriteMessageBegin("getUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorInvalidateSession struct {
  handler MasterServer
}

func (p *masterServerProcessorInvalidateSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerInvalidateSessionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("invalidateSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerInvalidateSessionResult{}
  var err2 error
  if err2 = p.handler.InvalidateSession(args.SessionId); err2 != nil {
  switch v := err2.(type) {
    case *TInvalidTokenException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing invalidateSession: " + err2.Error())
    oprot.WriteMessageBegin("invalidateSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("invalidateSession", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorGetUserFromToken struct {
  handler MasterServer
}

func (p *masterServerProcessorGetUserFromToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerGetUserFromTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserFromToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerGetUserFromTokenResult{}
var retval *UserInfo
  var err2 error
  if retval, err2 = p.handler.GetUserFromToken(args.Token); err2 != nil {
  switch v := err2.(type) {
    case *TInvalidTokenException:
  result.Failure = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserFromToken: " + err2.Error())
    oprot.WriteMessageBegin("getUserFromToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserFromToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorIsServerAuthenticated struct {
  handler MasterServer
}

func (p *masterServerProcessorIsServerAuthenticated) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerIsServerAuthenticatedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("isServerAuthenticated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerIsServerAuthenticatedResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.IsServerAuthenticated(args.ServerSessionId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isServerAuthenticated: " + err2.Error())
    oprot.WriteMessageBegin("isServerAuthenticated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("isServerAuthenticated", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorStartServerAuthentication struct {
  handler MasterServer
}

func (p *masterServerProcessorStartServerAuthentication) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerStartServerAuthenticationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("startServerAuthentication", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerStartServerAuthenticationResult{}
var retval []byte
  var err2 error
  if retval, err2 = p.handler.StartServerAuthentication(args.SatelliteId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startServerAuthentication: " + err2.Error())
    oprot.WriteMessageBegin("startServerAuthentication", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("startServerAuthentication", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorServerAuthenticate struct {
  handler MasterServer
}

func (p *masterServerProcessorServerAuthenticate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerServerAuthenticateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("serverAuthenticate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerServerAuthenticateResult{}
var retval *ServerSessionData
  var err2 error
  if retval, err2 = p.handler.ServerAuthenticate(args.SatelliteId, args.ChallengeResponse); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.Errr = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing serverAuthenticate: " + err2.Error())
    oprot.WriteMessageBegin("serverAuthenticate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("serverAuthenticate", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorGetImageData struct {
  handler MasterServer
}

func (p *masterServerProcessorGetImageData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerGetImageDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getImageData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerGetImageDataResult{}
var retval *ImagePublishData
  var err2 error
  if retval, err2 = p.handler.GetImageData(args.ServerSessionId, args.ImageVersionId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.Failure2 = v
    case *TNotFoundException:
  result.F3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getImageData: " + err2.Error())
    oprot.WriteMessageBegin("getImageData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getImageData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorSubmitImage struct {
  handler MasterServer
}

func (p *masterServerProcessorSubmitImage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerSubmitImageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("submitImage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerSubmitImageResult{}
var retval *TransferInformation
  var err2 error
  if retval, err2 = p.handler.SubmitImage(args.UserToken, args.ImageDescription, args.BlockHashes); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.Failure2 = v
    case *TTransferRejectedException:
  result.Failure3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing submitImage: " + err2.Error())
    oprot.WriteMessageBegin("submitImage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("submitImage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorRegisterSatellite struct {
  handler MasterServer
}

func (p *masterServerProcessorRegisterSatellite) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerRegisterSatelliteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerSatellite", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerRegisterSatelliteResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.RegisterSatellite(args.UserToken, args.DisplayName, args.Addresses, args.Modulus, args.Exponent, args.Certsha256); err2 != nil {
  switch v := err2.(type) {
    case *TInvocationException:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerSatellite: " + err2.Error())
    oprot.WriteMessageBegin("registerSatellite", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerSatellite", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorUpdateSatellite struct {
  handler MasterServer
}

func (p *masterServerProcessorUpdateSatellite) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerUpdateSatelliteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateSatellite", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerUpdateSatelliteResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateSatellite(args.ServerSessionId, args.DisplayName, args.Addresses); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSatellite: " + err2.Error())
    oprot.WriteMessageBegin("updateSatellite", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateSatellite", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorDownloadImage struct {
  handler MasterServer
}

func (p *masterServerProcessorDownloadImage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerDownloadImageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("downloadImage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerDownloadImageResult{}
var retval *TransferInformation
  var err2 error
  if retval, err2 = p.handler.DownloadImage(args.SessionId, args.ImageVersionId); err2 != nil {
  switch v := err2.(type) {
    case *TAuthorizationException:
  result.Failure = v
    case *TInvocationException:
  result.Failure2 = v
    case *TNotFoundException:
  result.F3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing downloadImage: " + err2.Error())
    oprot.WriteMessageBegin("downloadImage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("downloadImage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorGetOrganizations struct {
  handler MasterServer
}

func (p *masterServerProcessorGetOrganizations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerGetOrganizationsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getOrganizations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerGetOrganizationsResult{}
var retval []*Organization
  var err2 error
  if retval, err2 = p.handler.GetOrganizations(); err2 != nil {
  switch v := err2.(type) {
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOrganizations: " + err2.Error())
    oprot.WriteMessageBegin("getOrganizations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getOrganizations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorGetOperatingSystems struct {
  handler MasterServer
}

func (p *masterServerProcessorGetOperatingSystems) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerGetOperatingSystemsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getOperatingSystems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerGetOperatingSystemsResult{}
var retval []*OperatingSystem
  var err2 error
  if retval, err2 = p.handler.GetOperatingSystems(); err2 != nil {
  switch v := err2.(type) {
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOperatingSystems: " + err2.Error())
    oprot.WriteMessageBegin("getOperatingSystems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getOperatingSystems", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorGetVirtualizers struct {
  handler MasterServer
}

func (p *masterServerProcessorGetVirtualizers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerGetVirtualizersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getVirtualizers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerGetVirtualizersResult{}
var retval []*Virtualizer
  var err2 error
  if retval, err2 = p.handler.GetVirtualizers(); err2 != nil {
  switch v := err2.(type) {
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVirtualizers: " + err2.Error())
    oprot.WriteMessageBegin("getVirtualizers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getVirtualizers", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorGetTags struct {
  handler MasterServer
}

func (p *masterServerProcessorGetTags) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerGetTagsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTags", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerGetTagsResult{}
var retval []*MasterTag
  var err2 error
  if retval, err2 = p.handler.GetTags(args.StartDate); err2 != nil {
  switch v := err2.(type) {
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTags: " + err2.Error())
    oprot.WriteMessageBegin("getTags", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getTags", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorGetSoftware struct {
  handler MasterServer
}

func (p *masterServerProcessorGetSoftware) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerGetSoftwareArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSoftware", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerGetSoftwareResult{}
var retval []*MasterSoftware
  var err2 error
  if retval, err2 = p.handler.GetSoftware(args.StartDate); err2 != nil {
  switch v := err2.(type) {
    case *TInvocationException:
  result.ServerError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSoftware: " + err2.Error())
    oprot.WriteMessageBegin("getSoftware", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSoftware", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterServerProcessorQueryUploadStatus struct {
  handler MasterServer
}

func (p *masterServerProcessorQueryUploadStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterServerQueryUploadStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryUploadStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterServerQueryUploadStatusResult{}
var retval *TransferStatus
  var err2 error
  if retval, err2 = p.handler.QueryUploadStatus(args.UploadToken); err2 != nil {
  switch v := err2.(type) {
    case *TInvalidTokenException:
  result.Ex1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryUploadStatus: " + err2.Error())
    oprot.WriteMessageBegin("queryUploadStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryUploadStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type MasterServerPingArgs struct {
}

func NewMasterServerPingArgs() *MasterServerPingArgs {
  return &MasterServerPingArgs{}
}

func (p *MasterServerPingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerPingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerPingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerPingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MasterServerPingResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMasterServerPingResult() *MasterServerPingResult {
  return &MasterServerPingResult{}
}

var MasterServerPingResult_Success_DEFAULT bool
func (p *MasterServerPingResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return MasterServerPingResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MasterServerPingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerPingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerPingResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MasterServerPingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerPingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerPingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerPingResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - Password
type MasterServerAuthenticateArgs struct {
  Login string `thrift:"login,1" db:"login" json:"login"`
  Password string `thrift:"password,2" db:"password" json:"password"`
}

func NewMasterServerAuthenticateArgs() *MasterServerAuthenticateArgs {
  return &MasterServerAuthenticateArgs{}
}


func (p *MasterServerAuthenticateArgs) GetLogin() string {
  return p.Login
}

func (p *MasterServerAuthenticateArgs) GetPassword() string {
  return p.Password
}
func (p *MasterServerAuthenticateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerAuthenticateArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Login = v
}
  return nil
}

func (p *MasterServerAuthenticateArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *MasterServerAuthenticateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("authenticate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerAuthenticateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err) }
  if err := oprot.WriteString(string(p.Login)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err) }
  return err
}

func (p *MasterServerAuthenticateArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  return err
}

func (p *MasterServerAuthenticateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerAuthenticateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
//  - Error
type MasterServerAuthenticateResult struct {
  Success *SessionData `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  Error *TInvocationException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewMasterServerAuthenticateResult() *MasterServerAuthenticateResult {
  return &MasterServerAuthenticateResult{}
}

var MasterServerAuthenticateResult_Success_DEFAULT *SessionData
func (p *MasterServerAuthenticateResult) GetSuccess() *SessionData {
  if !p.IsSetSuccess() {
    return MasterServerAuthenticateResult_Success_DEFAULT
  }
return p.Success
}
var MasterServerAuthenticateResult_Failure_DEFAULT *TAuthorizationException
func (p *MasterServerAuthenticateResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return MasterServerAuthenticateResult_Failure_DEFAULT
  }
return p.Failure
}
var MasterServerAuthenticateResult_Error_DEFAULT *TInvocationException
func (p *MasterServerAuthenticateResult) GetError() *TInvocationException {
  if !p.IsSetError() {
    return MasterServerAuthenticateResult_Error_DEFAULT
  }
return p.Error
}
func (p *MasterServerAuthenticateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerAuthenticateResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *MasterServerAuthenticateResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MasterServerAuthenticateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerAuthenticateResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SessionData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MasterServerAuthenticateResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *MasterServerAuthenticateResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Error = &TInvocationException{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MasterServerAuthenticateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("authenticate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerAuthenticateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerAuthenticateResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *MasterServerAuthenticateResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *MasterServerAuthenticateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerAuthenticateResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - Password
type MasterServerLocalAccountLoginArgs struct {
  Login string `thrift:"login,1" db:"login" json:"login"`
  Password string `thrift:"password,2" db:"password" json:"password"`
}

func NewMasterServerLocalAccountLoginArgs() *MasterServerLocalAccountLoginArgs {
  return &MasterServerLocalAccountLoginArgs{}
}


func (p *MasterServerLocalAccountLoginArgs) GetLogin() string {
  return p.Login
}

func (p *MasterServerLocalAccountLoginArgs) GetPassword() string {
  return p.Password
}
func (p *MasterServerLocalAccountLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerLocalAccountLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Login = v
}
  return nil
}

func (p *MasterServerLocalAccountLoginArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *MasterServerLocalAccountLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("localAccountLogin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerLocalAccountLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err) }
  if err := oprot.WriteString(string(p.Login)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err) }
  return err
}

func (p *MasterServerLocalAccountLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  return err
}

func (p *MasterServerLocalAccountLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerLocalAccountLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
//  - Error
type MasterServerLocalAccountLoginResult struct {
  Success *ClientSessionData `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  Error *TInvocationException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewMasterServerLocalAccountLoginResult() *MasterServerLocalAccountLoginResult {
  return &MasterServerLocalAccountLoginResult{}
}

var MasterServerLocalAccountLoginResult_Success_DEFAULT *ClientSessionData
func (p *MasterServerLocalAccountLoginResult) GetSuccess() *ClientSessionData {
  if !p.IsSetSuccess() {
    return MasterServerLocalAccountLoginResult_Success_DEFAULT
  }
return p.Success
}
var MasterServerLocalAccountLoginResult_Failure_DEFAULT *TAuthorizationException
func (p *MasterServerLocalAccountLoginResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return MasterServerLocalAccountLoginResult_Failure_DEFAULT
  }
return p.Failure
}
var MasterServerLocalAccountLoginResult_Error_DEFAULT *TInvocationException
func (p *MasterServerLocalAccountLoginResult) GetError() *TInvocationException {
  if !p.IsSetError() {
    return MasterServerLocalAccountLoginResult_Error_DEFAULT
  }
return p.Error
}
func (p *MasterServerLocalAccountLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerLocalAccountLoginResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *MasterServerLocalAccountLoginResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MasterServerLocalAccountLoginResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerLocalAccountLoginResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ClientSessionData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MasterServerLocalAccountLoginResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *MasterServerLocalAccountLoginResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Error = &TInvocationException{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MasterServerLocalAccountLoginResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("localAccountLogin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerLocalAccountLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerLocalAccountLoginResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *MasterServerLocalAccountLoginResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *MasterServerLocalAccountLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerLocalAccountLoginResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - SatelliteName
type MasterServerSetUsedSatelliteArgs struct {
  SessionId Token `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  SatelliteName string `thrift:"satelliteName,2" db:"satelliteName" json:"satelliteName"`
}

func NewMasterServerSetUsedSatelliteArgs() *MasterServerSetUsedSatelliteArgs {
  return &MasterServerSetUsedSatelliteArgs{}
}


func (p *MasterServerSetUsedSatelliteArgs) GetSessionId() Token {
  return p.SessionId
}

func (p *MasterServerSetUsedSatelliteArgs) GetSatelliteName() string {
  return p.SatelliteName
}
func (p *MasterServerSetUsedSatelliteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerSetUsedSatelliteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.SessionId = temp
}
  return nil
}

func (p *MasterServerSetUsedSatelliteArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SatelliteName = v
}
  return nil
}

func (p *MasterServerSetUsedSatelliteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setUsedSatellite_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerSetUsedSatelliteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *MasterServerSetUsedSatelliteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("satelliteName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:satelliteName: ", p), err) }
  if err := oprot.WriteString(string(p.SatelliteName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.satelliteName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:satelliteName: ", p), err) }
  return err
}

func (p *MasterServerSetUsedSatelliteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerSetUsedSatelliteArgs(%+v)", *p)
}

type MasterServerSetUsedSatelliteResult struct {
}

func NewMasterServerSetUsedSatelliteResult() *MasterServerSetUsedSatelliteResult {
  return &MasterServerSetUsedSatelliteResult{}
}

func (p *MasterServerSetUsedSatelliteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerSetUsedSatelliteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setUsedSatellite_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerSetUsedSatelliteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerSetUsedSatelliteResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - OrganizationId
//  - SearchTerm
type MasterServerFindUserArgs struct {
  SessionId Token `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  OrganizationId string `thrift:"organizationId,2" db:"organizationId" json:"organizationId"`
  SearchTerm string `thrift:"searchTerm,3" db:"searchTerm" json:"searchTerm"`
}

func NewMasterServerFindUserArgs() *MasterServerFindUserArgs {
  return &MasterServerFindUserArgs{}
}


func (p *MasterServerFindUserArgs) GetSessionId() Token {
  return p.SessionId
}

func (p *MasterServerFindUserArgs) GetOrganizationId() string {
  return p.OrganizationId
}

func (p *MasterServerFindUserArgs) GetSearchTerm() string {
  return p.SearchTerm
}
func (p *MasterServerFindUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerFindUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.SessionId = temp
}
  return nil
}

func (p *MasterServerFindUserArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OrganizationId = v
}
  return nil
}

func (p *MasterServerFindUserArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SearchTerm = v
}
  return nil
}

func (p *MasterServerFindUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerFindUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *MasterServerFindUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("organizationId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:organizationId: ", p), err) }
  if err := oprot.WriteString(string(p.OrganizationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.organizationId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:organizationId: ", p), err) }
  return err
}

func (p *MasterServerFindUserArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchTerm", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:searchTerm: ", p), err) }
  if err := oprot.WriteString(string(p.SearchTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchTerm (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:searchTerm: ", p), err) }
  return err
}

func (p *MasterServerFindUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerFindUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
//  - Error
type MasterServerFindUserResult struct {
  Success []*UserInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  Error *TInvocationException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewMasterServerFindUserResult() *MasterServerFindUserResult {
  return &MasterServerFindUserResult{}
}

var MasterServerFindUserResult_Success_DEFAULT []*UserInfo

func (p *MasterServerFindUserResult) GetSuccess() []*UserInfo {
  return p.Success
}
var MasterServerFindUserResult_Failure_DEFAULT *TAuthorizationException
func (p *MasterServerFindUserResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return MasterServerFindUserResult_Failure_DEFAULT
  }
return p.Failure
}
var MasterServerFindUserResult_Error_DEFAULT *TInvocationException
func (p *MasterServerFindUserResult) GetError() *TInvocationException {
  if !p.IsSetError() {
    return MasterServerFindUserResult_Error_DEFAULT
  }
return p.Error
}
func (p *MasterServerFindUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerFindUserResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *MasterServerFindUserResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MasterServerFindUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerFindUserResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserInfo, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem305 := &UserInfo{}
    if err := _elem305.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem305), err)
    }
    p.Success = append(p.Success, _elem305)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MasterServerFindUserResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *MasterServerFindUserResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Error = &TInvocationException{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MasterServerFindUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerFindUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerFindUserResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *MasterServerFindUserResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *MasterServerFindUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerFindUserResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Page
type MasterServerGetPublicImagesArgs struct {
  SessionId Token `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
}

func NewMasterServerGetPublicImagesArgs() *MasterServerGetPublicImagesArgs {
  return &MasterServerGetPublicImagesArgs{}
}


func (p *MasterServerGetPublicImagesArgs) GetSessionId() Token {
  return p.SessionId
}

func (p *MasterServerGetPublicImagesArgs) GetPage() int32 {
  return p.Page
}
func (p *MasterServerGetPublicImagesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetPublicImagesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.SessionId = temp
}
  return nil
}

func (p *MasterServerGetPublicImagesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *MasterServerGetPublicImagesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPublicImages_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetPublicImagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *MasterServerGetPublicImagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *MasterServerGetPublicImagesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetPublicImagesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
//  - Error
type MasterServerGetPublicImagesResult struct {
  Success []*ImageSummaryRead `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  Error *TInvocationException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewMasterServerGetPublicImagesResult() *MasterServerGetPublicImagesResult {
  return &MasterServerGetPublicImagesResult{}
}

var MasterServerGetPublicImagesResult_Success_DEFAULT []*ImageSummaryRead

func (p *MasterServerGetPublicImagesResult) GetSuccess() []*ImageSummaryRead {
  return p.Success
}
var MasterServerGetPublicImagesResult_Failure_DEFAULT *TAuthorizationException
func (p *MasterServerGetPublicImagesResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return MasterServerGetPublicImagesResult_Failure_DEFAULT
  }
return p.Failure
}
var MasterServerGetPublicImagesResult_Error_DEFAULT *TInvocationException
func (p *MasterServerGetPublicImagesResult) GetError() *TInvocationException {
  if !p.IsSetError() {
    return MasterServerGetPublicImagesResult_Error_DEFAULT
  }
return p.Error
}
func (p *MasterServerGetPublicImagesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerGetPublicImagesResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *MasterServerGetPublicImagesResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MasterServerGetPublicImagesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetPublicImagesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ImageSummaryRead, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem306 := &ImageSummaryRead{}
    if err := _elem306.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem306), err)
    }
    p.Success = append(p.Success, _elem306)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MasterServerGetPublicImagesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *MasterServerGetPublicImagesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Error = &TInvocationException{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MasterServerGetPublicImagesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPublicImages_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetPublicImagesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerGetPublicImagesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *MasterServerGetPublicImagesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *MasterServerGetPublicImagesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetPublicImagesResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - ImageBaseId
type MasterServerGetImageDetailsArgs struct {
  SessionId Token `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  ImageBaseId UUID `thrift:"imageBaseId,2" db:"imageBaseId" json:"imageBaseId"`
}

func NewMasterServerGetImageDetailsArgs() *MasterServerGetImageDetailsArgs {
  return &MasterServerGetImageDetailsArgs{}
}


func (p *MasterServerGetImageDetailsArgs) GetSessionId() Token {
  return p.SessionId
}

func (p *MasterServerGetImageDetailsArgs) GetImageBaseId() UUID {
  return p.ImageBaseId
}
func (p *MasterServerGetImageDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetImageDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.SessionId = temp
}
  return nil
}

func (p *MasterServerGetImageDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageBaseId = temp
}
  return nil
}

func (p *MasterServerGetImageDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getImageDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetImageDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *MasterServerGetImageDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageBaseId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageBaseId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageBaseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageBaseId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageBaseId: ", p), err) }
  return err
}

func (p *MasterServerGetImageDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetImageDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - NotFound
//  - ServerError
type MasterServerGetImageDetailsResult struct {
  Success *ImageDetailsRead `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewMasterServerGetImageDetailsResult() *MasterServerGetImageDetailsResult {
  return &MasterServerGetImageDetailsResult{}
}

var MasterServerGetImageDetailsResult_Success_DEFAULT *ImageDetailsRead
func (p *MasterServerGetImageDetailsResult) GetSuccess() *ImageDetailsRead {
  if !p.IsSetSuccess() {
    return MasterServerGetImageDetailsResult_Success_DEFAULT
  }
return p.Success
}
var MasterServerGetImageDetailsResult_AuthError_DEFAULT *TAuthorizationException
func (p *MasterServerGetImageDetailsResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return MasterServerGetImageDetailsResult_AuthError_DEFAULT
  }
return p.AuthError
}
var MasterServerGetImageDetailsResult_NotFound_DEFAULT *TNotFoundException
func (p *MasterServerGetImageDetailsResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return MasterServerGetImageDetailsResult_NotFound_DEFAULT
  }
return p.NotFound
}
var MasterServerGetImageDetailsResult_ServerError_DEFAULT *TInvocationException
func (p *MasterServerGetImageDetailsResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return MasterServerGetImageDetailsResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *MasterServerGetImageDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerGetImageDetailsResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *MasterServerGetImageDetailsResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *MasterServerGetImageDetailsResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *MasterServerGetImageDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetImageDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ImageDetailsRead{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MasterServerGetImageDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *MasterServerGetImageDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *MasterServerGetImageDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *MasterServerGetImageDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getImageDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetImageDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerGetImageDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *MasterServerGetImageDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *MasterServerGetImageDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *MasterServerGetImageDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetImageDetailsResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - UserId
type MasterServerGetUserArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  UserId UUID `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewMasterServerGetUserArgs() *MasterServerGetUserArgs {
  return &MasterServerGetUserArgs{}
}


func (p *MasterServerGetUserArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *MasterServerGetUserArgs) GetUserId() UUID {
  return p.UserId
}
func (p *MasterServerGetUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *MasterServerGetUserArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.UserId = temp
}
  return nil
}

func (p *MasterServerGetUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *MasterServerGetUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *MasterServerGetUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthError
//  - NotFound
//  - ServerError
type MasterServerGetUserResult struct {
  Success *UserInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  AuthError *TAuthorizationException `thrift:"authError,1" db:"authError" json:"authError,omitempty"`
  NotFound *TNotFoundException `thrift:"notFound,2" db:"notFound" json:"notFound,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,3" db:"serverError" json:"serverError,omitempty"`
}

func NewMasterServerGetUserResult() *MasterServerGetUserResult {
  return &MasterServerGetUserResult{}
}

var MasterServerGetUserResult_Success_DEFAULT *UserInfo
func (p *MasterServerGetUserResult) GetSuccess() *UserInfo {
  if !p.IsSetSuccess() {
    return MasterServerGetUserResult_Success_DEFAULT
  }
return p.Success
}
var MasterServerGetUserResult_AuthError_DEFAULT *TAuthorizationException
func (p *MasterServerGetUserResult) GetAuthError() *TAuthorizationException {
  if !p.IsSetAuthError() {
    return MasterServerGetUserResult_AuthError_DEFAULT
  }
return p.AuthError
}
var MasterServerGetUserResult_NotFound_DEFAULT *TNotFoundException
func (p *MasterServerGetUserResult) GetNotFound() *TNotFoundException {
  if !p.IsSetNotFound() {
    return MasterServerGetUserResult_NotFound_DEFAULT
  }
return p.NotFound
}
var MasterServerGetUserResult_ServerError_DEFAULT *TInvocationException
func (p *MasterServerGetUserResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return MasterServerGetUserResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *MasterServerGetUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerGetUserResult) IsSetAuthError() bool {
  return p.AuthError != nil
}

func (p *MasterServerGetUserResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *MasterServerGetUserResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *MasterServerGetUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MasterServerGetUserResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthError = &TAuthorizationException{}
  if err := p.AuthError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthError), err)
  }
  return nil
}

func (p *MasterServerGetUserResult)  ReadField2(iprot thrift.TProtocol) error {
  p.NotFound = &TNotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *MasterServerGetUserResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *MasterServerGetUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerGetUserResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthError() {
    if err := oprot.WriteFieldBegin("authError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authError: ", p), err) }
    if err := p.AuthError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authError: ", p), err) }
  }
  return err
}

func (p *MasterServerGetUserResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  }
  return err
}

func (p *MasterServerGetUserResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverError: ", p), err) }
  }
  return err
}

func (p *MasterServerGetUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetUserResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type MasterServerInvalidateSessionArgs struct {
  SessionId Token `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
}

func NewMasterServerInvalidateSessionArgs() *MasterServerInvalidateSessionArgs {
  return &MasterServerInvalidateSessionArgs{}
}


func (p *MasterServerInvalidateSessionArgs) GetSessionId() Token {
  return p.SessionId
}
func (p *MasterServerInvalidateSessionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerInvalidateSessionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.SessionId = temp
}
  return nil
}

func (p *MasterServerInvalidateSessionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("invalidateSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerInvalidateSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *MasterServerInvalidateSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerInvalidateSessionArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type MasterServerInvalidateSessionResult struct {
  Ex *TInvalidTokenException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewMasterServerInvalidateSessionResult() *MasterServerInvalidateSessionResult {
  return &MasterServerInvalidateSessionResult{}
}

var MasterServerInvalidateSessionResult_Ex_DEFAULT *TInvalidTokenException
func (p *MasterServerInvalidateSessionResult) GetEx() *TInvalidTokenException {
  if !p.IsSetEx() {
    return MasterServerInvalidateSessionResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *MasterServerInvalidateSessionResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *MasterServerInvalidateSessionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerInvalidateSessionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &TInvalidTokenException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *MasterServerInvalidateSessionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("invalidateSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerInvalidateSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *MasterServerInvalidateSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerInvalidateSessionResult(%+v)", *p)
}

// Attributes:
//  - Token
type MasterServerGetUserFromTokenArgs struct {
  Token Token `thrift:"token,1" db:"token" json:"token"`
}

func NewMasterServerGetUserFromTokenArgs() *MasterServerGetUserFromTokenArgs {
  return &MasterServerGetUserFromTokenArgs{}
}


func (p *MasterServerGetUserFromTokenArgs) GetToken() Token {
  return p.Token
}
func (p *MasterServerGetUserFromTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetUserFromTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.Token = temp
}
  return nil
}

func (p *MasterServerGetUserFromTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserFromToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetUserFromTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *MasterServerGetUserFromTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetUserFromTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
type MasterServerGetUserFromTokenResult struct {
  Success *UserInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TInvalidTokenException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
}

func NewMasterServerGetUserFromTokenResult() *MasterServerGetUserFromTokenResult {
  return &MasterServerGetUserFromTokenResult{}
}

var MasterServerGetUserFromTokenResult_Success_DEFAULT *UserInfo
func (p *MasterServerGetUserFromTokenResult) GetSuccess() *UserInfo {
  if !p.IsSetSuccess() {
    return MasterServerGetUserFromTokenResult_Success_DEFAULT
  }
return p.Success
}
var MasterServerGetUserFromTokenResult_Failure_DEFAULT *TInvalidTokenException
func (p *MasterServerGetUserFromTokenResult) GetFailure() *TInvalidTokenException {
  if !p.IsSetFailure() {
    return MasterServerGetUserFromTokenResult_Failure_DEFAULT
  }
return p.Failure
}
func (p *MasterServerGetUserFromTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerGetUserFromTokenResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *MasterServerGetUserFromTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetUserFromTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MasterServerGetUserFromTokenResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TInvalidTokenException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *MasterServerGetUserFromTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserFromToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetUserFromTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerGetUserFromTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *MasterServerGetUserFromTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetUserFromTokenResult(%+v)", *p)
}

// Attributes:
//  - ServerSessionId
type MasterServerIsServerAuthenticatedArgs struct {
  ServerSessionId Token `thrift:"serverSessionId,1" db:"serverSessionId" json:"serverSessionId"`
}

func NewMasterServerIsServerAuthenticatedArgs() *MasterServerIsServerAuthenticatedArgs {
  return &MasterServerIsServerAuthenticatedArgs{}
}


func (p *MasterServerIsServerAuthenticatedArgs) GetServerSessionId() Token {
  return p.ServerSessionId
}
func (p *MasterServerIsServerAuthenticatedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerIsServerAuthenticatedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.ServerSessionId = temp
}
  return nil
}

func (p *MasterServerIsServerAuthenticatedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isServerAuthenticated_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerIsServerAuthenticatedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serverSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.ServerSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serverSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverSessionId: ", p), err) }
  return err
}

func (p *MasterServerIsServerAuthenticatedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerIsServerAuthenticatedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MasterServerIsServerAuthenticatedResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMasterServerIsServerAuthenticatedResult() *MasterServerIsServerAuthenticatedResult {
  return &MasterServerIsServerAuthenticatedResult{}
}

var MasterServerIsServerAuthenticatedResult_Success_DEFAULT bool
func (p *MasterServerIsServerAuthenticatedResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return MasterServerIsServerAuthenticatedResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MasterServerIsServerAuthenticatedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerIsServerAuthenticatedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerIsServerAuthenticatedResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MasterServerIsServerAuthenticatedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isServerAuthenticated_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerIsServerAuthenticatedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerIsServerAuthenticatedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerIsServerAuthenticatedResult(%+v)", *p)
}

// Attributes:
//  - SatelliteId
type MasterServerStartServerAuthenticationArgs struct {
  SatelliteId int32 `thrift:"satelliteId,1" db:"satelliteId" json:"satelliteId"`
}

func NewMasterServerStartServerAuthenticationArgs() *MasterServerStartServerAuthenticationArgs {
  return &MasterServerStartServerAuthenticationArgs{}
}


func (p *MasterServerStartServerAuthenticationArgs) GetSatelliteId() int32 {
  return p.SatelliteId
}
func (p *MasterServerStartServerAuthenticationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerStartServerAuthenticationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SatelliteId = v
}
  return nil
}

func (p *MasterServerStartServerAuthenticationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startServerAuthentication_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerStartServerAuthenticationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("satelliteId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:satelliteId: ", p), err) }
  if err := oprot.WriteI32(int32(p.SatelliteId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.satelliteId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:satelliteId: ", p), err) }
  return err
}

func (p *MasterServerStartServerAuthenticationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerStartServerAuthenticationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
//  - Error
type MasterServerStartServerAuthenticationResult struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  Error *TInvocationException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewMasterServerStartServerAuthenticationResult() *MasterServerStartServerAuthenticationResult {
  return &MasterServerStartServerAuthenticationResult{}
}

var MasterServerStartServerAuthenticationResult_Success_DEFAULT []byte

func (p *MasterServerStartServerAuthenticationResult) GetSuccess() []byte {
  return p.Success
}
var MasterServerStartServerAuthenticationResult_Failure_DEFAULT *TAuthorizationException
func (p *MasterServerStartServerAuthenticationResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return MasterServerStartServerAuthenticationResult_Failure_DEFAULT
  }
return p.Failure
}
var MasterServerStartServerAuthenticationResult_Error_DEFAULT *TInvocationException
func (p *MasterServerStartServerAuthenticationResult) GetError() *TInvocationException {
  if !p.IsSetError() {
    return MasterServerStartServerAuthenticationResult_Error_DEFAULT
  }
return p.Error
}
func (p *MasterServerStartServerAuthenticationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerStartServerAuthenticationResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *MasterServerStartServerAuthenticationResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MasterServerStartServerAuthenticationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerStartServerAuthenticationResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *MasterServerStartServerAuthenticationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *MasterServerStartServerAuthenticationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Error = &TInvocationException{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MasterServerStartServerAuthenticationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startServerAuthentication_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerStartServerAuthenticationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerStartServerAuthenticationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *MasterServerStartServerAuthenticationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *MasterServerStartServerAuthenticationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerStartServerAuthenticationResult(%+v)", *p)
}

// Attributes:
//  - SatelliteId
//  - ChallengeResponse
type MasterServerServerAuthenticateArgs struct {
  SatelliteId int32 `thrift:"satelliteId,1" db:"satelliteId" json:"satelliteId"`
  ChallengeResponse []byte `thrift:"challengeResponse,2" db:"challengeResponse" json:"challengeResponse"`
}

func NewMasterServerServerAuthenticateArgs() *MasterServerServerAuthenticateArgs {
  return &MasterServerServerAuthenticateArgs{}
}


func (p *MasterServerServerAuthenticateArgs) GetSatelliteId() int32 {
  return p.SatelliteId
}

func (p *MasterServerServerAuthenticateArgs) GetChallengeResponse() []byte {
  return p.ChallengeResponse
}
func (p *MasterServerServerAuthenticateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerServerAuthenticateArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SatelliteId = v
}
  return nil
}

func (p *MasterServerServerAuthenticateArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChallengeResponse = v
}
  return nil
}

func (p *MasterServerServerAuthenticateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("serverAuthenticate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerServerAuthenticateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("satelliteId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:satelliteId: ", p), err) }
  if err := oprot.WriteI32(int32(p.SatelliteId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.satelliteId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:satelliteId: ", p), err) }
  return err
}

func (p *MasterServerServerAuthenticateArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("challengeResponse", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:challengeResponse: ", p), err) }
  if err := oprot.WriteBinary(p.ChallengeResponse); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.challengeResponse (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:challengeResponse: ", p), err) }
  return err
}

func (p *MasterServerServerAuthenticateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerServerAuthenticateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
//  - Errr
type MasterServerServerAuthenticateResult struct {
  Success *ServerSessionData `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  Errr *TInvocationException `thrift:"errr,2" db:"errr" json:"errr,omitempty"`
}

func NewMasterServerServerAuthenticateResult() *MasterServerServerAuthenticateResult {
  return &MasterServerServerAuthenticateResult{}
}

var MasterServerServerAuthenticateResult_Success_DEFAULT *ServerSessionData
func (p *MasterServerServerAuthenticateResult) GetSuccess() *ServerSessionData {
  if !p.IsSetSuccess() {
    return MasterServerServerAuthenticateResult_Success_DEFAULT
  }
return p.Success
}
var MasterServerServerAuthenticateResult_Failure_DEFAULT *TAuthorizationException
func (p *MasterServerServerAuthenticateResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return MasterServerServerAuthenticateResult_Failure_DEFAULT
  }
return p.Failure
}
var MasterServerServerAuthenticateResult_Errr_DEFAULT *TInvocationException
func (p *MasterServerServerAuthenticateResult) GetErrr() *TInvocationException {
  if !p.IsSetErrr() {
    return MasterServerServerAuthenticateResult_Errr_DEFAULT
  }
return p.Errr
}
func (p *MasterServerServerAuthenticateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerServerAuthenticateResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *MasterServerServerAuthenticateResult) IsSetErrr() bool {
  return p.Errr != nil
}

func (p *MasterServerServerAuthenticateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerServerAuthenticateResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ServerSessionData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MasterServerServerAuthenticateResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *MasterServerServerAuthenticateResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Errr = &TInvocationException{}
  if err := p.Errr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Errr), err)
  }
  return nil
}

func (p *MasterServerServerAuthenticateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("serverAuthenticate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerServerAuthenticateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerServerAuthenticateResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *MasterServerServerAuthenticateResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrr() {
    if err := oprot.WriteFieldBegin("errr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errr: ", p), err) }
    if err := p.Errr.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Errr), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errr: ", p), err) }
  }
  return err
}

func (p *MasterServerServerAuthenticateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerServerAuthenticateResult(%+v)", *p)
}

// Attributes:
//  - ServerSessionId
//  - ImageVersionId
type MasterServerGetImageDataArgs struct {
  ServerSessionId Token `thrift:"serverSessionId,1" db:"serverSessionId" json:"serverSessionId"`
  ImageVersionId UUID `thrift:"imageVersionId,2" db:"imageVersionId" json:"imageVersionId"`
}

func NewMasterServerGetImageDataArgs() *MasterServerGetImageDataArgs {
  return &MasterServerGetImageDataArgs{}
}


func (p *MasterServerGetImageDataArgs) GetServerSessionId() Token {
  return p.ServerSessionId
}

func (p *MasterServerGetImageDataArgs) GetImageVersionId() UUID {
  return p.ImageVersionId
}
func (p *MasterServerGetImageDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetImageDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.ServerSessionId = temp
}
  return nil
}

func (p *MasterServerGetImageDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UUID(v)
  p.ImageVersionId = temp
}
  return nil
}

func (p *MasterServerGetImageDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getImageData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetImageDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serverSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.ServerSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serverSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverSessionId: ", p), err) }
  return err
}

func (p *MasterServerGetImageDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageVersionId: ", p), err) }
  return err
}

func (p *MasterServerGetImageDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetImageDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
//  - Failure2
//  - F3
type MasterServerGetImageDataResult struct {
  Success *ImagePublishData `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  Failure2 *TInvocationException `thrift:"failure2,2" db:"failure2" json:"failure2,omitempty"`
  F3 *TNotFoundException `thrift:"f3,3" db:"f3" json:"f3,omitempty"`
}

func NewMasterServerGetImageDataResult() *MasterServerGetImageDataResult {
  return &MasterServerGetImageDataResult{}
}

var MasterServerGetImageDataResult_Success_DEFAULT *ImagePublishData
func (p *MasterServerGetImageDataResult) GetSuccess() *ImagePublishData {
  if !p.IsSetSuccess() {
    return MasterServerGetImageDataResult_Success_DEFAULT
  }
return p.Success
}
var MasterServerGetImageDataResult_Failure_DEFAULT *TAuthorizationException
func (p *MasterServerGetImageDataResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return MasterServerGetImageDataResult_Failure_DEFAULT
  }
return p.Failure
}
var MasterServerGetImageDataResult_Failure2_DEFAULT *TInvocationException
func (p *MasterServerGetImageDataResult) GetFailure2() *TInvocationException {
  if !p.IsSetFailure2() {
    return MasterServerGetImageDataResult_Failure2_DEFAULT
  }
return p.Failure2
}
var MasterServerGetImageDataResult_F3_DEFAULT *TNotFoundException
func (p *MasterServerGetImageDataResult) GetF3() *TNotFoundException {
  if !p.IsSetF3() {
    return MasterServerGetImageDataResult_F3_DEFAULT
  }
return p.F3
}
func (p *MasterServerGetImageDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerGetImageDataResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *MasterServerGetImageDataResult) IsSetFailure2() bool {
  return p.Failure2 != nil
}

func (p *MasterServerGetImageDataResult) IsSetF3() bool {
  return p.F3 != nil
}

func (p *MasterServerGetImageDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetImageDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ImagePublishData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MasterServerGetImageDataResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *MasterServerGetImageDataResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Failure2 = &TInvocationException{}
  if err := p.Failure2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure2), err)
  }
  return nil
}

func (p *MasterServerGetImageDataResult)  ReadField3(iprot thrift.TProtocol) error {
  p.F3 = &TNotFoundException{}
  if err := p.F3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.F3), err)
  }
  return nil
}

func (p *MasterServerGetImageDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getImageData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetImageDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerGetImageDataResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *MasterServerGetImageDataResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure2() {
    if err := oprot.WriteFieldBegin("failure2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:failure2: ", p), err) }
    if err := p.Failure2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:failure2: ", p), err) }
  }
  return err
}

func (p *MasterServerGetImageDataResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetF3() {
    if err := oprot.WriteFieldBegin("f3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:f3: ", p), err) }
    if err := p.F3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.F3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:f3: ", p), err) }
  }
  return err
}

func (p *MasterServerGetImageDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetImageDataResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - ImageDescription
//  - BlockHashes
type MasterServerSubmitImageArgs struct {
  UserToken Token `thrift:"userToken,1" db:"userToken" json:"userToken"`
  ImageDescription *ImagePublishData `thrift:"imageDescription,2" db:"imageDescription" json:"imageDescription"`
  BlockHashes [][]byte `thrift:"blockHashes,3" db:"blockHashes" json:"blockHashes"`
}

func NewMasterServerSubmitImageArgs() *MasterServerSubmitImageArgs {
  return &MasterServerSubmitImageArgs{}
}


func (p *MasterServerSubmitImageArgs) GetUserToken() Token {
  return p.UserToken
}
var MasterServerSubmitImageArgs_ImageDescription_DEFAULT *ImagePublishData
func (p *MasterServerSubmitImageArgs) GetImageDescription() *ImagePublishData {
  if !p.IsSetImageDescription() {
    return MasterServerSubmitImageArgs_ImageDescription_DEFAULT
  }
return p.ImageDescription
}

func (p *MasterServerSubmitImageArgs) GetBlockHashes() [][]byte {
  return p.BlockHashes
}
func (p *MasterServerSubmitImageArgs) IsSetImageDescription() bool {
  return p.ImageDescription != nil
}

func (p *MasterServerSubmitImageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerSubmitImageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *MasterServerSubmitImageArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.ImageDescription = &ImagePublishData{}
  if err := p.ImageDescription.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImageDescription), err)
  }
  return nil
}

func (p *MasterServerSubmitImageArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.BlockHashes =  tSlice
  for i := 0; i < size; i ++ {
var _elem307 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem307 = v
}
    p.BlockHashes = append(p.BlockHashes, _elem307)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MasterServerSubmitImageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("submitImage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerSubmitImageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err) }
  return err
}

func (p *MasterServerSubmitImageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageDescription", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageDescription: ", p), err) }
  if err := p.ImageDescription.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImageDescription), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageDescription: ", p), err) }
  return err
}

func (p *MasterServerSubmitImageArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("blockHashes", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:blockHashes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.BlockHashes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BlockHashes {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:blockHashes: ", p), err) }
  return err
}

func (p *MasterServerSubmitImageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerSubmitImageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
//  - Failure2
//  - Failure3
type MasterServerSubmitImageResult struct {
  Success *TransferInformation `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  Failure2 *TInvocationException `thrift:"failure2,2" db:"failure2" json:"failure2,omitempty"`
  Failure3 *TTransferRejectedException `thrift:"failure3,3" db:"failure3" json:"failure3,omitempty"`
}

func NewMasterServerSubmitImageResult() *MasterServerSubmitImageResult {
  return &MasterServerSubmitImageResult{}
}

var MasterServerSubmitImageResult_Success_DEFAULT *TransferInformation
func (p *MasterServerSubmitImageResult) GetSuccess() *TransferInformation {
  if !p.IsSetSuccess() {
    return MasterServerSubmitImageResult_Success_DEFAULT
  }
return p.Success
}
var MasterServerSubmitImageResult_Failure_DEFAULT *TAuthorizationException
func (p *MasterServerSubmitImageResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return MasterServerSubmitImageResult_Failure_DEFAULT
  }
return p.Failure
}
var MasterServerSubmitImageResult_Failure2_DEFAULT *TInvocationException
func (p *MasterServerSubmitImageResult) GetFailure2() *TInvocationException {
  if !p.IsSetFailure2() {
    return MasterServerSubmitImageResult_Failure2_DEFAULT
  }
return p.Failure2
}
var MasterServerSubmitImageResult_Failure3_DEFAULT *TTransferRejectedException
func (p *MasterServerSubmitImageResult) GetFailure3() *TTransferRejectedException {
  if !p.IsSetFailure3() {
    return MasterServerSubmitImageResult_Failure3_DEFAULT
  }
return p.Failure3
}
func (p *MasterServerSubmitImageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerSubmitImageResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *MasterServerSubmitImageResult) IsSetFailure2() bool {
  return p.Failure2 != nil
}

func (p *MasterServerSubmitImageResult) IsSetFailure3() bool {
  return p.Failure3 != nil
}

func (p *MasterServerSubmitImageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerSubmitImageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TransferInformation{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MasterServerSubmitImageResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *MasterServerSubmitImageResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Failure2 = &TInvocationException{}
  if err := p.Failure2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure2), err)
  }
  return nil
}

func (p *MasterServerSubmitImageResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Failure3 = &TTransferRejectedException{}
  if err := p.Failure3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure3), err)
  }
  return nil
}

func (p *MasterServerSubmitImageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("submitImage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerSubmitImageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerSubmitImageResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *MasterServerSubmitImageResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure2() {
    if err := oprot.WriteFieldBegin("failure2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:failure2: ", p), err) }
    if err := p.Failure2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:failure2: ", p), err) }
  }
  return err
}

func (p *MasterServerSubmitImageResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure3() {
    if err := oprot.WriteFieldBegin("failure3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:failure3: ", p), err) }
    if err := p.Failure3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:failure3: ", p), err) }
  }
  return err
}

func (p *MasterServerSubmitImageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerSubmitImageResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - DisplayName
//  - Addresses
//  - Modulus
//  - Exponent
//  - Certsha256
type MasterServerRegisterSatelliteArgs struct {
  Certsha256 []byte `thrift:"certsha256,1" db:"certsha256" json:"certsha256"`
  Addresses []string `thrift:"addresses,2" db:"addresses" json:"addresses"`
  Modulus string `thrift:"modulus,3" db:"modulus" json:"modulus"`
  Exponent string `thrift:"exponent,4" db:"exponent" json:"exponent"`
  DisplayName string `thrift:"displayName,5" db:"displayName" json:"displayName"`
  UserToken Token `thrift:"userToken,6" db:"userToken" json:"userToken"`
}

func NewMasterServerRegisterSatelliteArgs() *MasterServerRegisterSatelliteArgs {
  return &MasterServerRegisterSatelliteArgs{}
}


func (p *MasterServerRegisterSatelliteArgs) GetUserToken() Token {
  return p.UserToken
}

func (p *MasterServerRegisterSatelliteArgs) GetDisplayName() string {
  return p.DisplayName
}

func (p *MasterServerRegisterSatelliteArgs) GetAddresses() []string {
  return p.Addresses
}

func (p *MasterServerRegisterSatelliteArgs) GetModulus() string {
  return p.Modulus
}

func (p *MasterServerRegisterSatelliteArgs) GetExponent() string {
  return p.Exponent
}

func (p *MasterServerRegisterSatelliteArgs) GetCertsha256() []byte {
  return p.Certsha256
}
func (p *MasterServerRegisterSatelliteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerRegisterSatelliteArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Token(v)
  p.UserToken = temp
}
  return nil
}

func (p *MasterServerRegisterSatelliteArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *MasterServerRegisterSatelliteArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Addresses =  tSlice
  for i := 0; i < size; i ++ {
var _elem308 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem308 = v
}
    p.Addresses = append(p.Addresses, _elem308)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MasterServerRegisterSatelliteArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Modulus = v
}
  return nil
}

func (p *MasterServerRegisterSatelliteArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Exponent = v
}
  return nil
}

func (p *MasterServerRegisterSatelliteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Certsha256 = v
}
  return nil
}

func (p *MasterServerRegisterSatelliteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerSatellite_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerRegisterSatelliteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("certsha256", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:certsha256: ", p), err) }
  if err := oprot.WriteBinary(p.Certsha256); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certsha256 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:certsha256: ", p), err) }
  return err
}

func (p *MasterServerRegisterSatelliteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addresses", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addresses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Addresses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Addresses {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addresses: ", p), err) }
  return err
}

func (p *MasterServerRegisterSatelliteArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modulus", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:modulus: ", p), err) }
  if err := oprot.WriteString(string(p.Modulus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modulus (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:modulus: ", p), err) }
  return err
}

func (p *MasterServerRegisterSatelliteArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exponent", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:exponent: ", p), err) }
  if err := oprot.WriteString(string(p.Exponent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exponent (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:exponent: ", p), err) }
  return err
}

func (p *MasterServerRegisterSatelliteArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:displayName: ", p), err) }
  return err
}

func (p *MasterServerRegisterSatelliteArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:userToken: ", p), err) }
  if err := oprot.WriteString(string(p.UserToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userToken (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:userToken: ", p), err) }
  return err
}

func (p *MasterServerRegisterSatelliteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerRegisterSatelliteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type MasterServerRegisterSatelliteResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *TInvocationException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewMasterServerRegisterSatelliteResult() *MasterServerRegisterSatelliteResult {
  return &MasterServerRegisterSatelliteResult{}
}

var MasterServerRegisterSatelliteResult_Success_DEFAULT int32
func (p *MasterServerRegisterSatelliteResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return MasterServerRegisterSatelliteResult_Success_DEFAULT
  }
return *p.Success
}
var MasterServerRegisterSatelliteResult_Error_DEFAULT *TInvocationException
func (p *MasterServerRegisterSatelliteResult) GetError() *TInvocationException {
  if !p.IsSetError() {
    return MasterServerRegisterSatelliteResult_Error_DEFAULT
  }
return p.Error
}
func (p *MasterServerRegisterSatelliteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerRegisterSatelliteResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MasterServerRegisterSatelliteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerRegisterSatelliteResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MasterServerRegisterSatelliteResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &TInvocationException{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MasterServerRegisterSatelliteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerSatellite_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerRegisterSatelliteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerRegisterSatelliteResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *MasterServerRegisterSatelliteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerRegisterSatelliteResult(%+v)", *p)
}

// Attributes:
//  - ServerSessionId
//  - DisplayName
//  - Addresses
type MasterServerUpdateSatelliteArgs struct {
  ServerSessionId Token `thrift:"serverSessionId,1" db:"serverSessionId" json:"serverSessionId"`
  DisplayName string `thrift:"displayName,2" db:"displayName" json:"displayName"`
  Addresses []string `thrift:"addresses,3" db:"addresses" json:"addresses"`
}

func NewMasterServerUpdateSatelliteArgs() *MasterServerUpdateSatelliteArgs {
  return &MasterServerUpdateSatelliteArgs{}
}


func (p *MasterServerUpdateSatelliteArgs) GetServerSessionId() Token {
  return p.ServerSessionId
}

func (p *MasterServerUpdateSatelliteArgs) GetDisplayName() string {
  return p.DisplayName
}

func (p *MasterServerUpdateSatelliteArgs) GetAddresses() []string {
  return p.Addresses
}
func (p *MasterServerUpdateSatelliteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerUpdateSatelliteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.ServerSessionId = temp
}
  return nil
}

func (p *MasterServerUpdateSatelliteArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *MasterServerUpdateSatelliteArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Addresses =  tSlice
  for i := 0; i < size; i ++ {
var _elem309 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem309 = v
}
    p.Addresses = append(p.Addresses, _elem309)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MasterServerUpdateSatelliteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSatellite_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerUpdateSatelliteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serverSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.ServerSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serverSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverSessionId: ", p), err) }
  return err
}

func (p *MasterServerUpdateSatelliteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  return err
}

func (p *MasterServerUpdateSatelliteArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addresses", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:addresses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Addresses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Addresses {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:addresses: ", p), err) }
  return err
}

func (p *MasterServerUpdateSatelliteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerUpdateSatelliteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
//  - Error
type MasterServerUpdateSatelliteResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  Error *TInvocationException `thrift:"error,2" db:"error" json:"error,omitempty"`
}

func NewMasterServerUpdateSatelliteResult() *MasterServerUpdateSatelliteResult {
  return &MasterServerUpdateSatelliteResult{}
}

var MasterServerUpdateSatelliteResult_Success_DEFAULT bool
func (p *MasterServerUpdateSatelliteResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return MasterServerUpdateSatelliteResult_Success_DEFAULT
  }
return *p.Success
}
var MasterServerUpdateSatelliteResult_Failure_DEFAULT *TAuthorizationException
func (p *MasterServerUpdateSatelliteResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return MasterServerUpdateSatelliteResult_Failure_DEFAULT
  }
return p.Failure
}
var MasterServerUpdateSatelliteResult_Error_DEFAULT *TInvocationException
func (p *MasterServerUpdateSatelliteResult) GetError() *TInvocationException {
  if !p.IsSetError() {
    return MasterServerUpdateSatelliteResult_Error_DEFAULT
  }
return p.Error
}
func (p *MasterServerUpdateSatelliteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerUpdateSatelliteResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *MasterServerUpdateSatelliteResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MasterServerUpdateSatelliteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerUpdateSatelliteResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MasterServerUpdateSatelliteResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *MasterServerUpdateSatelliteResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Error = &TInvocationException{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MasterServerUpdateSatelliteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSatellite_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerUpdateSatelliteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerUpdateSatelliteResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *MasterServerUpdateSatelliteResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *MasterServerUpdateSatelliteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerUpdateSatelliteResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - ImageVersionId
type MasterServerDownloadImageArgs struct {
  ImageVersionId UUID `thrift:"imageVersionId,1" db:"imageVersionId" json:"imageVersionId"`
  SessionId Token `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewMasterServerDownloadImageArgs() *MasterServerDownloadImageArgs {
  return &MasterServerDownloadImageArgs{}
}


func (p *MasterServerDownloadImageArgs) GetSessionId() Token {
  return p.SessionId
}

func (p *MasterServerDownloadImageArgs) GetImageVersionId() UUID {
  return p.ImageVersionId
}
func (p *MasterServerDownloadImageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerDownloadImageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Token(v)
  p.SessionId = temp
}
  return nil
}

func (p *MasterServerDownloadImageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UUID(v)
  p.ImageVersionId = temp
}
  return nil
}

func (p *MasterServerDownloadImageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("downloadImage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerDownloadImageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageVersionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:imageVersionId: ", p), err) }
  if err := oprot.WriteString(string(p.ImageVersionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageVersionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:imageVersionId: ", p), err) }
  return err
}

func (p *MasterServerDownloadImageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *MasterServerDownloadImageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerDownloadImageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Failure
//  - Failure2
//  - F3
type MasterServerDownloadImageResult struct {
  Success *TransferInformation `thrift:"success,0" db:"success" json:"success,omitempty"`
  Failure *TAuthorizationException `thrift:"failure,1" db:"failure" json:"failure,omitempty"`
  Failure2 *TInvocationException `thrift:"failure2,2" db:"failure2" json:"failure2,omitempty"`
  F3 *TNotFoundException `thrift:"f3,3" db:"f3" json:"f3,omitempty"`
}

func NewMasterServerDownloadImageResult() *MasterServerDownloadImageResult {
  return &MasterServerDownloadImageResult{}
}

var MasterServerDownloadImageResult_Success_DEFAULT *TransferInformation
func (p *MasterServerDownloadImageResult) GetSuccess() *TransferInformation {
  if !p.IsSetSuccess() {
    return MasterServerDownloadImageResult_Success_DEFAULT
  }
return p.Success
}
var MasterServerDownloadImageResult_Failure_DEFAULT *TAuthorizationException
func (p *MasterServerDownloadImageResult) GetFailure() *TAuthorizationException {
  if !p.IsSetFailure() {
    return MasterServerDownloadImageResult_Failure_DEFAULT
  }
return p.Failure
}
var MasterServerDownloadImageResult_Failure2_DEFAULT *TInvocationException
func (p *MasterServerDownloadImageResult) GetFailure2() *TInvocationException {
  if !p.IsSetFailure2() {
    return MasterServerDownloadImageResult_Failure2_DEFAULT
  }
return p.Failure2
}
var MasterServerDownloadImageResult_F3_DEFAULT *TNotFoundException
func (p *MasterServerDownloadImageResult) GetF3() *TNotFoundException {
  if !p.IsSetF3() {
    return MasterServerDownloadImageResult_F3_DEFAULT
  }
return p.F3
}
func (p *MasterServerDownloadImageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerDownloadImageResult) IsSetFailure() bool {
  return p.Failure != nil
}

func (p *MasterServerDownloadImageResult) IsSetFailure2() bool {
  return p.Failure2 != nil
}

func (p *MasterServerDownloadImageResult) IsSetF3() bool {
  return p.F3 != nil
}

func (p *MasterServerDownloadImageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerDownloadImageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TransferInformation{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MasterServerDownloadImageResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Failure = &TAuthorizationException{}
  if err := p.Failure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure), err)
  }
  return nil
}

func (p *MasterServerDownloadImageResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Failure2 = &TInvocationException{}
  if err := p.Failure2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Failure2), err)
  }
  return nil
}

func (p *MasterServerDownloadImageResult)  ReadField3(iprot thrift.TProtocol) error {
  p.F3 = &TNotFoundException{}
  if err := p.F3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.F3), err)
  }
  return nil
}

func (p *MasterServerDownloadImageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("downloadImage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerDownloadImageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerDownloadImageResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure() {
    if err := oprot.WriteFieldBegin("failure", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failure: ", p), err) }
    if err := p.Failure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failure: ", p), err) }
  }
  return err
}

func (p *MasterServerDownloadImageResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailure2() {
    if err := oprot.WriteFieldBegin("failure2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:failure2: ", p), err) }
    if err := p.Failure2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Failure2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:failure2: ", p), err) }
  }
  return err
}

func (p *MasterServerDownloadImageResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetF3() {
    if err := oprot.WriteFieldBegin("f3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:f3: ", p), err) }
    if err := p.F3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.F3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:f3: ", p), err) }
  }
  return err
}

func (p *MasterServerDownloadImageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerDownloadImageResult(%+v)", *p)
}

type MasterServerGetOrganizationsArgs struct {
}

func NewMasterServerGetOrganizationsArgs() *MasterServerGetOrganizationsArgs {
  return &MasterServerGetOrganizationsArgs{}
}

func (p *MasterServerGetOrganizationsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetOrganizationsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOrganizations_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetOrganizationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetOrganizationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ServerError
type MasterServerGetOrganizationsResult struct {
  Success []*Organization `thrift:"success,0" db:"success" json:"success,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,1" db:"serverError" json:"serverError,omitempty"`
}

func NewMasterServerGetOrganizationsResult() *MasterServerGetOrganizationsResult {
  return &MasterServerGetOrganizationsResult{}
}

var MasterServerGetOrganizationsResult_Success_DEFAULT []*Organization

func (p *MasterServerGetOrganizationsResult) GetSuccess() []*Organization {
  return p.Success
}
var MasterServerGetOrganizationsResult_ServerError_DEFAULT *TInvocationException
func (p *MasterServerGetOrganizationsResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return MasterServerGetOrganizationsResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *MasterServerGetOrganizationsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerGetOrganizationsResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *MasterServerGetOrganizationsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetOrganizationsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Organization, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem310 := &Organization{}
    if err := _elem310.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem310), err)
    }
    p.Success = append(p.Success, _elem310)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MasterServerGetOrganizationsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *MasterServerGetOrganizationsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOrganizations_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetOrganizationsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerGetOrganizationsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverError: ", p), err) }
  }
  return err
}

func (p *MasterServerGetOrganizationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetOrganizationsResult(%+v)", *p)
}

type MasterServerGetOperatingSystemsArgs struct {
}

func NewMasterServerGetOperatingSystemsArgs() *MasterServerGetOperatingSystemsArgs {
  return &MasterServerGetOperatingSystemsArgs{}
}

func (p *MasterServerGetOperatingSystemsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetOperatingSystemsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOperatingSystems_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetOperatingSystemsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetOperatingSystemsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ServerError
type MasterServerGetOperatingSystemsResult struct {
  Success []*OperatingSystem `thrift:"success,0" db:"success" json:"success,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,1" db:"serverError" json:"serverError,omitempty"`
}

func NewMasterServerGetOperatingSystemsResult() *MasterServerGetOperatingSystemsResult {
  return &MasterServerGetOperatingSystemsResult{}
}

var MasterServerGetOperatingSystemsResult_Success_DEFAULT []*OperatingSystem

func (p *MasterServerGetOperatingSystemsResult) GetSuccess() []*OperatingSystem {
  return p.Success
}
var MasterServerGetOperatingSystemsResult_ServerError_DEFAULT *TInvocationException
func (p *MasterServerGetOperatingSystemsResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return MasterServerGetOperatingSystemsResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *MasterServerGetOperatingSystemsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerGetOperatingSystemsResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *MasterServerGetOperatingSystemsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetOperatingSystemsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*OperatingSystem, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem311 := &OperatingSystem{}
    if err := _elem311.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem311), err)
    }
    p.Success = append(p.Success, _elem311)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MasterServerGetOperatingSystemsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *MasterServerGetOperatingSystemsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOperatingSystems_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetOperatingSystemsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerGetOperatingSystemsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverError: ", p), err) }
  }
  return err
}

func (p *MasterServerGetOperatingSystemsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetOperatingSystemsResult(%+v)", *p)
}

type MasterServerGetVirtualizersArgs struct {
}

func NewMasterServerGetVirtualizersArgs() *MasterServerGetVirtualizersArgs {
  return &MasterServerGetVirtualizersArgs{}
}

func (p *MasterServerGetVirtualizersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetVirtualizersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getVirtualizers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetVirtualizersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetVirtualizersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ServerError
type MasterServerGetVirtualizersResult struct {
  Success []*Virtualizer `thrift:"success,0" db:"success" json:"success,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,1" db:"serverError" json:"serverError,omitempty"`
}

func NewMasterServerGetVirtualizersResult() *MasterServerGetVirtualizersResult {
  return &MasterServerGetVirtualizersResult{}
}

var MasterServerGetVirtualizersResult_Success_DEFAULT []*Virtualizer

func (p *MasterServerGetVirtualizersResult) GetSuccess() []*Virtualizer {
  return p.Success
}
var MasterServerGetVirtualizersResult_ServerError_DEFAULT *TInvocationException
func (p *MasterServerGetVirtualizersResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return MasterServerGetVirtualizersResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *MasterServerGetVirtualizersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerGetVirtualizersResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *MasterServerGetVirtualizersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetVirtualizersResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Virtualizer, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem312 := &Virtualizer{}
    if err := _elem312.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem312), err)
    }
    p.Success = append(p.Success, _elem312)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MasterServerGetVirtualizersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *MasterServerGetVirtualizersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getVirtualizers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetVirtualizersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerGetVirtualizersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverError: ", p), err) }
  }
  return err
}

func (p *MasterServerGetVirtualizersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetVirtualizersResult(%+v)", *p)
}

// Attributes:
//  - StartDate
type MasterServerGetTagsArgs struct {
  StartDate UnixTimestamp `thrift:"startDate,1" db:"startDate" json:"startDate"`
}

func NewMasterServerGetTagsArgs() *MasterServerGetTagsArgs {
  return &MasterServerGetTagsArgs{}
}


func (p *MasterServerGetTagsArgs) GetStartDate() UnixTimestamp {
  return p.StartDate
}
func (p *MasterServerGetTagsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetTagsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UnixTimestamp(v)
  p.StartDate = temp
}
  return nil
}

func (p *MasterServerGetTagsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTags_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetTagsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startDate", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startDate: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startDate (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startDate: ", p), err) }
  return err
}

func (p *MasterServerGetTagsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetTagsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ServerError
type MasterServerGetTagsResult struct {
  Success []*MasterTag `thrift:"success,0" db:"success" json:"success,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,1" db:"serverError" json:"serverError,omitempty"`
}

func NewMasterServerGetTagsResult() *MasterServerGetTagsResult {
  return &MasterServerGetTagsResult{}
}

var MasterServerGetTagsResult_Success_DEFAULT []*MasterTag

func (p *MasterServerGetTagsResult) GetSuccess() []*MasterTag {
  return p.Success
}
var MasterServerGetTagsResult_ServerError_DEFAULT *TInvocationException
func (p *MasterServerGetTagsResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return MasterServerGetTagsResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *MasterServerGetTagsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerGetTagsResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *MasterServerGetTagsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetTagsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*MasterTag, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem313 := &MasterTag{}
    if err := _elem313.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem313), err)
    }
    p.Success = append(p.Success, _elem313)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MasterServerGetTagsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *MasterServerGetTagsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTags_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetTagsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerGetTagsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverError: ", p), err) }
  }
  return err
}

func (p *MasterServerGetTagsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetTagsResult(%+v)", *p)
}

// Attributes:
//  - StartDate
type MasterServerGetSoftwareArgs struct {
  StartDate UnixTimestamp `thrift:"startDate,1" db:"startDate" json:"startDate"`
}

func NewMasterServerGetSoftwareArgs() *MasterServerGetSoftwareArgs {
  return &MasterServerGetSoftwareArgs{}
}


func (p *MasterServerGetSoftwareArgs) GetStartDate() UnixTimestamp {
  return p.StartDate
}
func (p *MasterServerGetSoftwareArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetSoftwareArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := UnixTimestamp(v)
  p.StartDate = temp
}
  return nil
}

func (p *MasterServerGetSoftwareArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSoftware_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetSoftwareArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startDate", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startDate: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startDate (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startDate: ", p), err) }
  return err
}

func (p *MasterServerGetSoftwareArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetSoftwareArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ServerError
type MasterServerGetSoftwareResult struct {
  Success []*MasterSoftware `thrift:"success,0" db:"success" json:"success,omitempty"`
  ServerError *TInvocationException `thrift:"serverError,1" db:"serverError" json:"serverError,omitempty"`
}

func NewMasterServerGetSoftwareResult() *MasterServerGetSoftwareResult {
  return &MasterServerGetSoftwareResult{}
}

var MasterServerGetSoftwareResult_Success_DEFAULT []*MasterSoftware

func (p *MasterServerGetSoftwareResult) GetSuccess() []*MasterSoftware {
  return p.Success
}
var MasterServerGetSoftwareResult_ServerError_DEFAULT *TInvocationException
func (p *MasterServerGetSoftwareResult) GetServerError() *TInvocationException {
  if !p.IsSetServerError() {
    return MasterServerGetSoftwareResult_ServerError_DEFAULT
  }
return p.ServerError
}
func (p *MasterServerGetSoftwareResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerGetSoftwareResult) IsSetServerError() bool {
  return p.ServerError != nil
}

func (p *MasterServerGetSoftwareResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerGetSoftwareResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*MasterSoftware, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem314 := &MasterSoftware{}
    if err := _elem314.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem314), err)
    }
    p.Success = append(p.Success, _elem314)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MasterServerGetSoftwareResult)  ReadField1(iprot thrift.TProtocol) error {
  p.ServerError = &TInvocationException{}
  if err := p.ServerError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerError), err)
  }
  return nil
}

func (p *MasterServerGetSoftwareResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSoftware_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerGetSoftwareResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerGetSoftwareResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerError() {
    if err := oprot.WriteFieldBegin("serverError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverError: ", p), err) }
    if err := p.ServerError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverError: ", p), err) }
  }
  return err
}

func (p *MasterServerGetSoftwareResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerGetSoftwareResult(%+v)", *p)
}

// Attributes:
//  - UploadToken
type MasterServerQueryUploadStatusArgs struct {
  UploadToken Token `thrift:"uploadToken,1" db:"uploadToken" json:"uploadToken"`
}

func NewMasterServerQueryUploadStatusArgs() *MasterServerQueryUploadStatusArgs {
  return &MasterServerQueryUploadStatusArgs{}
}


func (p *MasterServerQueryUploadStatusArgs) GetUploadToken() Token {
  return p.UploadToken
}
func (p *MasterServerQueryUploadStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerQueryUploadStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Token(v)
  p.UploadToken = temp
}
  return nil
}

func (p *MasterServerQueryUploadStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryUploadStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerQueryUploadStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uploadToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uploadToken: ", p), err) }
  if err := oprot.WriteString(string(p.UploadToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uploadToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uploadToken: ", p), err) }
  return err
}

func (p *MasterServerQueryUploadStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerQueryUploadStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
type MasterServerQueryUploadStatusResult struct {
  Success *TransferStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex1 *TInvalidTokenException `thrift:"ex1,1" db:"ex1" json:"ex1,omitempty"`
}

func NewMasterServerQueryUploadStatusResult() *MasterServerQueryUploadStatusResult {
  return &MasterServerQueryUploadStatusResult{}
}

var MasterServerQueryUploadStatusResult_Success_DEFAULT *TransferStatus
func (p *MasterServerQueryUploadStatusResult) GetSuccess() *TransferStatus {
  if !p.IsSetSuccess() {
    return MasterServerQueryUploadStatusResult_Success_DEFAULT
  }
return p.Success
}
var MasterServerQueryUploadStatusResult_Ex1_DEFAULT *TInvalidTokenException
func (p *MasterServerQueryUploadStatusResult) GetEx1() *TInvalidTokenException {
  if !p.IsSetEx1() {
    return MasterServerQueryUploadStatusResult_Ex1_DEFAULT
  }
return p.Ex1
}
func (p *MasterServerQueryUploadStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterServerQueryUploadStatusResult) IsSetEx1() bool {
  return p.Ex1 != nil
}

func (p *MasterServerQueryUploadStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterServerQueryUploadStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TransferStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MasterServerQueryUploadStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex1 = &TInvalidTokenException{}
  if err := p.Ex1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
  }
  return nil
}

func (p *MasterServerQueryUploadStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryUploadStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterServerQueryUploadStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterServerQueryUploadStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx1() {
    if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err) }
    if err := p.Ex1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err) }
  }
  return err
}

func (p *MasterServerQueryUploadStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterServerQueryUploadStatusResult(%+v)", *p)
}


